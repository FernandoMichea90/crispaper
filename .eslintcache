[{"C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\index.js":"1","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\reportWebVitals.js":"2","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\App.js":"3","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Provedores\\UsuarioContext.jsx":"4","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Provider\\TemaConfig.js":"5","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\Nosotros.jsx":"6","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\inicio.jsx":"7","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\CrearCuenta.jsx":"8","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\Etiquetastres.jsx":"9","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\Login.jsx":"10","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\CrearPaper.jsx":"11","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\AdmEtiquetas.jsx":"12","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\Etiquetascuatro.jsx":"13","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Provedores\\useAutenticado.jsx":"14","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\Navegador\\appbar.jsx":"15","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\firebase\\firebase.js":"16","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Funciones\\PaperDoc.js":"17","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\BotonFlotante.jsx":"18","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\Papertres.jsx":"19","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\Caja.jsx":"20","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\Paper.jsx":"21","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Funciones\\Funciones.js":"22","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\Etiquetas.jsx":"23","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\AutoCompletarTres.jsx":"24","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\firebase\\config.js":"25","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\Search.jsx":"26","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\Usuarios.jsx":"27","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\ListarComentarios.jsx":"28","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\Colaboraciones.jsx":"29","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\AdministrarNosotros.jsx":"30","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Funciones\\FuncionesFirebase.js":"31","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\CajaBusqueda.jsx":"32","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\Comentario.jsx":"33","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\TextoEditor.jsx":"34","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\Verinfo.jsx":"35","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\Info.jsx":"36","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\Populares.jsx":"37","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\WhyPag.jsx":"38","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\Recientes.jsx":"39","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\Eligeetiqueta.jsx":"40","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\admin\\Titulo\\Titulo.jsx":"41","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\admin\\WhyPagAdmin.jsx":"42","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\Cargando.jsx":"43","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\VerInfo\\Estructura.jsx":"44","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\Why\\Why.jsx":"45","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\Info\\Imagen.jsx":"46","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\Info\\Formulario.jsx":"47","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\Estilos.jsx":"48","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\Tarjeta\\BotonMenu.jsx":"49","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\Why\\Componentes.jsx":"50","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\Titulo\\Titulo.jsx":"51","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\Navegador\\Dialogo.jsx":"52","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\Progreso.jsx":"53","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\admin\\AdminComponentes.jsx":"54","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\VerInfo\\Imagen.jsx":"55","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\VerInfo\\Formulario.jsx":"56","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\Helmet\\Helmet.jsx":"57","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\VerInfo\\Botones.jsx":"58","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\CardPaper\\CardPaper.jsx":"59","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\CardPaper\\EstilosCard.jsx":"60","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\CardPaper\\Etiiqueta_Tipo\\Etiqueta_Tipo.jsx":"61","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\CardPaper\\Etiiqueta_Tipo\\Modal_Etiqueta_Tipo.jsx":"62","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\firebase\\firebase_db\\TagTipo.jsx":"63","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\CardPaper\\Etiiqueta_Tipo\\IconOpenModal.jsx":"64","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\Util\\LoadingButton.jsx":"65","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\AdmTipos.jsx":"66"},{"size":631,"mtime":1691889067946,"results":"67","hashOfConfig":"68"},{"size":375,"mtime":1691889064946,"results":"69","hashOfConfig":"68"},{"size":6396,"mtime":1693792363344,"results":"70","hashOfConfig":"68"},{"size":395,"mtime":1691889064938,"results":"71","hashOfConfig":"68"},{"size":834,"mtime":1693190919295,"results":"72","hashOfConfig":"68"},{"size":2836,"mtime":1691890405704,"results":"73","hashOfConfig":"68"},{"size":1317,"mtime":1691890402708,"results":"74","hashOfConfig":"68"},{"size":9119,"mtime":1691890405700,"results":"75","hashOfConfig":"68"},{"size":21604,"mtime":1691890451669,"results":"76","hashOfConfig":"68"},{"size":10045,"mtime":1691890583023,"results":"77","hashOfConfig":"68"},{"size":39746,"mtime":1693732417093,"results":"78","hashOfConfig":"68"},{"size":22861,"mtime":1691890606537,"results":"79","hashOfConfig":"68"},{"size":20484,"mtime":1691983706872,"results":"80","hashOfConfig":"68"},{"size":2725,"mtime":1691890405708,"results":"81","hashOfConfig":"68"},{"size":30411,"mtime":1693791422981,"results":"82","hashOfConfig":"68"},{"size":1734,"mtime":1693691922651,"results":"83","hashOfConfig":"68"},{"size":1515,"mtime":1693692042956,"results":"84","hashOfConfig":"68"},{"size":992,"mtime":1691890448641,"results":"85","hashOfConfig":"68"},{"size":29057,"mtime":1691890451653,"results":"86","hashOfConfig":"68"},{"size":47871,"mtime":1691890451641,"results":"87","hashOfConfig":"68"},{"size":10001,"mtime":1691889067930,"results":"88","hashOfConfig":"68"},{"size":727,"mtime":1691890405698,"results":"89","hashOfConfig":"68"},{"size":1429,"mtime":1691889064926,"results":"90","hashOfConfig":"68"},{"size":3697,"mtime":1693375746570,"results":"91","hashOfConfig":"68"},{"size":859,"mtime":1691890402712,"results":"92","hashOfConfig":"68"},{"size":1707,"mtime":1691890405708,"results":"93","hashOfConfig":"68"},{"size":10056,"mtime":1691890451673,"results":"94","hashOfConfig":"68"},{"size":5131,"mtime":1691890405704,"results":"95","hashOfConfig":"68"},{"size":5138,"mtime":1691890405700,"results":"96","hashOfConfig":"68"},{"size":6200,"mtime":1691890405700,"results":"97","hashOfConfig":"68"},{"size":7849,"mtime":1691890606537,"results":"98","hashOfConfig":"68"},{"size":47136,"mtime":1691890451641,"results":"99","hashOfConfig":"68"},{"size":3199,"mtime":1691890448645,"results":"100","hashOfConfig":"68"},{"size":1185,"mtime":1691890402696,"results":"101","hashOfConfig":"68"},{"size":1820,"mtime":1691890448673,"results":"102","hashOfConfig":"68"},{"size":8463,"mtime":1691890451669,"results":"103","hashOfConfig":"68"},{"size":31018,"mtime":1691982250527,"results":"104","hashOfConfig":"68"},{"size":1577,"mtime":1691890448673,"results":"105","hashOfConfig":"68"},{"size":31076,"mtime":1693192482349,"results":"106","hashOfConfig":"68"},{"size":4401,"mtime":1691890606537,"results":"107","hashOfConfig":"68"},{"size":2947,"mtime":1691890451677,"results":"108","hashOfConfig":"68"},{"size":4071,"mtime":1691890451677,"results":"109","hashOfConfig":"68"},{"size":371,"mtime":1691890448645,"results":"110","hashOfConfig":"68"},{"size":969,"mtime":1691890448657,"results":"111","hashOfConfig":"68"},{"size":620,"mtime":1691890448657,"results":"112","hashOfConfig":"68"},{"size":2895,"mtime":1691890451649,"results":"113","hashOfConfig":"68"},{"size":4266,"mtime":1691890451645,"results":"114","hashOfConfig":"68"},{"size":3705,"mtime":1691890603533,"results":"115","hashOfConfig":"68"},{"size":2643,"mtime":1691890448653,"results":"116","hashOfConfig":"68"},{"size":908,"mtime":1691890448657,"results":"117","hashOfConfig":"68"},{"size":1087,"mtime":1691890581019,"results":"118","hashOfConfig":"68"},{"size":5684,"mtime":1691890451649,"results":"119","hashOfConfig":"68"},{"size":587,"mtime":1691890448653,"results":"120","hashOfConfig":"68"},{"size":5039,"mtime":1691890451673,"results":"121","hashOfConfig":"68"},{"size":2699,"mtime":1691890451657,"results":"122","hashOfConfig":"68"},{"size":1499,"mtime":1691890448657,"results":"123","hashOfConfig":"68"},{"size":2334,"mtime":1691890448645,"results":"124","hashOfConfig":"68"},{"size":2715,"mtime":1691890451657,"results":"125","hashOfConfig":"68"},{"size":7238,"mtime":1691973109837,"results":"126","hashOfConfig":"68"},{"size":4133,"mtime":1691973513392,"results":"127","hashOfConfig":"68"},{"size":3111,"mtime":1693732155414,"results":"128","hashOfConfig":"68"},{"size":5891,"mtime":1693789038567,"results":"129","hashOfConfig":"68"},{"size":2284,"mtime":1693701543278,"results":"130","hashOfConfig":"68"},{"size":629,"mtime":1693732251907,"results":"131","hashOfConfig":"68"},{"size":613,"mtime":1693789065637,"results":"132","hashOfConfig":"68"},{"size":133,"mtime":1693792497277,"results":"133","hashOfConfig":"68"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"f6bgti",{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"138"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"138"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"138"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"138"},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"138"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":1,"source":"162","usedDeprecatedRules":"138"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"138"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":1,"source":"172","usedDeprecatedRules":"138"},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"138"},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"138"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"138"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"193"},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"138"},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"201","messages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"138"},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"138"},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"138"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"138"},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"138"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"138"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"221","usedDeprecatedRules":"138"},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"138"},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"138"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"138"},{"filePath":"231","messages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"138"},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"138"},{"filePath":"239","messages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"138"},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"138"},{"filePath":"245","messages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"247","messages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"138"},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"138"},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"138"},{"filePath":"260","messages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"138"},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"138"},{"filePath":"266","messages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"138"},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"138"},{"filePath":"272","messages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"138"},{"filePath":"275","messages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"138"},{"filePath":"280","messages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"138"},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"285","usedDeprecatedRules":"138"},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"138"},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"138"},{"filePath":"292","messages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"294","usedDeprecatedRules":"138"},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"138"},{"filePath":"298","messages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"138"},{"filePath":"301","messages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"303","usedDeprecatedRules":"138"},{"filePath":"304","messages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"306","messages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"138"},{"filePath":"309","messages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"311","messages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\index.js",[],"C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\reportWebVitals.js",[],["313","314"],"C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\App.js",["315","316","317","318","319","320"],"C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Provedores\\UsuarioContext.jsx",[],"C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Provider\\TemaConfig.js",[],"C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\Nosotros.jsx",["321","322","323","324","325"],"import React,{useEffect,useState} from 'react'\r\nimport { makeStyles,Typography,Grid,CircularProgress } from '@material-ui/core'\r\nimport { convertToRaw } from 'draft-js';\r\nimport {  ContentState, convertFromHTML } from 'draft-js'\r\nimport Firebase from \"../../src/firebase/firebase\"\r\nimport { EditorState } from 'draft-js';\r\n\r\nconst estilos=makeStyles((theme)=>({\r\n\r\n    root:{\r\n            fontFamily:\"Lato\",\r\n            fontWeight:\"500\",\r\n\r\n           \"& .MuiTypography-body1\":{\r\n                marginBottom:\"1rem\",\r\n                fontFamily:\"Lato\"            \r\n\r\n    }, \r\n\r\n    \"& .MuiTypography-h3\":{\r\n        marginBottom:\"1rem\",\r\n        fontFamily:\"Lato\",\r\n        fontWeight:\"600fff\"          \r\n\r\n}, \r\n\r\n\r\n},\r\ndivCircular:{\r\n    marginTop:\"100px\"\r\n\r\n},\r\ncircular:{\r\n    height:\"72px !important\",\r\n    width:\"72px !important\",\r\n    display:\"block\",\r\n    margin:\"auto\"\r\n    },\r\n}))\r\n\r\nconst Nosotros = () => {\r\n     const  clases=estilos()\r\n\r\n     const [titulo, settitulo] = useState()\r\n     const [cargando,setcargando]=useState(false)\r\n     const [editorState, setEditorState] = useState()\r\n \r\n\r\n\r\n\r\n\r\n     // funcion extraida \r\n     \r\n\r\n     useEffect(async() => {\r\n\r\n        setcargando(true)\r\n        const retornarObjeto=await Firebase.db.collection(\"administrarnosotros\").doc(\"configuracion\").get().then((respuesta)=>{\r\n            console.log(respuesta.data())\r\n\r\n            return respuesta.data()\r\n        })\r\n\r\n        if(retornarObjeto!=undefined){\r\n            \r\n            settitulo(retornarObjeto.title)\r\n            console.log(retornarObjeto.contenido)\r\n\r\n            // aca esta el problema \r\n            setEditorState(retornarObjeto.contenido)\r\n\r\n        }\r\n\r\n        console.log(editorState)\r\n        setcargando(false)\r\n   \r\n     }, [])\r\n    return (\r\n        <div  className={clases.root} style={{marginTop:\"100px\"}}>\r\n\r\n            <Grid container>\r\n\r\n\r\n                <Grid xs=\"2\"></Grid>\r\n\r\n                <Grid xs=\"8\">\r\n\r\n                            <Typography variant=\"h3\">\r\n                                {titulo}\r\n                            </Typography>\r\n\r\n                             {cargando?\r\n                                    <div className={clases.divCircular} >\r\n                                            <CircularProgress className={clases.circular}></CircularProgress>\r\n                                        </div>\r\n\r\n                                    :\r\n\r\n                                    <div dangerouslySetInnerHTML={{__html:editorState}}>\r\n                                    \r\n                                    </div>\r\n                             }\r\n                          \r\n\r\n                            \r\n                </Grid>\r\n                <Grid xs=\"2\"></Grid>\r\n            </Grid>\r\n\r\n\r\n       \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nosotros\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\inicio.jsx",["326"],"import React,{useState}  from 'react'\r\nimport Caja from \"../Componetes/Caja\"\r\nimport BotonFlotante from \"../Componetes/BotonFlotante\"\r\nimport { useEffect } from 'react'\r\nimport {UsuarioContext} from '../Provedores/UsuarioContext'\r\nimport { useContext } from 'react'\r\n\r\n\r\nconst Inicio = (props) => {\r\n\r\n    // const [state, setstate] = useState(props.recientes)\r\n    const usuario = useContext(UsuarioContext)\r\n    const [papermatch, setpapermatch] = useState(null)\r\nuseEffect(() => {\r\n    try {\r\n        if(props.match.params!==undefined){\r\n            const {paper}=props.match.params\r\n            setpapermatch(paper)    \r\n        }\r\n      \r\n        \r\n    } catch (error) {\r\n        alert(error)\r\n    }\r\n \r\n\r\n}, [props])\r\n\r\n    return (\r\n       \r\n        <div>  \r\n            <Caja textoGeneral={props.textoGeneral} valorados={props.valorados} recientes={props.recientes} paperid={props.match.params} >\r\n                \r\n            </Caja>\r\n        \r\n        {usuario?\r\n           <div>\r\n               {usuario.administrador? <div>\r\n                <BotonFlotante>\r\n               \r\n               </BotonFlotante>\r\n               </div>:\r\n               <div></div>\r\n               }\r\n           \r\n            </div>:\r\n            <></>\r\n        }\r\n       \r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Inicio\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\CrearCuenta.jsx",["327","328","329","330","331"],"import React,{useState} from 'react'\r\nimport { makeStyles,IconButton, Grid, TextField, Button, Typography,CircularProgress} from '@material-ui/core'\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Firebase from \"../firebase/firebase\"\r\nimport Swal from \"sweetalert2\"\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }\r\n\r\nconst useStyles=makeStyles((theme)=>({\r\n\r\n\r\n    root:{\r\n\r\n        marginTop:\"60px\",\r\n\r\n        \" & .MuiButton-containedPrimary:hover\" :{\r\n            backgroundColor: \"#303f9f00\",\r\n            color:\"#5fcccf\",\r\n            border:\"1px solid\"\r\n        },\r\n    }            \r\n,\r\n    textField:{\r\n        margin:\"15px 0px\",\r\n        width:\"95%\"\r\n    },\r\n    divCircular:{\r\n        marginTop:\"100px\"\r\n\r\n    },\r\n    \r\n    circular:{\r\n        height:\"72px !important\",\r\n        width:\"72px !important\",\r\n        display:\"block\",\r\n        margin:\"auto\"\r\n        },\r\n\r\n    boton:{\r\n\r\n    /* margin: 5px; */\r\n    margin: \"25px 25px 80px auto\",\r\n    display: \"block\",\r\n    width:\"300px\",\r\n    [theme.breakpoints.down(\"xs\")]:{\r\n        margin: \"25px auto 80px auto\",\r\n        width:\"290px\"\r\n    }\r\n\r\n        },\r\n\r\n    alerta:{\r\n            margin:\"0px 0px\",\r\n            width:\"90%\"\r\n\r\n    },\r\n    titulo:{\r\n\r\n        marginBottom:\"60px\"\r\n    }\r\n    \r\n\r\n\r\n\r\n\r\n}))\r\n\r\n\r\n\r\n\r\nconst CrearCuenta = (props) => {\r\n    const clases=useStyles()\r\n\r\n    const [cuenta, setcuenta] = useState({\r\n        nombre:\"\",\r\n        correo:\"\",\r\n        password:\"\",\r\n        confirmar:\"\"\r\n    })\r\n\r\n  const [errores, seterrores] = useState({\r\n        nombre:null,\r\n        correo:null,\r\n        password:null,\r\n        confirmar:null\r\n\r\n\r\n  })\r\n  const [cargando,setcargando]=useState(false)\r\n\r\n\r\n const usuariosRef=Firebase.db.collection(\"usuarios\")\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const actualizarState=(e)=>{\r\n        e.preventDefault()\r\n\r\n        setcuenta({...cuenta,\r\n        [e.target.name]:e.target.value\r\n        })\r\n\r\n\r\n    }\r\n\r\n\r\n    const validar=()=>{\r\n       \r\n            let err={}\r\n\r\n\r\n        if(cuenta.nombre==\"\"){\r\n\r\n\r\n            err.nombre=\"debes ingresar tu nombre\"\r\n\r\n\r\n        }\r\n        if(cuenta.correo==\"\"){\r\n\r\n            \r\n            err.correo=\"debes ingresar tu correo\"\r\n\r\n        }else{\r\n             if( !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(cuenta.correo) ) {\r\n                err.correo= \"Email no válido\"\r\n            }\r\n\r\n        }\r\n        if(cuenta.password==\"\"){\r\n\r\n           err.password=\"debes ingresar tu contraseña\"\r\n        }\r\n        if(cuenta.confirmar==\"\"){\r\n\r\n           \r\n            err.confirmar=\"debes  confirmar tu contraseña\"\r\n\r\n        }else{\r\n                if(cuenta.confirmar!=cuenta.password){\r\n\r\n                        err.confirmar=\"tu contraseña no coincide\"\r\n                      \r\n                }\r\n\r\n        }\r\n\r\n            return err\r\n\r\n    }\r\n\r\n\r\n    const guardar= ()=>{\r\n        setcargando(true)    \r\n        let err= validar()\r\n        seterrores(err)\r\n        if(Object.keys(err).length){\r\n          \r\n              setcargando(false)\r\n        }else{\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            Firebase.registrar(cuenta).then(async()=>{\r\n\r\n\r\n\r\n                let usuariosRegistrar={\r\n                    correo:cuenta.correo,\r\n                    nombre:cuenta.nombre,\r\n                    photoURL:null\r\n                }\r\n\r\n\r\n\r\n                await usuariosRef.doc(usuariosRegistrar.correo).set(usuariosRegistrar)\r\n\r\n\r\n                props.history.push(\"/login\")\r\n                Swal.fire({\r\n                       title:\"Cuenta creada correctamente\",\r\n                       icon:\"success\"\r\n                })\r\n\r\n            }).catch(error=>{\r\n                console.log(error)\r\n                let mensaje=\"\"\r\n                let titulo=\"\"\r\n                titulo=error.code\r\n                mensaje=error.message\r\n                \r\n                //desde aca se atrapan los errores\r\n                if(error.code==\"auth/weak-password\"){\r\n                    titulo=\"Contraseña Debil\"    \r\n                    mensaje=\"La contraseña debe tener al menos 6 caracteres\"\r\n                }\r\n\r\n\r\n                //desde aca se atrapan los errores\r\n                if(error.code==\"auth/email-already-in-use\"){\r\n                    titulo=\"correo electrónico ya en uso\"    \r\n                    mensaje=\"La dirección de correo electrónico ya está siendo utilizada por otra cuenta.\"\r\n                }\r\n\r\n                Swal.fire({\r\n                    title:titulo,\r\n                    text:mensaje,\r\n                    icon:\"info\"\r\n             })\r\n            })\r\n            setcargando(false)\r\n    }}\r\n\r\n\r\n    return (\r\n        <div className={clases.root}>\r\n\r\n\r\n            <Typography className={clases.titulo} align=\"center\" variant=\"h3\">\r\n\r\n                Crear Cuenta \r\n            </Typography>\r\n            \r\n\r\n              {\r\n                   cargando? \r\n                            <div className={clases.divCircular} >\r\n                            <CircularProgress className={clases.circular}></CircularProgress>\r\n                            </div>\r\n                   \r\n                   \r\n                    :\r\n              \r\n\r\n            <Grid container>\r\n               <Grid xs={12} md={3}   ></Grid> \r\n               <Grid xs={12} md={6}  >\r\n\r\n                    <TextField \r\n                      fullWidth\r\n                      className={clases.textField}\r\n                      placeholder=\"Ingrese su nombre\"\r\n                      variant=\"outlined\"\r\n                      label=\"Nombre\"\r\n                      name=\"nombre\"\r\n                      onChange={actualizarState}\r\n                       ></TextField>\r\n\r\n\r\n{errores.nombre?\r\n\r\n<Alert    className={clases.alerta}\r\naction={\r\n    <IconButton\r\n      aria-label=\"close\"\r\n      color=\"inherit\"\r\n      size=\"small\" \r\n   \r\n      onClick={() => {\r\n       seterrores({\r\n           ...errores,nombre:null\r\n       })\r\n      }}\r\n    >\r\n   <CloseIcon></CloseIcon>\r\n\r\n    </IconButton>\r\n    }\r\n\r\nseverity=\"error\">{errores.nombre}</Alert>\r\n\r\n    :\r\n\r\n<div></div>\r\n\r\n}        \r\n\r\n                    <TextField \r\n                      fullWidth\r\n                      className={clases.textField}\r\n                      placeholder=\"Ingrese su correo\"\r\n                      variant=\"outlined\"\r\n                      label=\"Correo\"\r\n                      name=\"correo\"\r\n                      onChange={actualizarState}\r\n                       ></TextField>\r\n\r\n\r\n{errores.correo?\r\n\r\n<Alert     className={clases.alerta}\r\n\r\naction={\r\n    <IconButton\r\n      aria-label=\"close\"\r\n      color=\"inherit\"\r\n      size=\"small\" \r\n   \r\n      onClick={() => {\r\n       seterrores({\r\n           ...errores,correo:null\r\n       })\r\n      }}\r\n    >\r\n   <CloseIcon></CloseIcon>\r\n\r\n    </IconButton>\r\n    }\r\n\r\nseverity=\"error\">{errores.correo}</Alert>\r\n\r\n    :\r\n\r\n<div></div>\r\n\r\n}        \r\n\r\n                    <TextField \r\n                      fullWidth\r\n                      className={clases.textField}\r\n                      placeholder=\"Ingrese su contraseña\"\r\n                      label=\"Contraseña\"\r\n                      type=\"password\"\r\n                      variant=\"outlined\"\r\n                      name=\"password\"\r\n                      onChange={actualizarState}\r\n                       ></TextField>\r\n\r\n{errores.password?\r\n\r\n<Alert     className={clases.alerta}\r\n\r\naction={\r\n    <IconButton\r\n      aria-label=\"close\"\r\n      color=\"inherit\"\r\n      size=\"small\" \r\n   \r\n      onClick={() => {\r\n       seterrores({\r\n           ...errores,password:null\r\n       })\r\n      }}\r\n    >\r\n   <CloseIcon></CloseIcon>\r\n\r\n    </IconButton>\r\n    }\r\n\r\nseverity=\"error\">{errores.password}</Alert>\r\n\r\n    :\r\n\r\n<div></div>\r\n\r\n}        \r\n\r\n                    <TextField \r\n                      fullWidth\r\n                      className={clases.textField}\r\n                      placeholder=\"Confirme su contraseña\"\r\n                      label=\"Confirme contraseña\"\r\n                      type=\"password\"\r\n                      variant=\"outlined\"\r\n                      name=\"confirmar\"\r\n                      onChange={actualizarState}\r\n                       ></TextField>\r\n\r\n\r\n{errores.confirmar?\r\n\r\n<Alert     className={clases.alerta}\r\n\r\naction={\r\n    <IconButton\r\n      aria-label=\"close\"\r\n      color=\"inherit\"\r\n      size=\"small\" \r\n   \r\n      onClick={() => {\r\n       seterrores({\r\n           ...errores,confirmar:null\r\n       })\r\n      }}\r\n    >\r\n   <CloseIcon></CloseIcon>\r\n\r\n    </IconButton>\r\n    }\r\n\r\nseverity=\"error\">{errores.confirmar}</Alert>\r\n\r\n    :\r\n\r\n<div></div>\r\n\r\n}        \r\n\r\n\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={clases.boton}     \r\n                        onClick={()=>guardar()}\r\n\r\n                    >\r\n\r\n                        Guardar\r\n                    </Button>\r\n\r\n\r\n               </Grid>\r\n               <Grid xs={12} md={3}></Grid>\r\n\r\n            </Grid>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CrearCuenta\r\n  ","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\Etiquetastres.jsx",["332","333","334","335","336","337","338"],"import React, { useEffect,useState ,useContext} from 'react'\r\nimport Firebase from '../firebase/firebase'\r\nimport { Typography,makeStyles,Grid,CircularProgress,Button } from '@material-ui/core'\r\nimport Paper from \"../Componetes/Paper\"\r\nimport EtiquetasIcon from '@material-ui/icons/LocalOffer';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Paperdos from \"../Componetes/Papertres\"\r\nimport { UsuarioContext } from '../Provedores/UsuarioContext';\r\nimport {actualizarPaper,ActualizarPaperEnEtiquetas} from '../Funciones/PaperDoc'\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Pajaro from '../../src/pajaro.svg'\r\n\r\n\r\n\r\nconst estilos=makeStyles((theme)=>({\r\n    \r\n    root:{\r\n\r\n        \"& .botonEtiqueta\":{\r\n            background:\"#ffffff\",\r\n            color:\"#212121 !important\",\r\n            marginTop:\"10px\",\r\n            fontSize:\"27px\",\r\n            fontFamily:\"nunito\",\r\n            \"&:hover\": {\r\n                background:\"#36cbce\",\r\n                color:\"#ffffff!important\",\r\n             },\r\n        \r\n        },\r\n        \"& .botonEtiqueta .MuiSvgIcon-root\":{\r\n            color:\"#36cbce\"\r\n        },\r\n        \r\n        \"& .botonEtiqueta:hover .MuiSvgIcon-root\":{\r\n            color:\"#ffffff\"\r\n        },\r\n        \r\n\r\n        \" & .MuiButton-containedPrimary:hover\" :{\r\n            backgroundColor: \"#303f9f00\",\r\n            color:\"#5fcccf\",\r\n            border:\"1px solid\"\r\n        },\r\n\r\n    },\r\n    \r\n    texto:{\r\n        fontFamily:\"nunito\",\r\n        fontWeight:\"300\",\r\n    \r\n\r\n\r\n    },\r\n\r\n    divEtiqueta: {\r\n\r\n        height:\"100%\",\r\n        margin:\"auto\"\r\n    },\r\n    \r\n    \r\n    \r\n    textoDos:{\r\n        fontFamily:\"nunito\",\r\n        fontWeight:\"300\",\r\n        textTransform:\"uppercase\"\r\n\r\n\r\n    },\r\n    divTag:{\r\n\r\n        padding:\"50px 0px\"\r\n    },\r\n    divEtiqueta:{\r\n\r\n        margin:\"29px auto\",\r\n        width:\"75vw\"\r\n\r\n    },\r\n    divReg:{\r\n\r\n        margin:\"45px auto\",\r\n        width:\"75vw\"\r\n\r\n    },\r\n    divCircular:{\r\n        marginTop:\"100px\"\r\n\r\n    },\r\n    circular:{\r\n        height:\"72px !important\",\r\n        width:\"72px !important\",\r\n        display:\"block\",\r\n        margin:\"auto\"\r\n        }\r\n\r\n        ,textNoDisponible:{\r\n\r\n\r\n            fontFamily:\"Nunito\",\r\n            color:\"#808080\"\r\n        } }\r\n))\r\n\r\n\r\n\r\nconst Etiquetas = (props) => {\r\n \r\nconst clases=estilos()    \r\nconst history=useHistory()\r\n\r\nconst usuario =useContext(UsuarioContext)\r\n// guardar el valor \r\nconst [elvalor, setelvalor] = useState()\r\n// state etiquet para pedir mas \r\nconst [etiquetarray, setetiquetarray] = useState([])\r\nconst [etiquetas, setetiquetas] = useState([])\r\nconst [pedirmas, setpedirmas] = useState(false)\r\nconst [paper, setpaper] = useState([])\r\nconst [cargando, setcargando] = useState(false)\r\nconst [ultimo, setultimo] = useState(0)\r\nconst [changeLike, setChangeLike] = useState({\r\n    cambio:false,\r\n    idEtiqueta:null,\r\n    paper:null\r\n\r\n\r\n})\r\nconst recientes=props.recientes\r\nconst valorados=props.valorados\r\n//  crear nuevo state para el  el nuevo arreglo \r\nconst [paperArray, setpaperArray] = useState([])\r\n// buscar etiquetas \r\nconst buscaretiquetas=async()=>{\r\n setcargando(true)   \r\n \r\n  const lista  =await Firebase.db.collection(\"etiquetas\").get()\r\n\r\n  const listados = await Promise.all(lista.docs.map(async(doc)=>{\r\n            //console.log(doc.data())\r\n            // etiqueta \r\n             let etiqueta= {id:doc.id,\r\n                 ...doc.data()}\r\n            console.log(etiqueta)  \r\n            //mapear etiqueta \r\n             let listatres=[] \r\n             \r\n                    if (valorados){\r\n                        listatres=await Firebase.db.collection(\"etiquetas\").doc(etiqueta.id).collection(\"paper\").orderBy(\"likes\",\"desc\").limit(2).get()\r\n                    }else{\r\n\r\n                                if(recientes){\r\n                                    listatres=await Firebase.db.collection(\"etiquetas\").doc(etiqueta.id).collection(\"paper\").orderBy(\"subida\",\"desc\").limit(2).get()\r\n\r\n\r\n                                }else{\r\n\r\n                                    listatres=await Firebase.db.collection(\"etiquetas\").doc(etiqueta.id).collection(\"paper\").limit(2).get()\r\n                                } \r\n                    }\r\n\r\n             \r\n             const listacuatro= listatres.docs.map(doc=>{\r\n                    return {\r\n                        id:doc.id,\r\n                        ...doc.data(),\r\n                        click:false,\r\n                    }  \r\n             }\r\n             )       \r\n             console.log(listacuatro)\r\n             return{\r\n                etiquetas:etiqueta,\r\n                paper:listacuatro\r\n\r\n            }\r\n                // return {\r\n                //     id:doc.id,\r\n                //     ...doc.data()\r\n                // }\r\n            }))  \r\n                         \r\n  console.log(listados)        \r\n  setpaperArray(listados)  \r\n  setcargando(false)\r\n\r\n\r\n}\r\n\r\n\r\nfunction manejarSnapshot(snapshot){\r\n\r\n    const lista =snapshot.docs.map(doc=>{\r\n\r\n        return {\r\n\r\n            id:doc.id,\r\n            ...doc.data()\r\n        }\r\n\r\n\r\n    })\r\n\r\n setetiquetas(lista)\r\n setcargando(false)\r\n //armarpaper(lista)\r\n //segunda lista return true \r\n\r\n}\r\n\r\n\r\nconst armarconsultrecientes=(lista)=>{\r\n    lista.sort((a,b)=>(a.subida<b.subida)?1:-1)\r\n    return lista \r\n}\r\nconst armarconsultvalorados=(lista)=>{\r\n\r\n    lista.sort((a,b)=>(a.likes<b.likes)?1:-1)\r\n    return lista \r\n\r\n}\r\nconst megusta=(valor)=>{\r\n        console.log(valor)\r\n        megustacuatro(valor)\r\n}\r\n// Éste va a ser el me gusta sin validar usuario\r\nconst megustaSinValidarUsuario=(paperNuevo)=>{\r\n\r\n    // recorrer arreglo en donde esta etiqueta y paper 'paperArray'\r\n    //crear nueva constante del paper\r\n    const nuevoPaperArray=paperArray.map(paperMap=>{\r\n\r\n                    //recorrer solo arreglo paper \r\n                    //paperMap = paper[]\r\n                    console.log(paperArray)\r\n                     let paper=paperMap.paper.map((paperNew)=>{\r\n                                //validar que los paper coincidan \r\n                                if(paperNew.id==paperNuevo.id){\r\n                                    console.log(paperMap.etiquetas.id)\r\n\r\n                                        //\r\n\r\n                                    return paperNuevo\r\n                                } else{\r\n                                    return paperNew\r\n                                }       \r\n                        })                \r\n                // crear nuevo objeto con  la etiqueta y el paper \r\n                let nuevoObjeto={\r\n                    etiquetas:paperMap.etiquetas,\r\n                    paper:paper   \r\n                }\r\n                //retornar objeto  \r\n                return nuevoObjeto\r\n    })\r\n// insertar  paperArray\r\n  setpaperArray(nuevoPaperArray)\r\n\r\n    \r\n}\r\n\r\n\r\nconst pedirMore=()=>{\r\n    listaconid(elvalor,true)    \r\n}\r\n\r\n\r\n\r\nconst megustacuatro=async(valor)=>{ \r\n    setcargando(true)\r\n    if(usuario==null) {\r\n            return history.push(\"/login\")\r\n    }\r\n    // prueba de las funciones \r\n    //const valorRenovado=  await RetornarPaper(valor.id)\r\n    //valor=valorRenovado\r\n    if(valor.haVotado==undefined){                    \r\n            var antiguoHaVotado=[]\r\n    }else{\r\n            var antiguoHaVotado=valor.haVotado\r\n    }                      \r\n    // nuevo paper \r\n    let newPaper={}\r\n    let nuevaLista=[]\r\n    if(antiguoHaVotado.includes(usuario.uid)){ \r\n            antiguoHaVotado=antiguoHaVotado.filter(function(obj){\r\n                    return obj!==usuario.uid\r\n            })\r\n            let megusta=valor.likes-1 \r\n             newPaper={\r\n                    ...valor,\r\n                     likes:megusta,\r\n                    haVotado:antiguoHaVotado\r\n            }\r\n             //listaPaperdos(newPaper,megusta,antiguoHaVotado)\r\n            //await firebase.db.collection(\"paper\").doc(valor.id).update(nuevoPaper)\r\n            //RenovarPaperMapEtiqueta(nuevoPaper)\r\n            // \r\n            nuevaLista= megustacinco(newPaper,megusta,antiguoHaVotado)\r\n    console.log(newPaper)\r\n }else{ \r\n    // alert(\"no incluido\")\r\n const nuevoHaVotado = [...antiguoHaVotado, usuario.uid];\r\n console.log(nuevoHaVotado)\r\n let megusta=valor.likes+1   \r\n \r\n\r\n // crear variable de paper \r\n\r\n newPaper={\r\n    ...valor,\r\n     likes:megusta,\r\n    haVotado:nuevoHaVotado\r\n}\r\nnuevaLista=megustacinco(newPaper,megusta,nuevoHaVotado)\r\nconsole.log(newPaper,megusta,nuevoHaVotado)\r\n//listaPaperdos(newPaper,megusta,nuevoHaVotado)\r\n//await firebase.db.collection(\"paper\").doc(valor.id).update(nuevoPaper)\r\n\r\n//RenovarPaperMapEtiqueta(nuevoPaper)\r\n\r\n\r\n\r\n    //        let arreglo=paper \r\n    //        setpaper([])\r\n\r\n    // const nuevoPaper=arreglo.map(papel=>{\r\n    //    if(valor.id==papel.id){\r\n\r\n\r\n\r\n             \r\n    //         return{\r\n    //                 ...papel,\r\n    //                 likes:1\r\n    //         }\r\n\r\n    //    }\r\n\r\n    //    return papel\r\n\r\n    // })\r\n\r\n    // setpaper(nuevoPaper)\r\n\r\n}\r\n\r\nconsole.log(nuevaLista)\r\nsetpaperArray(nuevaLista)\r\nsetcargando(false)\r\n actualizarPaper(newPaper)\r\n ActualizarPaperEnEtiquetas(newPaper)\r\n// buscaretiquetas()\r\n// props.setChangeLike({\r\n//         cambio:true,\r\n//         idEtiqueta:props.id,\r\n//         paper:newPaper\r\n//     })\r\n\r\n\r\n         \r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\nconst  megustacinco=(valor,megusta,nuevosvotos)=>{\r\n\r\n  const nuevaLista =paperArray.map(doc=>{\r\n\r\n                console.log(doc)\r\n                  const nuevaListaDos=doc.paper.map(doc=>{\r\n                        console.log(doc)\r\n                                if(valor.id==doc.id){\r\n\r\n                               \r\n                                    return {\r\n                                        ...valor,\r\n                                        likes:megusta,\r\n                                        haVotado:nuevosvotos       \r\n                                    }\r\n                            }\r\n\r\n\r\n\r\n                            return doc\r\n\r\n\r\n                    })\r\n\r\n\r\n                   return {\r\n                       etiquetas:doc.etiquetas,\r\n                       paper:nuevaListaDos\r\n                   }\r\n\r\n  })\r\n\r\n  return nuevaLista\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nconst listaconid=async(valor,ruta)=>{\r\n\r\n    setcargando(true)\r\n        setetiquetas(valor)\r\n        setpedirmas(true)\r\n          \r\n\r\n    if(ruta){\r\n        \r\n        var consulta = await Firebase.db.collection(\"etiquetas\").doc(valor).collection(\"paper\").orderBy(\"id\",\"desc\").startAfter(ultimo).limit(5).get()\r\n\r\n\r\n    }else{\r\n        var consulta = await Firebase.db.collection(\"etiquetas\").doc(valor).collection(\"paper\").orderBy(\"id\",\"desc\").limit(5).get()\r\n        }\r\n\r\n    var consult=consulta.docs.map(doc=>{\r\n \r\n         return {\r\n \r\n             id:doc.id,\r\n             ...doc.data()\r\n         }\r\n \r\n    \r\n     })\r\n\r\n     console.log(consult)\r\n\r\n     // guardar en el state la etiqueta \r\n     \r\n     setetiquetarray(antiguo=>[...antiguo,...consult])\r\n\r\n\r\n     if(consult.length){\r\n        let nuevoultimo=consult[consult.length-1].id\r\n                 console.log(nuevoultimo)\r\n                if(nuevoultimo!=undefined){\r\n                    setultimo(consult[consult.length-1].id)\r\n                    \r\n                }\r\n\r\n    }\r\n     \r\n\r\n// console.log(consult)\r\n\r\n// armar consulta del nuevo arreglo \r\n\r\nconst etiquet = await Firebase.db.collection(\"etiquetas\").doc(valor).get().then((doc)=>{\r\n    // console.log(doc.id)\r\n    // console.log(doc.data())\r\n    return{\r\n        id:doc.id,\r\n        ...doc.data()\r\n\r\n    }\r\n\r\n})\r\n\r\nconsole.log(etiquet)\r\n\r\n\r\n// armar el objeto \r\n\r\nconst nuevoObjeto={\r\n    etiquetas:etiquet,\r\n    paper:consult\r\n}\r\n\r\nconsole.log(nuevoObjeto)\r\n\r\nlet prueba=[]\r\nprueba.push(nuevoObjeto)\r\nsetpaperArray(prueba)\r\nsetcargando(false)\r\n\r\n//  if(recientes){\r\n//          alert(\"prueba\")\r\n//         var consult =  armarconsultrecientes(consult)\r\n// }\r\n// if(valorados){\r\n\r\n     \r\n    //     var consult =  armarconsultvalorados(consult)\r\n    // }\r\n\r\n\r\n    //      var res={\r\n    //         tag:valor,\r\n    //         lista:consult,\r\n    //         cantidad:consult.length\r\n    //      }\r\n        \r\n    //      setpaper([res])\r\n        \r\n    //      setcargando(false)\r\n            \r\n\r\n    }\r\n\r\n    \r\n    useEffect(async() => {\r\n    \r\n        const {valor}=props.match.params\r\n\r\n\r\n\r\n    \r\n\r\n        if(valor){\r\n            setelvalor(valor)\r\n            listaconid(valor,false)\r\n        \r\n        }else{ \r\n        //alert(\"prueba\")\r\n        buscaretiquetas()\r\n        setpedirmas(false)\r\n        }\r\n\r\n\r\n    }, [props])\r\n\r\n\r\n        return (\r\n\r\n\r\n\r\n        \r\n            <div className={clases.root}  >\r\n\r\n\r\n                \r\n        \r\n                <div className={clases.divTag} >\r\n                        <Typography variant=\"h3\" align=\"center\"\r\n                                className={clases.texto}\r\n                        >\r\n                            \r\n                            Environmental Topics\r\n                            </Typography> \r\n\r\n\r\n                </div>  \r\n\r\n                {\r\n                    !cargando?\r\n                    <div>\r\n                            {paperArray.length!=0?\r\n                                    <div>\r\n                                        {\r\n                                        paperArray.map(paper=>(\r\n                                    <div  >\r\n                                        <div id=\"etiqueta\" className={clases.divEtiqueta} >\r\n                            \r\n                                         \r\n                                      \r\n                                                    {/* <EtiquetasIcon color=\"primary\"/> */}\r\n\r\n\r\n                                                <Grid container>\r\n                                                <Grid xs={1}>\r\n                                                        \r\n                                                            <img height=\"100\" src={Pajaro}></img>\r\n                                                       \r\n                                                </Grid>\r\n                                                <Grid xs={11}>\r\n                                                <div className={clases.divEtiqueta}>\r\n                                                        <Typography   className={clases.textoDos} variant=\"h4\" align=\"left\">\r\n                                                            {paper.etiquetas !=undefined&&\r\n                                                            \r\n                                                            paper.etiquetas.descripcion}\r\n                        \r\n                                                        </Typography> \r\n                                                 </div>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n\r\n\r\n\r\n                                            {/* <Button id=\"etiqueta\" size=\"large\"\r\n\r\n                                            className=\"botonEtiqueta\"\r\n                                            startIcon={<EtiquetasIcon/>}\r\n                                            >\r\n                                            {paper.etiquetas !=undefined&&\r\n                                        \r\n                                        paper.etiquetas.descripcion}\r\n                                        </Button> */}\r\n\r\n                                  \r\n                                      </div>     \r\n                                      <div>\r\n\r\n\r\n\r\n                                         \r\n                                   \r\n                                                <div  >\r\n                                                    \r\n                                                    {paper.etiquetas !=undefined&&\r\n                                                    paper.paper.length!=0?\r\n                                                               paper.paper.map(doc=>(\r\n                                                             <div>\r\n                                                                <Paperdos  paper={doc}  buscaretiquetas={buscaretiquetas}   length={paper.paper.length}   changeLike={changeLike} setChangeLike={setChangeLike}   megusta={megusta} cambiarLike={megustaSinValidarUsuario}  ></Paperdos>\r\n                                                                         \r\n                                                            \r\n                                                            \r\n                                                             </div>   \r\n                                                \r\n                                                            ))\r\n\r\n                                                            \r\n\r\n                                                                \r\n\r\n\r\n\r\n               \r\n                                                               \r\n\r\n\r\n                                                :\r\n                                                \r\n                                                <Typography className={clases.\r\n                                                    textNoDisponible\r\n                                                     } align=\"center\" variant=\"h5\">\r\n                                                              No hay registros\r\n                                                    </Typography>          \r\n\r\n\r\n                                                }\r\n\r\n                                                </div>\r\n\r\n\r\n\r\n\r\n                                                { \r\n                                                    pedirmas?\r\n                                                \r\n                                                    <Typography align=\"center\">\r\n                                                    <Button \r\n                                                            endIcon={<ExpandMoreIcon></ExpandMoreIcon>}\r\n                                                            variant =\"contained\"\r\n                                                            className=\"botonVerMas\"\r\n                                                           onClick={()=>pedirMore()}\r\n                                                       \r\n                                                    \r\n                                                    >\r\n                                                    see more\r\n                                                            </Button> \r\n                                                 </Typography>\r\n                                                    :\r\n                                                paper.etiquetas.contar >2&&\r\n                                                \r\n                                                <Typography align=\"center\">\r\n                                                                <Button \r\n                                                                        endIcon={<ExpandMoreIcon></ExpandMoreIcon>}\r\n                                                                        variant =\"contained\"\r\n                                                                        className=\"botonVerMas\"\r\n                                                                        href= {`/tag/${paper.etiquetas.id}`}\r\n                                                                   \r\n                                                                \r\n                                                                >\r\n                                                                see more\r\n                                                                        </Button> \r\n                                                </Typography>   }             \r\n\r\n\r\n                                                \r\n                                                    {/* <div>\r\n                                                        <Paperdos id={tag.id}  changeLike={changeLike} setChangeLike={setChangeLike}   etiquetas={tag} buscaretiquetas={buscaretiquetas}   ></Paperdos>\r\n                                                    </div>   */}\r\n                                               \r\n                        \r\n                                                    \r\n                                                    \r\n                                        \r\n                                      </div>  \r\n                                      </div>\r\n    \r\n                                )\r\n                                )\r\n                                \r\n                                \r\n\r\n\r\n\r\n\r\n                                \r\n                                \r\n                                }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                </div>\r\n                        \r\n                    :\r\n                    <div style={{width:\"inherit\"}}>\r\n                    <Typography className={clases.\r\n                        textNoDisponible\r\n                         }  align=\"center\" variant=\"h4\">\r\n                                  No ahi registros\r\n                        </Typography>          \r\n                        </div>\r\n                    }\r\n\r\n\r\n                </div>:\r\n\r\n                         <div>\r\n                                <div className={clases.divCircular} >\r\n                                        <CircularProgress className={clases.circular}></CircularProgress>\r\n                                    </div>\r\n                        </div>\r\n\r\n            }\r\n\r\n\r\n                  \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Etiquetas\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\Login.jsx",["339","340","341"],"import React,{useState,useEffect} from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Firebase from \"../firebase/firebase\"\r\nimport Google from '../../src/google.png'\r\nimport Swal from 'sweetalert2'\r\n\r\n\r\nfunction Copyright() {\r\n\r\n\r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {'Copyright © '}\r\n      <Link color=\"inherit\" >\r\n      Planetcolab\r\n      </Link>{' '}\r\n      {new Date().getFullYear()}\r\n      {'.'}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    height: '92vh',\r\n\r\n  \"& body\":{\r\n    backgroundColor:\"#ffffff\"\r\n  },\r\n   \r\n\r\n    \" & .submit\": {\r\n      margin: theme.spacing(5, 0, 2),\r\n      background:\"#ffffff\",\r\n      color:\"#000000\"\r\n    },\r\n    \" & .MuiButton-containedPrimary:hover\" :{\r\n      backgroundColor: \"#303f9f00\",\r\n      color:\"#5fcccf\",\r\n      border:\"1px solid\"\r\n  },\r\n  },\r\n  image: {\r\n    backgroundImage: 'url(https://source.unsplash.com/random)',\r\n    backgroundRepeat: 'no-repeat',\r\n    backgroundColor:\"#ffffff\",\r\n    backgroundSize: 'cover',\r\n    backgroundPosition: 'center',\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(1, 4),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.primary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  botonGoogle:{\r\n    background:\"#ffffff\",\r\n    color:\"#000000\"\r\n  },\r\n  imagenGoogle:{\r\n    margin:\"12px\"\r\n  }\r\n\r\n}));\r\n\r\nexport default function SignInSide(props) {\r\n\r\n\r\n\r\n\r\n  const [recuerdame, setrecuerdame] = useState({\r\n    recuerdame:false\r\n  })\r\n\r\n  const [user, setuser] = useState({\r\n    email:\"\",\r\n   password:\"\" \r\n\r\n  })\r\n  const [errores, seterrores] = useState({\r\n    email:null,\r\n    password:null\r\n\r\n  })\r\n\r\n  const classes = useStyles();\r\n\r\n\r\n\r\n  const handleChangeCheck=(e)=>{\r\n   \r\n\r\n        if(e.target.checked==false){\r\n\r\n          localStorage.clear()\r\n        }\r\n\r\n\r\n      setrecuerdame({\r\n        [e.target.name]:e.target.checked\r\n\r\n      })\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n  const handleChange=e=>{\r\n      e.preventDefault()\r\n        setuser({\r\n          ...user,[e.target.name]:e.target.value\r\n\r\n        })\r\n\r\n\r\n  }\r\n\r\n\r\n  const validar=()=>{\r\n\r\n      let err={}\r\n\r\n      if(user.email==\"\"){\r\n          err.email=\"debes ingresar un usuario\"\r\n      }else{ \r\n      \r\n            if( !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(user.email) ) {\r\n              err.email= \"Email no válido\"\r\n            }\r\n        }\r\n      if(user.password==\"\"){\r\n        err.password=\"debes ingresar una contraseña\"\r\n      }\r\n\r\n\r\n        return err\r\n\r\n  }\r\n\r\n  const iniciarCorreoGmail=()=>{\r\n       // alert(\"paso por el boton\")\r\n       Firebase.registrarCorreo()\r\n       props.history.push(\"/\")\r\n      \r\n       \r\n   }\r\n\r\n\r\n\r\n  const iniciarSesion=async()=>{\r\n    let err=validar()\r\n    seterrores(err)\r\n\r\n    if(Object.keys(err).length){\r\n\r\n       \r\n\r\n    }else{\r\n\r\n      try{\r\n      await Firebase.login(user)\r\n       recordar()\r\n        props.history.push(\"/\")\r\n\r\n      }catch(error){\r\n\r\n        console.log(error.code)\r\n\r\n        if(error.code==\"auth/wrong-password\"){\r\n\r\n          Swal.fire({\r\n            title:\"Error\",\r\n            text:\"contraseña invalida\",\r\n            icon:\"error\",\r\n            confirmButtonColor:'#21cbce',\r\n        })\r\n  \r\n  \r\n        }\r\n  \r\n\r\n\r\n        if(error.code==\"auth/user-not-found\"){\r\n\r\n          Swal.fire({\r\n            title:\"La cuenta no existe\",\r\n            icon:\"error\"\r\n        })\r\n\r\n        }\r\n      }\r\n    \r\n    \r\n\r\n    }\r\n\r\n\r\n  }\r\n\r\n  const recordar =()=>{\r\n\r\n      if(recuerdame.recuerdame==true){\r\n\r\n           localStorage.user=user.email\r\n           localStorage.password=user.password\r\n           localStorage.recuerdame=recuerdame.recuerdame\r\n\r\n\r\n      }else{\r\n\r\n        localStorage.clear()\r\n      }\r\n\r\n  }\r\n\r\nconst recuperarContrasena=async()=>{\r\n\r\n   await Swal.fire({\r\n    title: 'Recuperar contraseña',\r\n    input: 'text',\r\n    confirmButtonColor: '#21cbce',\r\n    \r\n    inputPlaceholder: 'Ingrese su  correo',\r\n    preConfirm: async(login) => {\r\n      \r\n      try {\r\n\r\n        if(login==\"\"){\r\n       \r\n          Swal.showValidationMessage(\r\n            `Debe ingresar un correo`\r\n          )\r\n  \r\n       \r\n      }else{ \r\n        \r\n        if( !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(login) ) {\r\n          Swal.showValidationMessage(\r\n            `Correo invalido`\r\n          )\r\n  \r\n        }else{\r\n              console.log(\"hola mundo\")\r\n          await Firebase.auth.sendPasswordResetEmail(login).then((prueba)=>{\r\n                  console.log(prueba)\r\n                  return {\r\n                    resultado:\"correoenviado\"\r\n                  }\r\n\r\n          }).catch(error=>{ \r\n            console.log(error)\r\n          })\r\n        }\r\n\r\n\r\n\r\n        }\r\n        \r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n     \r\n  \r\n  \r\n  \r\n  },\r\n    allowOutsideClick: () => !Swal.isLoading()\r\n  }).then((result) => {\r\n    \r\n\r\n    if (result.isConfirmed) {\r\n      Swal.fire({\r\n        title: `correo enviado`,\r\n        icon:  `success`\r\n      })\r\n    }\r\n  \r\n  })\r\n   \r\n  \r\n\r\n\r\n}\r\n\r\n\r\n useEffect(() => {\r\n            let prueba={\r\n              email:\"\",\r\n              password:\"\"\r\n            }\r\n      \r\n         if(localStorage.user!=undefined){\r\n       \r\n                  prueba.email=localStorage.user\r\n           \r\n         }\r\n         if(localStorage.password!=undefined){\r\n          \r\n              prueba.password=localStorage.password\r\n         }\r\n\r\n          if(localStorage.recuerdame!=undefined){\r\n          setrecuerdame({recuerdame:localStorage.recuerdame})\r\n       }\r\n     \r\n       \r\n\r\n\r\n\r\n      \r\n        setuser(prueba)\r\n\r\n\r\n \r\n }, [])\r\n\r\n  return (\r\n    <Grid container component=\"main\" className={classes.root}>\r\n      <CssBaseline />\r\n      <Grid item xs={false} sm={4} md={7} className={classes.image} />\r\n      <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\r\n        <div className={classes.paper}>\r\n         \r\n        <Avatar className={classes.avatar}>\r\n            <LockOutlinedIcon color=\"secondary\" />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n          Sign in\r\n          </Typography>\r\n          <div className={classes.form} >\r\n\r\n\r\n            {errores.email?\r\n            \r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n           \r\n              label=\"Email address\"\r\n              name=\"email\"\r\n              onChange={handleChange}\r\n              autoComplete=\"email\"\r\n           \r\n              error\r\n              id=\"standard-error\" \r\n              helperText={errores.email}\r\n            />:\r\n            <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            onChange={handleChange}\r\n            required\r\n            fullWidth\r\n            id=\"email\"\r\n            label=\"Email address\"\r\n            name=\"email\"\r\n            autoComplete=\"email\"\r\n          \r\n            value={user.email}\r\n          />\r\n            }\r\n\r\n\r\n\r\n\r\n            {errores.password?\r\n\r\n<TextField\r\nvariant=\"outlined\"\r\nmargin=\"normal\"\r\nrequired\r\nfullWidth\r\nname=\"password\"\r\nlabel=\"Password\"\r\ntype=\"password\"\r\nid=\"password\"\r\nautoComplete=\"current-password\"\r\nerror\r\nid=\"standard-error\" \r\nonChange={handleChange}\r\nhelperText={errores.password}\r\n/>\r\n            \r\n          :\r\n          <TextField\r\n          variant=\"outlined\"\r\n          margin=\"normal\"\r\n          required\r\n          fullWidth\r\n          name=\"password\"\r\n          label=\"Password\"\r\n          type=\"password\"\r\n          onChange={handleChange}\r\n          id=\"password\"\r\n          autoComplete=\"current-password\"\r\n          value={user.password}\r\n        />\r\n\r\n\r\n\r\n          \r\n          }\r\n          \r\n            <FormControlLabel\r\n              control={<Checkbox  checked={recuerdame.recuerdame} name=\"recuerdame\" onChange={handleChangeCheck} value=\"remember\" color=\"primary\" />}\r\n              label=\"Remember me\"\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.submit}\r\n              onClick={()=>iniciarSesion()}\r\n            >\r\n              Sign In\r\n            </Button>\r\n\r\n            <Button\r\n             \r\n             fullWidth\r\n             variant=\"contained\"\r\n             \r\n             className=\"submit\"\r\n             onClick={()=>iniciarCorreoGmail()}\r\n\r\n\r\n           >\r\n\r\n             <img className={classes.imagenGoogle} src ={Google} height=\"25\" />\r\n             login with google\r\n           </Button>\r\n            <Grid container>\r\n              <Grid item xs>\r\n                <Link onClick={()=> recuperarContrasena()} variant=\"body2\">\r\n                  Forgot you password?\r\n                </Link>\r\n              </Grid>\r\n              <Grid item>\r\n                <Link  href=\"/crearcuenta\"  variant=\"body2\">\r\n                  {\"Don't have an account? Sign Up\"}\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n            <Box mt={5}>\r\n              <Copyright />\r\n            </Box>\r\n          </div>\r\n           \r\n        \r\n           \r\n        \r\n        </div>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\CrearPaper.jsx",["342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363"],"import React, { useState, useEffect } from 'react'\r\n\r\nimport { Grid, Typography, makeStyles, Button, TextField, IconButton, CircularProgress, Slider } from '@material-ui/core'\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nimport AddAPhotoIcon from '@material-ui/icons/AddAPhoto';\r\nimport '@react-pdf-viewer/core/lib/styles/index.css';\r\nimport firebase from \"../firebase/firebase\"\r\nimport AutocompletarTres from '../Componetes/AutoCompletarTres'\r\nimport { UsuarioContext } from '../Provedores/UsuarioContext'\r\nimport { useContext } from 'react';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport LinkIcon from '@material-ui/icons/Link';\r\nimport swal from 'sweetalert2'\r\nimport Etiqueta_Tipo from '../Componetes/CardPaper/Etiiqueta_Tipo/Etiqueta_Tipo';\r\nimport Modal_Etiqueta_Tipo from '../Componetes/CardPaper/Etiiqueta_Tipo/Modal_Etiqueta_Tipo';\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    root: {\r\n        \" & .MuiButton-containedPrimary:hover\": {\r\n            backgroundColor: \"#303f9f00\",\r\n            color: \"#5fcccf\",\r\n            border: \"1px solid\"\r\n        },\r\n\r\n        \"& .MuiButton-containedSecondary:hover\": {\r\n            backgroundColor: \"rgb(95 204 207)\",\r\n            color: \"#ffffff\"\r\n        }\r\n\r\n\r\n    },\r\n\r\n    margenArriba: {\r\n\r\n        marginTop: \"100px\"\r\n    },\r\n    estilo_mensaje_informativo: {\r\n\r\n        marginTop: \"100px\",\r\n        color: \"#00000042\"\r\n    },\r\n\r\n    divFoto: {\r\n\r\n        width: \"250px\",\r\n        height: \"250px\",\r\n        border: \"2px dashed #21cbce\",\r\n        display: \"block\",\r\n        margin: \"16px auto\",\r\n        position: \"relative\"\r\n    },\r\n    imgFoto: {\r\n        color: \"#21cbce\",\r\n        position: \"absolute\",\r\n        margin: \"auto\",\r\n        top: \"0\",\r\n        bottom: \"0\",\r\n        left: \"0\",\r\n        right: \"0\",\r\n        fontSize: \"3rem\"\r\n    },\r\n    divPrincipal: {\r\n        margin: \"5px\"\r\n    },\r\n    margenButton: {\r\n\r\n        margin: \"20px 0px\",\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }, margenButtonDos: {\r\n\r\n        margin: \"20px 0px\",\r\n        padding: \"0px\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    },\r\n    divPdf: {\r\n        border: \"1px solid rgba(0, 0, 0, 0.3)\",\r\n        height: \"-webkit-fill-available\",\r\n        margin: \"50px auto\"\r\n    },\r\n    circular: {\r\n        height: \"72px !important\",\r\n        width: \"72px !important\",\r\n        display: \"block\",\r\n        margin: \"auto\"\r\n    },\r\n\r\n    divCircular: {\r\n        marginTop: \"100px\"\r\n\r\n    },\r\n    divImagen: {\r\n\r\n        height: \"160px\",\r\n        width: \"260px\",\r\n        backgroundSize: \"260px auto\",\r\n        position: \"relative\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        border: \"2px dashed #21cbce\",\r\n        backgroundPosition: \"50%\",\r\n        borderRadius: \"0\",\r\n        display: \"block\",\r\n        margin: \"auto\",\r\n        marginTop: \"15px\",\r\n        [theme.breakpoints.down(\"sm\")]: {\r\n            marginTop: \"30px\"\r\n        }\r\n    }\r\n\r\n\r\n\r\n}))\r\n\r\n\r\n\r\nconst CrearPaper = (props) => {\r\n\r\n    const usuario = useContext(UsuarioContext)\r\n    const clases = useStyles()\r\n    const [imagen, setimagen] = useState({ file: null, imagen: null })\r\n    const [etiquetas, setetiquetas] = useState([])\r\n    const [tag, settag] = useState([])\r\n    const [cargando, setcargando] = useState(false)\r\n    const [mensaje_informativo, set_mensaje_informativo] = useState(\"\")\r\n    let [paper, setpaper] = useState({\r\n        imagen: null,\r\n        pdf: null,\r\n        subida: null,\r\n        likes: 0,\r\n        etiquetas: [],\r\n        titulo: \"\",\r\n        resumen: \"\",\r\n        utilidad: 0,\r\n\r\n    })\r\n    const [id, setid] = useState()\r\n    const [errores, seterrores] = useState({\r\n\r\n        titulo: null,\r\n        resumen: null,\r\n        pdf: null,\r\n        utilidad: null\r\n\r\n    })\r\n    const [pdf, setpdf] = useState({ file: null, pdf: null })\r\n    const [link, setLink] = useState()\r\n    // open modal tipo \r\n    const [openModalTipo,setOpenModalTipo]=useState(false)\r\n    // abrir modal tipo \r\n    const handleOpenModalTipo=()=>{\r\n        setOpenModalTipo(true)\r\n    }\r\n    // Cerrar Modal Tipo \r\n    const handleCloseOpenModalTipo=()=>{\r\n        setOpenModalTipo(false)\r\n    }\r\n\r\n    // onChange Utilidad \r\n    const handleChangeUtilidad = (event, newValue) => {\r\n        setpaper({ ...paper, utilidad: newValue })\r\n    }\r\n\r\n    //seleccionar el archivo \r\n    const seleccionarArchivo = imagen => {\r\n\r\n\r\n        const agregarimg = imagen.target.files[0]\r\n        if (agregarimg != undefined) {\r\n            setimagen({\r\n                imagen: agregarimg,\r\n                file: URL.createObjectURL(agregarimg)\r\n            })\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    //seleccionar el pdf \r\n    const seleccionarPdf = pdf => {\r\n        const agregarpdf = pdf.target.files[0]\r\n        if (agregarpdf != undefined) {\r\n\r\n            setpdf({\r\n                pdf: agregarpdf,\r\n                file: URL.createObjectURL(agregarpdf)\r\n            })\r\n\r\n            setLink(null)\r\n        }\r\n    }\r\n\r\n    //manejar snapshot \r\n    function manejarSnapshot(snapshot) {\r\n        const lista = snapshot.docs.map(doc => {\r\n            return {\r\n                id: doc.id,\r\n                ...doc.data()\r\n            }\r\n        })\r\n        setetiquetas(lista)\r\n    }\r\n    //llamar etiquetas\r\n    const llamarEtiquetas = () => {\r\n        firebase.db.collection(\"etiquetas\").orderBy(\"descripcion\").onSnapshot(manejarSnapshot)\r\n    }\r\n    // validaciones \r\n\r\n    // primera validacion de vacio \r\n\r\n\r\n    const validacionuno = () => {\r\n\r\n        let prueba = {}\r\n\r\n        //validar errores \r\n\r\n        if (paper.titulo == \"\") {\r\n            prueba.titulo = \"el titulo es requerido\"\r\n        }\r\n\r\n\r\n        if (paper.resumen == \"\") {\r\n            prueba.resumen = \"el resumen es requerido\"\r\n        }\r\n\r\n\r\n        if (pdf.file == null && link == undefined) {\r\n            prueba.pdf = \" debe subir un archivo .pdf o agregar una URL\"\r\n        }\r\n        if (paper.utilidad == 0) {\r\n            prueba.utilidad = \"debe ser mayor a 0\"\r\n        }\r\n\r\n\r\n        return prueba\r\n\r\n\r\n    }\r\n\r\n\r\n    //nuevo paper \r\n\r\n    const NuevoPaper = async () => {\r\n\r\n\r\n        setcargando(true)\r\n\r\n        set_mensaje_informativo(\"...verificando informacion\")\r\n        let errores = validacionuno()\r\n        seterrores(errores)\r\n\r\n\r\n\r\n        if (Object.keys(errores).length) {\r\n\r\n        } else {\r\n\r\n\r\n\r\n            const respuesta = await IngresarPaper()\r\n\r\n            if (respuesta) {\r\n\r\n\r\n\r\n\r\n                swal.fire({\r\n                    icon: 'success',\r\n                    title: \"Guardado!\",\r\n                    confirmButtonColor: '#21cbce',\r\n\r\n\r\n\r\n\r\n                }).then(() => {\r\n                    props.history.push(\"/\")\r\n                    set_mensaje_informativo(\"\")\r\n\r\n                })\r\n\r\n\r\n\r\n            } else {\r\n                swal.fire({\r\n                    icon: 'Error',\r\n                    title: \"Ha ocurrido un problema!\",\r\n                    text: \"intentalo mas tarde \",\r\n                    timer: 1500\r\n                })\r\n                set_mensaje_informativo(\"\")\r\n\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n        // agregar paper \r\n\r\n\r\n\r\n\r\n\r\n        /*\r\n    \r\n    \r\n          paper.subida=new Date()\r\n        const id = await firebase.db.collection(\"paper\").add(paper).then((docRef) => {\r\n            //console.log(\"Document written with ID: \", docRef.id);\r\n    \r\n            return docRef.id\r\n        })\r\n    \r\n       \r\n    \r\n     \r\n        \r\n    \r\n    \r\n        const pdf =await subirPDF(id)\r\n         const img =await subirImagen(id)\r\n      \r\n     \r\n         \r\n         firebase.db.collection(\"paper\").doc(id).update({\r\n                imagen:img,\r\n                pdf:pdf\r\n    \r\n         })\r\n      \r\n     \r\n        paper=({...paper,\r\n                pdf:pdf,\r\n                imagen:img,\r\n                etiquetas:tag\r\n        })\r\n            // ver los valores de paper \r\n          \r\n    // retornar al inicio \r\n    \r\n    \r\n      \r\n        */\r\n\r\n        setcargando(false)\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    // ingresar paper  despues de las validacion \r\n    const IngresarPaper = async () => {\r\n\r\n\r\n        try {\r\n\r\n\r\n            //fecha\r\n            paper.subida = new Date()\r\n            //titulo para la busqueda \r\n            paper.busqueda = paper.titulo.toLocaleLowerCase()\r\n\r\n\r\n\r\n            //crear paper y retornar el id \r\n            const id = await firebase.db.collection(\"paper\").add(paper).then((docRef) => {\r\n                //console.log(\"Document written with ID: \", docRef.id);\r\n                return docRef.id\r\n            })\r\n\r\n            set_mensaje_informativo(\"...guardando imagen...\")\r\n            const img = await subirImagen(id)\r\n\r\n            set_mensaje_informativo(\"...guardando PDF...\")\r\n            const pdf = await subirPDF(id)\r\n\r\n\r\n            set_mensaje_informativo(\"...creando paper...\")\r\n\r\n\r\n            const tagdos = tag.map(valor => {\r\n\r\n                return { id: valor.id, descripcion: valor.descripcion }\r\n\r\n            })\r\n\r\n\r\n            firebase.db.collection(\"paper\").doc(id).update({\r\n                imagen: img,\r\n                pdf: pdf,\r\n                etiquetas: tagdos,\r\n                id: id,\r\n                link: link\r\n            })\r\n\r\n\r\n\r\n            paper = ({\r\n                ...paper,\r\n                pdf: pdf,\r\n                imagen: img,\r\n                etiquetas: tagdos,\r\n                id: id\r\n            })\r\n\r\n\r\n            let agregarEtiquet = []\r\n\r\n            tag.map(valor => {\r\n\r\n                firebase.db.collection(\"etiquetas\").doc(valor.id).set({\r\n                    ...valor,\r\n                    contar: valor.contar + 1\r\n                })\r\n                firebase.db.collection(\"etiquetas\").doc(valor.id).collection(\"paper\").doc(paper.id).set(paper)\r\n\r\n            })\r\n\r\n            set_mensaje_informativo(\"...Finalizando\")\r\n\r\n\r\n\r\n\r\n\r\n            return true\r\n\r\n        } catch (error) {\r\n\r\n            return false\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    const AddRemovePaperTag = async (tagdos, paperdos, tag) => {\r\n\r\n\r\n        firebase.db.collection(\"etiquetas\").doc(tagdos.id).collection(\"paper\").doc(paperdos.id).set({\r\n            ...paperdos,\r\n            etiquetas: tag\r\n        })\r\n\r\n\r\n        // await firebase.db.collection(\"etiquetas\").where(\"descripcion\", \"==\", tagdos).get().then(valor=>\r\n        //     {\r\n        //     const prueba =valor.docs.map(objeto=>{return{id:objeto.id,...objeto.data()}})    \r\n        //         prueba.map(val1=>{\r\n        //             firebase.db.collection(\"etiquetas\").doc(val1.id).collection(\"paper\").doc(id).set({...paperdos,\r\n        //             etiquetas:tag\r\n        //             })  \r\n\r\n        //         })\r\n        //     }\r\n\r\n        //     )\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    // actualizar paper\r\n\r\n\r\n    const ActualizarPaper = async () => {\r\n\r\n        setcargando(true)\r\n        const imgURL = await subirImagen(id)\r\n        const pdfURL = await subirPDF(id)\r\n        //console.log(paper.etiquetas)\r\n        // etiquetas antiguos \r\n        let etiquetasOld = paper.etiquetas\r\n        let newTag = []\r\n        tag.map(async (tagOld) => {\r\n            etiquetasOld.map(async (tagNew) => {\r\n                if (tagNew != tagOld) {\r\n\r\n                    newTag.push({ ...tagNew, contar: tagNew.contar + 1 })\r\n\r\n                } else {\r\n\r\n                    newTag.push(tagOld)\r\n                }\r\n\r\n\r\n            })\r\n        })\r\n\r\n\r\n\r\n\r\n\r\n\r\n        let paperSuplente = {\r\n            ...paper,\r\n            imagen: imgURL,\r\n            pdf: pdfURL,\r\n            etiquetas: tag,\r\n            link: link,\r\n            busqueda: paper.titulo.toLocaleLowerCase()\r\n        }\r\n\r\n        await firebase.db.collection(\"paper\").doc(id).update(paperSuplente).then(valor => {\r\n\r\n        })\r\n\r\n\r\n\r\n        //borrar papers anteriores  de las etiquetas\r\n\r\n        etiquetasOld.map(async (tagOld) => {\r\n            tag.map(async (tagNew) => {\r\n                if (tagNew.id != tagOld) {\r\n\r\n\r\n                    // se edita dentro de la etiqueta el nuevo paper      \r\n                    await firebase.db.collection(\"etiquetas\").doc(tagNew.id).collection(\"paper\").doc(paper.id).set({\r\n                        ...paper,\r\n                        etiquetas: tag\r\n                    }).then(() => {\r\n\r\n\r\n\r\n                        firebase.db.collection(\"etiquetas\").doc(tagNew.id).set({\r\n                            ...tagOld,\r\n                            contar: tagOld.contar + 1\r\n                        })\r\n\r\n\r\n                    }).catch((error) => {\r\n                        console.log(error)\r\n                    })\r\n\r\n\r\n                    //se borra si esta en tagOld\r\n                    //se borra el paper dentro de la etiqueta\r\n                    await firebase.db.collection(\"etiquetas\").doc(tagOld.id).collection(\"paper\").doc(paper.id).delete().then(() => {\r\n                        //se reduce en una la etiqueta\r\n                        firebase.db.collection(\"etiquetas\").doc(tagOld.id).set({\r\n                            ...tagOld,\r\n                            contar: tagOld.contar - 1\r\n                        })\r\n\r\n\r\n                    }).catch((error) => {\r\n                        console.log(error)\r\n                    })\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n            })\r\n\r\n\r\n\r\n\r\n\r\n            // si no coincide con valor borrar la etiqueta \r\n\r\n\r\n\r\n\r\n            // await firebase.db.collection(\"etiquetas\").where(\"descripcion\", \"==\", tagOld).get().then(valor=>\r\n            //     {\r\n            //         const prueba =valor.docs.map(objeto=>{return{id:objeto.id,...objeto.data()}})    \r\n            //         prueba.map(val1=>{\r\n\r\n            //             firebase.db.collection(\"etiquetas\").doc(val1.id).collection(\"paper\").doc(id).delete().then(()=>\r\n\r\n            //             console.log(\"se borro el registro \")\r\n            //             ).catch((error)=>{\r\n            //                 console.log(error)\r\n            //             })\r\n\r\n            //         })\r\n            //     }\r\n\r\n            //     )\r\n\r\n        }\r\n        )\r\n\r\n        // tengo que agregrar  las etiquetas y borrar las \r\n        //¿que pasa si se repite ??\r\n\r\n        tag.map(async (tagEv) => {\r\n            try {\r\n\r\n                AddRemovePaperTag(tagEv, paperSuplente, tag)\r\n\r\n                // crear y  remover paper de las etiquetas \r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n\r\n\r\n        })\r\n\r\n\r\n\r\n\r\n\r\n        /* agregar fecha\r\n         const img =await subirImagen(id)\r\n    */\r\n        setcargando(false)\r\n        props.history.push(\"/\")\r\n        swal.fire(\r\n            'Confirmado',\r\n            'Registro actualizado',\r\n            'success'\r\n        )\r\n\r\n    }\r\n\r\n\r\n\r\n    // actualizar paper\r\n\r\n    const ActualizarPaperDos = async () => {\r\n        setcargando(true)\r\n\r\n        set_mensaje_informativo(\"...verificando informacion...\")\r\n\r\n        paper.link = link\r\n\r\n        set_mensaje_informativo(\"...actualizando imagen...\")\r\n        const imgURL = await subirImagen(id)\r\n        set_mensaje_informativo(\"...actualizando PDF...\")\r\n        const pdfURL = await subirPDF(id)\r\n        set_mensaje_informativo(\"...actualizando paper...\")\r\n\r\n        let etiquetasOld = []\r\n\r\n        paper.etiquetas.map(valor => {\r\n            etiquetas.map(valordos => {\r\n\r\n\r\n                if (valordos.id == valor.id) {\r\n                    etiquetasOld.push(valordos)\r\n                }\r\n            })\r\n        })\r\n\r\n        console.log(etiquetasOld)\r\n\r\n        let newTag = []\r\n        let deleteTag = []\r\n        // las nuevas etiquetas \r\n\r\n        if (tag.length >= etiquetasOld.length) {\r\n\r\n\r\n            const results = tag.filter(({ id: id1 }) => !etiquetasOld.some(({ id: id2 }) => id2 === id1));\r\n\r\n            newTag = results\r\n\r\n        }\r\n\r\n        if (tag.length <= etiquetasOld.length) {\r\n            const results = etiquetasOld.filter(({ id: id1 }) => !tag.some(({ id: id2 }) => id2 === id1));\r\n            deleteTag = results\r\n\r\n            // etiquetasOld.map(viejo=>{\r\n\r\n            //                         console.log(viejo)\r\n            //                         if(tag.length!=0){\r\n            //                         tag.map(nuevo=>{\r\n            //                             console.log(nuevo)\r\n            //                             if(nuevo.id!=viejo.id){\r\n            //                                 console.log(viejo)\r\n            //                                 deleteTag.push({...viejo,contar:viejo.contar-1})   \r\n\r\n            //                             }\r\n            //                         })}else{\r\n            //                             console.log(\"paso por ac??\")\r\n            //                             deleteTag.push({...viejo,contar:viejo.contar-1})   \r\n\r\n            //                         }\r\n            //             })\r\n\r\n        }\r\n        let tagDefinitivo = tag.map(valor => {\r\n\r\n            return {\r\n                id: valor.id,\r\n                descripcion: valor.descripcion,\r\n            }\r\n        })\r\n\r\n        let paperSuplente = {\r\n            ...paper,\r\n            imagen: imgURL,\r\n            pdf: pdfURL,\r\n            etiquetas: tagDefinitivo,\r\n            busqueda: paper.titulo.toLocaleLowerCase()\r\n        }\r\n\r\n\r\n        deleteTag.map(valor => {\r\n\r\n            firebase.db.collection(\"etiquetas\").doc(valor.id).update({ ...valor, contar: valor.contar - 1 })\r\n            firebase.db.collection(\"etiquetas\").doc(valor.id).collection(\"paper\").doc(paperSuplente.id).delete().then(() => { console.log(\"borrado\") }).catch(error => console.log(error))\r\n\r\n        })\r\n\r\n        newTag.map(valor => {\r\n            firebase.db.collection(\"etiquetas\").doc(valor.id).update({ ...valor, contar: valor.contar + 1 })\r\n            firebase.db.collection(\"etiquetas\").doc(valor.id).collection(\"paper\").doc(paperSuplente.id).set(paperSuplente).then(() => { console.log(\"agregado\") }).catch(error => console.log(error))\r\n\r\n        })\r\n        //  actualizar el paper \r\n        console.log(paperSuplente)\r\n\r\n        firebase.db.collection(\"paper\").doc(paperSuplente.id).update(paperSuplente)\r\n\r\n\r\n        props.history.push(\"/\")\r\n        swal.fire(\r\n            'Confirmado',\r\n            'Registro actualizado',\r\n            'success'\r\n        )\r\n\r\n\r\n        set_mensaje_informativo(\"\")\r\n        setcargando(false)\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    // si no coincide con valor borrar la etiqueta \r\n\r\n\r\n\r\n\r\n    // await firebase.db.collection(\"etiquetas\").where(\"descripcion\", \"==\", tagOld).get().then(valor=>\r\n    //     {\r\n    //         const prueba =valor.docs.map(objeto=>{return{id:objeto.id,...objeto.data()}})    \r\n    //         prueba.map(val1=>{\r\n\r\n    //             firebase.db.collection(\"etiquetas\").doc(val1.id).collection(\"paper\").doc(id).delete().then(()=>\r\n\r\n    //             console.log(\"se borro el registro \")\r\n    //             ).catch((error)=>{\r\n    //                 console.log(error)\r\n    //             })\r\n\r\n    //         })\r\n    //     }\r\n\r\n    //     )\r\n\r\n    // tengo que agregrar  las etiquetas y borrar las \r\n    //¿que pasa si se repite ??\r\n\r\n    // tag.map(async(tagEv)=>{\r\n    //     try {\r\n\r\n    //         AddRemovePaperTag(tagEv,paperSuplente,tag)\r\n\r\n    //                         // crear y  remover paper de las etiquetas \r\n    //        } catch (error) {\r\n    //             console.log(error)\r\n    //             }\r\n\r\n\r\n    // })\r\n\r\n\r\n\r\n\r\n\r\n    /* agregar fecha\r\n     const img =await subirImagen(id)\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // subir imagen \r\n\r\n    const subirImagen = async (id) => {\r\n        // prueba de usuario \r\n\r\n\r\n\r\n\r\n\r\n        // subir  imagen\r\n        if (imagen.imagen !== null) {\r\n\r\n\r\n            if (imagen.imagen instanceof File) {\r\n                const imgRef = await firebase.storage.ref().child(\"IMAGEN\").child(id)\r\n                await imgRef.put(imagen.imagen)\r\n                const imgURL = await imgRef.getDownloadURL()\r\n                return imgURL\r\n            } else {\r\n                return imagen.file\r\n            }\r\n        } else {\r\n            setpaper({ ...paper, imagen: \"\" })\r\n            return null\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const subirPDF = async (id) => {\r\n\r\n\r\n\r\n        // subir  imagen\r\n        if (pdf.pdf !== null) {\r\n\r\n            if (pdf.pdf instanceof File) {\r\n                const pdfRef = firebase.storage.ref().child(\"PDF\").child(id)\r\n                console.log()\r\n                await pdfRef.put(pdf.pdf)\r\n                const pdfURL = await pdfRef.getDownloadURL()\r\n                return pdfURL\r\n            } else {\r\n                return pdf.file\r\n            }\r\n        } else {\r\n\r\n            return null\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const AgregrarLink = async () => {\r\n\r\n        const { value: url } = await swal.fire({\r\n            input: 'url',\r\n            inputLabel: 'URL',\r\n            inputPlaceholder: 'Ingrese direccion URL',\r\n            showConfirmButton: \"true\",\r\n            confirmButtonText: \"Guardar\",\r\n            confirmButtonColor: \"#21cbce\",\r\n            validationMessage: \"URL invalida\",\r\n            denyButtonText: \"Cancelar\",\r\n            showDenyButton: \"true\"\r\n\r\n\r\n        })\r\n\r\n        if (url) {\r\n\r\n\r\n            setLink(url)\r\n            setpdf({ file: null, pdf: null })\r\n            //si existe el id \r\n            console.log(id)\r\n            if (id) {\r\n\r\n\r\n                try {\r\n                    await firebase.storage.ref().child(\"PDF\").child(id).delete().then(function () {\r\n                        //console.log(\"borrado\")\r\n                        // File deleted successfully\r\n                    }).catch(function (error) {\r\n\r\n                        console.log(error)\r\n                        //console.log(error)\r\n                        // Uh-oh, an error occurred!m   \r\n                    });\r\n\r\n                } catch (error) {\r\n                    console.log(error)\r\n                }\r\n                //borrar  pdf\r\n\r\n            }\r\n\r\n\r\n\r\n\r\n            swal.fire({\r\n                icon: 'success',\r\n                title: '¡URL Guardada!',\r\n                showConfirmButton: false,\r\n                timer: 1500\r\n            })\r\n        }\r\n    }\r\n\r\n    const actualizarState = (e) => {\r\n        e.preventDefault()\r\n        setpaper({\r\n            ...paper, [e.target.name]: e.target.value\r\n        })\r\n\r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const { id } = props.match.params\r\n\r\n\r\n        if (usuario == null) {\r\n            props.history.push(\"/\")\r\n\r\n        } else {\r\n\r\n            if (!usuario.administrador) {\r\n                props.history.push(\"/\")\r\n            }\r\n        }\r\n\r\n\r\n\r\n        // validar si editar o borrar\r\n        editorcreate(id)\r\n\r\n        // armar etiquetas\r\n\r\n\r\n\r\n        llamarEtiquetas()\r\n\r\n\r\n\r\n\r\n    }, [errores, usuario])\r\n\r\n    const editorcreate = async (id) => {\r\n\r\n        if (id) {\r\n            setcargando(true)\r\n            setid(id)\r\n            const test = await firebase.db.collection(\"paper\").doc(id).get().then((doc) => {\r\n                console.log(doc)\r\n                if (doc.exists) {\r\n                    console.log(\"Document data:\", doc.data());\r\n                    return doc.data()\r\n                } else {\r\n                    console.log(\"No such document!\");\r\n                }\r\n\r\n            })\r\n            // \r\n\r\n\r\n            setimagen({\r\n                file: test.imagen\r\n\r\n            })\r\n\r\n            setpdf({\r\n                file: test.pdf\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            })\r\n            setLink(test.link)\r\n\r\n\r\n\r\n            settag(test.etiquetas)\r\n\r\n            //   test.etiquetas.map((valor)=>{\r\n\r\n            //      settag(prev=>[...prev,valor.descripcion])\r\n\r\n            //   }) \r\n            await setpaper(test)\r\n            setcargando(false)\r\n\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <div className={clases.root}  >\r\n\r\n\r\n\r\n            <div>\r\n\r\n\r\n\r\n\r\n            </div>\r\n\r\n\r\n            <Grid container>\r\n                <Grid xs={4} sm={2} md={4}>\r\n\r\n                </Grid>\r\n\r\n                <Grid xs={12} sm={8} md={4}>\r\n\r\n\r\n                    {cargando ?\r\n                        <div>\r\n\r\n\r\n\r\n\r\n                            <div className={clases.divCircular} >\r\n                                <CircularProgress className={clases.circular}></CircularProgress>\r\n\r\n                                <Typography className={clases.estilo_mensaje_informativo} align=\"center\" variant=\"h5\">\r\n                                    {mensaje_informativo}\r\n                                </Typography>:\r\n\r\n                            </div>\r\n                        </div> :\r\n                        <div className={clases.divPrincipal}>\r\n\r\n                            {id ?\r\n\r\n                                <Typography className={clases.margenArriba} align=\"center\" variant=\"h3\">\r\n                                    Editar Paper\r\n                                </Typography> :\r\n\r\n                                <Typography className={clases.margenArriba} align=\"center\" variant=\"h3\">\r\n                                    Nuevo Paper\r\n                                </Typography>\r\n\r\n                            }\r\n\r\n\r\n                            <Typography align=\"center\" variant=\"h3\">\r\n                                <div className={clases.divImagen}>\r\n\r\n\r\n\r\n\r\n                                    {imagen.file ?\r\n\r\n                                        <img src={imagen.file} style={{ height: \"100%\", width: \"100%\" }} />\r\n\r\n\r\n                                        // <div   className={clases.divImagen} style={{\r\n                                        //     backgroundImage:`url(${imagen.file})`,\r\n\r\n                                        //   }} >\r\n\r\n\r\n                                        //     </div>\r\n\r\n\r\n                                        :\r\n                                        < AddAPhotoIcon className={clases.imgFoto}></AddAPhotoIcon>\r\n                                    }\r\n\r\n\r\n\r\n\r\n\r\n                                </div>\r\n                                <Typography align=\"center\" >\r\n\r\n                                    <div>\r\n                                        <input\r\n                                            type=\"file\"\r\n                                            id=\"subir\"\r\n                                            accept=\"image/*\"\r\n                                            style={{ display: \"none\" }}\r\n                                            onChange={(e) => seleccionarArchivo(e)}\r\n\r\n                                        >\r\n                                        </input>\r\n                                        <Button variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            className={clases.margenButtonDos}\r\n\r\n                                        >\r\n                                            <label\r\n                                                htmlFor=\"subir\"\r\n                                                style={{ padding: \"6px 36px\" }}\r\n                                            >\r\n                                                agregar imagen\r\n                                            </label>\r\n                                        </Button>\r\n                                    </div>\r\n\r\n                                </Typography>\r\n                            </Typography>\r\n                            <Typography align=\"center\" >\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"titulo\"\r\n                                    label=\"Titulo\"\r\n                                    name=\"titulo\"\r\n                                    autoComplete=\"titulo\"\r\n                                    onChange={actualizarState}\r\n\r\n                                    value={paper.titulo}\r\n\r\n\r\n\r\n\r\n                                />\r\n\r\n\r\n\r\n\r\n                                {errores.titulo ?\r\n\r\n                                    <Alert\r\n\r\n                                        action={\r\n                                            <IconButton\r\n                                                aria-label=\"close\"\r\n                                                color=\"inherit\"\r\n                                                size=\"small\"\r\n                                                onClick={() => {\r\n                                                    seterrores({\r\n                                                        ...errores, titulo: null\r\n                                                    })\r\n                                                }}\r\n                                            >\r\n                                                <CloseIcon></CloseIcon>\r\n\r\n                                            </IconButton>\r\n                                        }\r\n\r\n                                        severity=\"error\">{errores.titulo}</Alert>\r\n\r\n                                    :\r\n\r\n                                    <div></div>\r\n\r\n                                }\r\n\r\n\r\n\r\n\r\n                            </Typography>\r\n                            <Typography align=\"center\" >\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"resumen\"\r\n                                    label=\"Resumen\"\r\n                                    name=\"resumen\"\r\n                                    multiline\r\n                                    rowsMax={4}\r\n                                    autoComplete=\"resumenrafce\"\r\n                                    onChange={actualizarState}\r\n\r\n                                    value={paper.resumen}\r\n\r\n                                />\r\n\r\n                            </Typography>\r\n\r\n                            <Typography align=\"center\" >\r\n\r\n\r\n                                {errores.resumen ?\r\n\r\n                                    <Alert\r\n                                        action={\r\n                                            <IconButton\r\n                                                aria-label=\"close\"\r\n                                                color=\"inherit\"\r\n                                                size=\"small\"\r\n                                                onClick={() => {\r\n                                                    seterrores({\r\n                                                        ...errores, resumen: null\r\n                                                    })\r\n                                                }}\r\n                                            >\r\n                                                <CloseIcon></CloseIcon>\r\n\r\n                                            </IconButton>\r\n                                        }\r\n\r\n                                        severity=\"error\">{errores.resumen}</Alert>\r\n\r\n                                    :\r\n\r\n                                    <div></div>\r\n\r\n                                }\r\n\r\n\r\n                            </Typography>\r\n\r\n\r\n\r\n                            <Typography align=\"left\" style={{ marginTop: \"10px\" }} >\r\n                                <Typography gutterBottom>\r\n                                    Utilidad: <span> {paper.utilidad}</span>\r\n                                </Typography>\r\n                                <Slider\r\n                                    value={paper.utilidad}\r\n                                    step={0.1}\r\n                                    marks\r\n                                    min={0}\r\n                                    max={10}\r\n                                    onChange={handleChangeUtilidad}\r\n                                />\r\n                            </Typography>\r\n                            {errores.utilidad &&\r\n                                <Alert\r\n                                    action={\r\n                                        <IconButton\r\n                                            aria-label=\"close\"\r\n                                            color=\"inherit\"\r\n                                            size=\"small\"\r\n                                            onClick={() => {\r\n                                                seterrores({\r\n                                                    ...errores, utilidad: null\r\n                                                })\r\n                                            }}\r\n                                        >\r\n                                            <CloseIcon></CloseIcon>\r\n\r\n                                        </IconButton>\r\n                                    }\r\n\r\n                                    severity=\"error\">{errores.utilidad}</Alert>\r\n                            }\r\n\r\n\r\n\r\n                            <Typography align=\"center\" >\r\n\r\n                                <AutocompletarTres etiquetas={etiquetas} tag={tag} settag={settag}  llamarEtiquetasDos={llamarEtiquetas}\r\n\r\n                                ></AutocompletarTres>\r\n\r\n                            </Typography>\r\n\r\n\r\n                            <Typography align=\"center\" >\r\n                                <Etiqueta_Tipo\r\n                                    handleOpenModalTipo={handleOpenModalTipo}\r\n                                />               \r\n                                <Modal_Etiqueta_Tipo\r\n                                    openModalTipo={openModalTipo}\r\n                                    handleCloseOpenModalTipo={handleCloseOpenModalTipo}\r\n                                />                \r\n                            </Typography>\r\n\r\n\r\n\r\n\r\n                            {id ?\r\n                                <Typography align=\"center\" >\r\n                                    <Button\r\n                                        color=\"secondary\"\r\n                                        variant=\"contained\"\r\n                                        style={{}}\r\n                                        endIcon={<AddIcon></AddIcon>}\r\n                                        onClick={() => ActualizarPaperDos()}\r\n                                    >\r\n\r\n                                        Actualizar Paper\r\n                                    </Button>\r\n\r\n                                </Typography>\r\n                                :\r\n\r\n\r\n                                <Typography align=\"center\" >\r\n                                    <Button\r\n                                        color=\"secondary\"\r\n                                        variant=\"contained\"\r\n                                        className={clases.margenButton}\r\n                                        endIcon={<AddIcon></AddIcon>}\r\n                                        onClick={() => NuevoPaper()}\r\n                                    >\r\n\r\n                                        Agregar Paper\r\n                                    </Button>\r\n\r\n                                </Typography>\r\n\r\n                            }\r\n\r\n                            <Typography align=\"center\" >\r\n\r\n                                <div>\r\n                                    <input\r\n                                        type=\"file\"\r\n                                        id=\"pdf\"\r\n                                        accept=\".pdf\"\r\n                                        style={{ display: \"none\" }}\r\n                                        onChange={(e) => seleccionarPdf(e)}\r\n                                    >\r\n                                    </input>\r\n                                    <Button variant=\"contained\"\r\n                                        color=\"primary\"\r\n\r\n                                        className={clases.margenButtonDos}\r\n\r\n                                    >\r\n                                        <label\r\n                                            style={{ padding: \"6px 36px\" }}\r\n                                            htmlFor=\"pdf\"\r\n                                        >\r\n                                            agregar PDF\r\n\r\n                                        </label>\r\n                                    </Button>\r\n\r\n                                    <IconButton color=\"primary\" aria-label=\"agregrar link\"\r\n                                        onClick={() => {\r\n\r\n                                            AgregrarLink()\r\n                                        }}\r\n                                    >\r\n                                        <LinkIcon />\r\n                                    </IconButton>\r\n                                </div>\r\n\r\n\r\n                                {errores.pdf ?\r\n\r\n                                    <Alert\r\n\r\n\r\n                                        action={\r\n                                            <IconButton\r\n                                                aria-label=\"close\"\r\n                                                color=\"inherit\"\r\n                                                size=\"small\"\r\n                                                onClick={() => {\r\n                                                    seterrores({\r\n                                                        ...errores, pdf: null\r\n                                                    })\r\n                                                }}\r\n                                            >\r\n                                                <CloseIcon></CloseIcon>\r\n\r\n                                            </IconButton>\r\n                                        }\r\n\r\n                                        severity=\"error\">{errores.pdf}</Alert>\r\n\r\n                                    :\r\n\r\n                                    <div></div>\r\n\r\n                                }\r\n\r\n\r\n\r\n\r\n                            </Typography>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                            <Typography align=\"center\" >\r\n                                {\r\n\r\n                                    pdf.file &&\r\n\r\n                                    <div style={{ height: '750px' }}>\r\n                                        <div\r\n                                            style={{\r\n                                                border: '1px solid rgba(0, 0, 0, 0.3)',\r\n                                                height: '100%',\r\n                                                margin: \"50px auto\"\r\n                                            }}\r\n                                        >\r\n\r\n                                            <iframe style={{ height: \"100%\", width: \"100%\", }} src={pdf.file}></iframe>\r\n                                        </div>\r\n\r\n                                    </div>\r\n\r\n\r\n                                }\r\n\r\n                            </Typography>\r\n\r\n                            {link &&\r\n                                <div>\r\n                                    <a target=\"_blank\" href={link}>\r\n                                        <Typography variant=\"subtitle1\" align=\"center\" >\r\n\r\n                                            {link}\r\n                                        </Typography>\r\n                                    </a>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    }\r\n                </Grid>\r\n                <Grid xs={4} sm={2} md={4}>\r\n\r\n\r\n\r\n                </Grid>\r\n\r\n            </Grid>\r\n\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CrearPaper\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\AdmEtiquetas.jsx",[],"C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\Etiquetascuatro.jsx",["364","365","366","367","368","369","370","371"],"import React, { useEffect,useState ,useContext} from 'react'\r\nimport Firebase from '../firebase/firebase'\r\nimport { Typography,makeStyles,Grid,CircularProgress,Button } from '@material-ui/core'\r\nimport Paper from \"../Componetes/Paper\"\r\nimport EtiquetasIcon from '@material-ui/icons/LocalOffer';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Paperdos from \"../Componetes/Papertres\"\r\nimport { UsuarioContext } from '../Provedores/UsuarioContext';\r\nimport {actualizarPaper,ActualizarPaperEnEtiquetas} from '../Funciones/PaperDoc'\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Pajaro from '../../src/pajaro.svg'\r\n\r\n\r\n\r\n\r\nconst estilos=makeStyles((theme)=>({\r\n    \r\n    root:{\r\n\r\n        \" & .MuiButton-containedPrimary:hover\" :{\r\n            backgroundColor: \"#303f9f00\",\r\n            color:\"#5fcccf\",\r\n            border:\"1px solid\"\r\n        },\r\n\r\n\r\n        \"& .botonEtiqueta\":{\r\n            background:\"#ffffff\",\r\n            color:\"#212121 !important\",\r\n            marginTop:\"10px\",\r\n            fontSize:\"27px\",\r\n            fontFamily:\"nunito\",\r\n            \"&:hover\": {\r\n                background:\"#36cbce\",\r\n                color:\"#ffffff!important\",\r\n             },\r\n        \r\n        },\r\n        \"& .botonEtiqueta .MuiSvgIcon-root\":{\r\n            color:\"#36cbce\"\r\n        },\r\n        \r\n        \"& .botonEtiqueta:hover .MuiSvgIcon-root\":{\r\n            color:\"#ffffff\"\r\n        },\r\n    },\r\n    \r\n    texto:{\r\n        fontFamily:\"nunito\",\r\n        fontWeight:\"300\",\r\n    \r\n\r\n\r\n    },textoDos:{\r\n        fontFamily:\"nunito\",\r\n        fontWeight:\"300\",\r\n        textTransform:\"uppercase\"\r\n\r\n\r\n    },\r\n    divTag:{\r\n\r\n        padding:\"50px 0px\"\r\n    },\r\n    divEtiqueta:{\r\n\r\n        margin:\"29px auto\",\r\n        width:\"75vw\"\r\n\r\n    },\r\n    divReg:{\r\n\r\n        margin:\"45px auto\",\r\n        width:\"75vw\"\r\n\r\n    },\r\n    divCircular:{\r\n        marginTop:\"50px\",\r\n        marginBottom:\"129px\"\r\n\r\n    },\r\n    circular:{\r\n        height:\"72px !important\",\r\n        width:\"72px !important\",\r\n        display:\"block\",\r\n        margin:\"auto\"\r\n        }\r\n\r\n        ,textNoDisponible:{\r\n\r\n\r\n            fontFamily:\"Nunito\",\r\n            color:\"#808080\"\r\n        } }\r\n))\r\n\r\n\r\n\r\nconst Etiquetas = (props) => {\r\n \r\nconst clases=estilos()    \r\nconst history=useHistory()\r\n\r\nconst usuario =useContext(UsuarioContext)\r\n//state etiquet \r\nconst [etiquet, setetiquet] = useState([])\r\n// guardar el valor \r\nconst [elvalor, setelvalor] = useState()\r\n// state etiquet para pedir mas \r\nconst [etiquetarray, setetiquetarray] = useState([])\r\nconst [etiquetas, setetiquetas] = useState([])\r\nconst [pedirmas, setpedirmas] = useState(false)\r\nconst [paper, setpaper] = useState([])\r\nconst [cargando, setcargando] = useState(false)\r\nconst [cargandodos, setcargandodos] = useState(false)\r\nconst [esconderboton, setesconderboton] = useState(false)\r\n\r\nconst [changeLike, setChangeLike] = useState({\r\n    cambio:false,\r\n    idEtiqueta:null,\r\n    paper:null\r\n\r\n\r\n})\r\nconst recientes=props.recientes\r\nconst valorados=props.valorados\r\n//  crear nuevo state para el  el nuevo arreglo \r\nconst [paperArray, setpaperArray] = useState([])\r\nconst [ultimo, setultimo] = useState(0)\r\nconst {id} =props.match.params\r\n\r\n\r\nconst limite=5\r\n// buscar etiquetas \r\nconst buscaretiquetas=async()=>{\r\n setcargando(true)   \r\n \r\n  const lista  =await Firebase.db.collection(\"etiquetas\").get()\r\n\r\n  const listados = await Promise.all(lista.docs.map(async(doc)=>{\r\n            //console.log(doc.data())\r\n            // etiqueta \r\n             let etiqueta= {id:doc.id,\r\n                 ...doc.data()}\r\n            console.log(etiqueta)  \r\n            //mapear etiqueta \r\n             let listatres=[] \r\n             \r\n                    if (valorados){\r\n                        listatres=await Firebase.db.collection(\"etiquetas\").doc(etiqueta.id).collection(\"paper\").orderBy(\"likes\",\"desc\").limit(2).get()\r\n                    }else{\r\n\r\n                                if(recientes){\r\n                                    listatres=await Firebase.db.collection(\"etiquetas\").doc(etiqueta.id).collection(\"paper\").orderBy(\"subida\",\"desc\").limit(2).get()\r\n\r\n\r\n                                }else{\r\n\r\n                                    listatres=await Firebase.db.collection(\"etiquetas\").doc(etiqueta.id).collection(\"paper\").limit(2).get()\r\n                                } \r\n                    }\r\n\r\n             \r\n             const listacuatro= listatres.docs.map(doc=>{\r\n                    return {\r\n                        id:doc.id,\r\n                        ...doc.data()\r\n                    }  \r\n             }\r\n             )       \r\n             console.log(listacuatro)\r\n             return{\r\n                etiquetas:etiqueta,\r\n                paper:listacuatro\r\n\r\n            }\r\n                // return {\r\n                //     id:doc.id,\r\n                //     ...doc.data()\r\n                // }\r\n            }))  \r\n                         \r\n  console.log(listados)        \r\n  setpaperArray(listados)  \r\n  setcargando(false)\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nconst megusta=(valor)=>{\r\n\r\n    \r\n        megustacuatro(valor)\r\n\r\n\r\n}\r\n\r\n\r\n\r\n// Éste va a ser el me gusta sin validar usuario\r\nconst megustaSinValidarUsuario=(paperNuevo)=>{\r\n\r\n    // recorrer arreglo en donde esta etiqueta y paper 'paperArray'\r\n    //crear nueva constante del paper\r\n    const nuevoPaperArray=paperArray.map(paperMap=>{\r\n\r\n                    //recorrer solo arreglo paper \r\n                    //paperMap = paper[]\r\n                    console.log(paperArray)\r\n                     let paper=paperMap.paper.map((paperNew)=>{\r\n                                //validar que los paper coincidan \r\n                                if(paperNew.id==paperNuevo.id){\r\n                                    console.log(paperMap.etiquetas.id)\r\n\r\n                                        //\r\n\r\n                                    return paperNuevo\r\n                                } else{\r\n                                    return paperNew\r\n                                }       \r\n                        })                \r\n                // crear nuevo objeto con  la etiqueta y el paper \r\n                let nuevoObjeto={\r\n                    etiquetas:paperMap.etiquetas,\r\n                    paper:paper   \r\n                }\r\n                //retornar objeto  \r\n                return nuevoObjeto\r\n    })\r\n// insertar  paperArray\r\n  setpaperArray(nuevoPaperArray)\r\n\r\n    \r\n}\r\n\r\n\r\n\r\n\r\nconst megustacuatro=async(valor)=>{ \r\n    setcargando(true)\r\n    if(usuario==null) {\r\n            return history.push(\"/login\")\r\n    }\r\n    // prueba de las funciones \r\n    //const valorRenovado=  await RetornarPaper(valor.id)\r\n    //valor=valorRenovado\r\n    if(valor.haVotado==undefined){                    \r\n            var antiguoHaVotado=[]\r\n    }else{\r\n            var antiguoHaVotado=valor.haVotado\r\n    }                      \r\n    // nuevo paper \r\n    let newPaper={}\r\n    let nuevaLista=[]\r\n    if(antiguoHaVotado.includes(usuario.uid)){ \r\n            antiguoHaVotado=antiguoHaVotado.filter(function(obj){\r\n                    return obj!==usuario.uid\r\n            })\r\n            let megusta=valor.likes-1 \r\n             newPaper={\r\n                    ...valor,\r\n                     likes:megusta,\r\n                    haVotado:antiguoHaVotado\r\n            }\r\n             //listaPaperdos(newPaper,megusta,antiguoHaVotado)\r\n            //await firebase.db.collection(\"paper\").doc(valor.id).update(nuevoPaper)\r\n            //RenovarPaperMapEtiqueta(nuevoPaper)\r\n            // \r\n            nuevaLista= megustacinco(newPaper,megusta,antiguoHaVotado)\r\n    console.log(newPaper)\r\n }else{ \r\n    \r\n const nuevoHaVotado = [...antiguoHaVotado, usuario.uid];\r\n console.log(nuevoHaVotado)\r\n let megusta=valor.likes+1   \r\n newPaper={\r\n    ...valor,\r\n     likes:megusta,\r\n    haVotado:nuevoHaVotado\r\n}\r\nnuevaLista=megustacinco(newPaper,megusta,nuevoHaVotado)\r\nconsole.log(newPaper,megusta,nuevoHaVotado)\r\n\r\n}\r\n\r\nconsole.log(nuevaLista)\r\nsetetiquetarray(nuevaLista)\r\nsetcargando(false)\r\n actualizarPaper(newPaper)\r\n ActualizarPaperEnEtiquetas(newPaper)\r\n// buscaretiquetas()\r\n// props.setChangeLike({\r\n//         cambio:true,\r\n//         idEtiqueta:props.id,\r\n//         paper:newPaper\r\n//     })\r\n\r\n\r\n         \r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\nconst  megustacinco=(valor,megusta,nuevosvotos)=>{\r\n\r\n\r\n  const nuevaLista =etiquetarray.map(doc=>{\r\n                                if(valor.id==doc.id){  \r\n                                    return {\r\n                                        ...valor,\r\n                                        likes:megusta,\r\n                                        haVotado:nuevosvotos       \r\n                                    }\r\n                            }else{\r\n                                return{...doc}\r\n                            }\r\n                    })\r\n\r\n\r\n  return nuevaLista\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nconst listaconid=async(valor,ruta)=>{\r\n\r\n   \r\n    // guardar la etiqueta que se esta buscando \r\n    setetiquetas(valor)\r\n    // ¿sera necesario ?\r\n      setpedirmas(true)\r\n\r\n    //esconder el button \r\n    setesconderboton(false) \r\n          \r\n\r\n\r\n            if(recientes){\r\n                var consulta = await Firebase.db.collection(\"etiquetas\").doc(valor).collection(\"paper\").orderBy(\"subida\",\"desc\").limit(limite).get()\r\n\r\n\r\n            }else{\r\n\r\n                if(valorados){\r\n\r\n                    var consulta = await Firebase.db.collection(\"etiquetas\").doc(valor).collection(\"paper\").orderBy(\"likes\",\"desc\").limit(limite).get()\r\n\r\n                }else{\r\n                    var consulta = await Firebase.db.collection(\"etiquetas\").doc(valor).collection(\"paper\").orderBy(\"id\",\"desc\").limit(limite).get()\r\n\r\n                }\r\n\r\n            }\r\n\r\n\r\n\r\n    var consult=consulta.docs.map(doc=>{\r\n \r\n         return {\r\n \r\n             id:doc.id,\r\n             ...doc.data(),\r\n             click:false\r\n         }\r\n \r\n    \r\n     })\r\n     // guardar en el state la etiqueta \r\n     setetiquetarray(consult)\r\n     if(consult.length){\r\n        let nuevoultimo=consult[consult.length-1].id\r\n                 console.log(nuevoultimo)\r\n                if(nuevoultimo!=undefined){\r\n                    setultimo(consult[consult.length-1].id)\r\n                    \r\n                }\r\n\r\n    }\r\n     \r\n\r\n// console.log(consult)\r\n\r\n\r\n\r\n\r\n// armar el objeto \r\n\r\nsetcargando(false)\r\n\r\n//  if(recientes){\r\n//          alert(\"prueba\")\r\n//         var consult =  armarconsultrecientes(consult)\r\n// }\r\n// if(valorados){\r\n\r\n     \r\n    //     var consult =  armarconsultvalorados(consult)\r\n    // }\r\n\r\n\r\n    //      var res={\r\n    //         tag:valor,\r\n    //         lista:consult,\r\n    //         cantidad:consult.length\r\n    //      }\r\n        \r\n    //      setpaper([res])\r\n        \r\n    //      setcargando(false)\r\n            \r\n\r\n    }\r\n\r\n\r\n\r\n\r\n const listardesdeelultimo=async()=>{\r\n  \r\n    setcargandodos(true)\r\n\r\n\r\n    if (recientes){\r\n        \r\n        var consulta = await Firebase.db.collection(\"etiquetas\").doc(etiquet.id).collection(\"paper\").orderBy(\"subida\",\"desc\").limit(limite).get()\r\n\r\n        var consulta = await Firebase.db.collection(\"etiquetas\").doc(etiquet.id).collection(\"paper\").doc(ultimo).get().then(async doc=>{          \r\n            let nuevaLista=[]\r\n             let nuevaListados=await Firebase.db.collection(\"etiquetas\").doc(etiquet.id).collection(\"paper\").orderBy(\"subida\",\"desc\").startAfter(doc).limit(1).get()\r\n             return nuevaListados\r\n    \r\n            })\r\n\r\n    }else{\r\n\r\n            if(valorados){\r\n               \r\n                //var consulta = await Firebase.db.collection(\"etiquetas\").doc(etiquet.id).collection(\"paper\").orderBy(\"likes\",\"desc\").startAfter(ultimo).limit(1).get()\r\n                \r\n                var consulta = await Firebase.db.collection(\"etiquetas\").doc(etiquet.id).collection(\"paper\").doc(ultimo).get().then(async doc=>{\r\n                        \r\n                        let nuevaLista=[]\r\n                         let nuevaListados=await Firebase.db.collection(\"etiquetas\").doc(etiquet.id).collection(\"paper\").orderBy(\"likes\",\"desc\").startAfter(doc).limit(1).get()\r\n                         return nuevaListados\r\n                \r\n                        })\r\n\r\n               \r\n            }else{\r\n              \r\n                var consulta = await Firebase.db.collection(\"etiquetas\").doc(etiquet.id).collection(\"paper\").doc(ultimo).get().then(async doc=>{\r\n                        \r\n                    let nuevaLista=[]\r\n                     let nuevaListados=await Firebase.db.collection(\"etiquetas\").doc(etiquet.id).collection(\"paper\").orderBy(\"id\",\"desc\").startAfter(doc).limit(1).get()\r\n                     return nuevaListados\r\n            \r\n                    })\r\n            }\r\n\r\n    }\r\n    var consult=consulta.docs.map(doc=>{\r\n \r\n        return {\r\n\r\n            id:doc.id,\r\n            ...doc.data()\r\n        }\r\n\r\n   \r\n    }) \r\n    console.log(consult)   \r\n    setetiquetarray((viejo)=>[...viejo,...consult])\r\n    if(consult.length){\r\n        let nuevoultimo=consult[consult.length-1].id\r\n        setultimo(nuevoultimo)\r\n\r\n\r\n    }\r\n    \r\n    if(etiquet.contar==etiquetarray.length+consult.length){\r\n    setesconderboton(true)\r\n    }else{\r\n        setesconderboton(false)\r\n    }\r\n\r\n\r\n    console.log(cargandodos)\r\n   setcargandodos(false)\r\n } \r\n\r\n\r\n    \r\n    useEffect(async() => {\r\n        \r\n        setcargando(true)\r\n        setcargandodos(false)\r\n       \r\n        const {valor}=props.match.params\r\n      \r\n         //  guardar en un state en una etiqueta \r\n\r\n            const etiquet = await Firebase.db.collection(\"etiquetas\").doc(valor).get().then((doc)=>{\r\n                // console.log(doc.id)\r\n                // console.log(doc.data())\r\n                        return{\r\n                            id:doc.id,\r\n                            ...doc.data(),\r\n                            click:false\r\n\r\n                        }\r\n\r\n                    })\r\n\r\n      \r\n            setetiquet(etiquet)\r\n            listaconid(valor,false)\r\n    \r\n\r\n    }, [props,id])\r\n\r\n\r\n        return (\r\n\r\n\r\n\r\n        \r\n            <div className={clases.root} style={{marginTop:\"88px\"}} >\r\n        \r\n\r\n\r\n                {\r\n                    !cargando?\r\n                  \r\n                        \r\n                                  \r\n                                        \r\n                                    <div>\r\n                                        <div id=\"etiqueta\" className={clases.divEtiqueta} >\r\n\r\n                                        <Grid container>\r\n                                                <Grid xs={1}>\r\n                                                        \r\n                                                            <img height=\"100\" src={Pajaro}></img>\r\n                                                       \r\n                                                </Grid>\r\n                                                <Grid xs={11}>\r\n                                                <div className={clases.divEtiqueta}>\r\n                                                        <Typography   className={clases.textoDos} variant=\"h4\" align=\"left\">\r\n                                                              {etiquet.descripcion}\r\n\r\n\r\n                                                        </Typography> \r\n                                                 </div>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                                \r\n                                        </div>     \r\n                                        <div>\r\n                                                   \r\n                                                        \r\n                                                        {etiquetarray.length!=[]?\r\n\r\n                                                        <div>  \r\n                                                            {  \r\n                                                        etiquetarray.map(doc=>(\r\n                                                                <div>\r\n                                                                    <Paperdos   paper={doc}  buscaretiquetas={buscaretiquetas}   length={etiquetarray.length}   changeLike={changeLike} setChangeLike={setChangeLike}   megusta={megusta} cambiarLike={megustaSinValidarUsuario}  ></Paperdos>\r\n                                                                            \r\n                                                                \r\n                                                                \r\n                                                                </div>   \r\n                                                    \r\n                                                                ))}\r\n\r\n                                                \r\n                                        \r\n                                                \r\n\r\n                                                      \r\n                                                        { cargandodos==true?\r\n\r\n                                                                    <div>\r\n                                                                    <div className={clases.divCircular} >\r\n                                                                            <CircularProgress className={clases.circular}></CircularProgress>\r\n                                                                        </div>\r\n                                                                    </div>\r\n\r\n                                                                    :\r\n\r\n                                                                    <Typography align=\"center\">\r\n                                                                          { esconderboton==false&&      <Button \r\n                                                                                        endIcon={<ExpandMoreIcon></ExpandMoreIcon>}\r\n                                                                                        variant =\"contained\"\r\n                                                                                        className=\"botonVerMas\"\r\n                                                                        \r\n                                                                                \r\n                                                                                onClick={()=>{\r\n                                                                                    listardesdeelultimo()\r\n                                                                                }} >\r\n                                                                                see more\r\n                                                                            </Button> }\r\n                                                            </Typography>                 \r\n        \r\n                                                         }       \r\n                                                        \r\n                                                   \r\n                                        \r\n                                             </div>     \r\n                                            \r\n                   \r\n                                                            \r\n                                      :  \r\n                                                    <div>\r\n                                                        <Typography align=\"center\" variant=\"h5\" style={{color:'#808080'}}>\r\n\r\n                                                                  Environmental topics does not contain information\r\n\r\n                                                        </Typography>\r\n\r\n                                                          \r\n                                                    </div>  }\r\n                                    </div>  \r\n                                    </div>  \r\n                                     :<div>\r\n                                           <div className={clases.divCircular} >\r\n                                                                    <CircularProgress className={clases.circular}></CircularProgress>\r\n                                                  </div>\r\n                                     </div>\r\n                                    }\r\n\r\n                        </div>\r\n\r\n\r\n                  \r\n            \r\n        \r\n    )\r\n}\r\n\r\n\r\nexport default Etiquetas\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Provedores\\useAutenticado.jsx",[],"C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\Navegador\\appbar.jsx",["372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391","392"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { makeStyles, fade } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport { Hidden, Icon, Grid, Link } from '@material-ui/core'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu'\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { UsuarioContext } from '../../Provedores/UsuarioContext';\r\nimport Firebase from \"../../firebase/firebase\"\r\nimport BookIcon from '@material-ui/icons/Book';\r\nimport { useHistory } from 'react-router-dom'\r\nimport { useRef } from 'react';\r\n// import Icono from \"../../pajaro.svg\"\r\nimport Icono from \"../../planet_colab2.png\"\r\n\r\nimport { withRouter } from \"react-router\";\r\nimport Swal from \"sweetalert2\"\r\nimport FuncionesFirebase from '../../Funciones/FuncionesFirebase';\r\nimport PublicIcon from '@material-ui/icons/Public';\r\nimport Dialogo from './Dialogo';\r\nimport red from '@material-ui/core/colors/red';\r\n\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n\r\n    \"& .botonCollaborate\": {\r\n      color: \"#ffffff\",\r\n      background: theme.palette.error.main + \" !important\",\r\n      fontSize: '12px',\r\n      marginLeft: '5px',\r\n\r\n      \"&:hover\": {\r\n        color: \"#ffffff\",\r\n      },\r\n\r\n\r\n    },\r\n\r\n    \"& .MuiTypography-body1\": {\r\n      fontFamily: \"Nunito\",\r\n      fontWeight: \"800\"\r\n\r\n    },\r\n    \"& .MuiTypography-subtitle1\": {\r\n      fontFamily: \"Nunito\",\r\n      fontWeight: \"800\"\r\n    },\r\n\r\n\r\n    \"& .swal2-textarea\": {\r\n      fontFamily: \"Nunito !important\",\r\n      color: \"#21cbce\",\r\n    },\r\n\r\n\r\n    \"& .MuiButton-outlinedPrimary\": {\r\n      color: \"#4a9341\",\r\n      border: \"1px solid #4a9341\",\r\n      margin: \"0px 15px\"\r\n    },\r\n\r\n    \"& .MuiLink-underlineHover:hover\": {\r\n      textDecoration: \"none\"\r\n    },\r\n\r\n    \" & .MuiButton-containedPrimary:hover\": {\r\n      backgroundColor: \"#303f9f00\",\r\n      color: \"#5fcccf\",\r\n      border: \"1px solid\"\r\n    },\r\n    \"& .MuiInput-underline\": {\r\n      borderBottom: \"none !important\"\r\n    },\r\n    \"& #prueba .MuiSvgIcon-root\": {\r\n      color: \"#000000\"\r\n    },\r\n    \"& .cajaMenu\": {\r\n      padding: \"59px 0px 0px\",\r\n      height: \"200px\",\r\n      background: \"#21cbce\"\r\n    },\r\n    \"& .cajaMenuDos\": {\r\n      padding: \"59px 0px 0px\",\r\n      height: \"0px\",\r\n      background: \"#21cbce\"\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n\r\n\r\n\r\n  title: {\r\n    display: 'none',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'block',\r\n    },\r\n  },\r\n\r\n  search: {\r\n    position: 'relative',\r\n    background: \"#cfcfcf3d\",\r\n    border: \"1px solid #ccc\",\r\n    borderRadius: \"22px\",\r\n    height:\"45px\",\r\n    [theme.breakpoints.down(\"md\")]: {\r\n\r\n      padding: \"10px 0px 10px 0px\",\r\n      border: \"1px solid #ccc\",\r\n\r\n\r\n    }\r\n\r\n\r\n  },\r\n\r\n  searchIcon: {\r\n    padding: theme.spacing(0, 2),\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n\r\n\r\n  inputRoot: {\r\n    color: 'primary',\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    // vertical padding + font size from searchIcon\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('md')]: {\r\n      width: '20ch',\r\n    },\r\n  },\r\n\r\n\r\n  linkclass: {\r\n    cursor: \"pointer\",\r\n    padding: \"5px 10px 5px 10px\",\r\n    '&:hover': {\r\n      padding: \"5px 10px 5px 10px\",\r\n      background: \"#43434329\",\r\n      borderRadius: \"25px\"\r\n\r\n    }\r\n    ,\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      padding: \"unset\"\r\n    },\r\n\r\n\r\n  },\r\n\r\n\r\n  linkclassnohover: {\r\n    cursor: \"pointer\",\r\n    padding: \"5px 25px 5px 25px\",\r\n\r\n\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      padding: \"unset\"\r\n    },\r\n\r\n\r\n  },\r\n\r\n  linkclassdos: {\r\n    cursor: \"pointer\",\r\n    padding: \"5px 25px 5px 25px\",\r\n    background: \"#43434329\",\r\n    borderRadius: \"25px\"\r\n\r\n\r\n  },\r\n  estiloIcono: {\r\n    height: \"45px\",\r\n    padding: \"0px 0px 0px\"\r\n\r\n  },\r\n  divlista: {\r\n\r\n    position: \"absolute\",\r\n    left: \"0\",\r\n    right: \"0\",\r\n    zIndex: \"1\",\r\n    margin: \"auto\",\r\n    borderWidth: \"1px 1px 1px 1px\",\r\n    borderStyle: \"solid\",\r\n    borderColor: \"#e0e0e0\",\r\n    backgroundColor: \"white\",\r\n    /* right: 6px; */\r\n    top: \"50px\",\r\n    width: \"500px\",\r\n\r\n    //left: 24px;\r\n\r\n\r\n\r\n    [theme.breakpoints.down(\"md\")]: {\r\n      width: \"93vw\",\r\n      top: \"71px\",\r\n\r\n    },\r\n\r\n\r\n\r\n\r\n\r\n  },\r\n  resumen: {\r\n\r\n    fontFamily: \"nunito\",\r\n    margin: \"15px auto\",\r\n    color: \"#000000DE\",\r\n    lineHeight: \"2\"\r\n  },\r\n  icono: {\r\n    display: \"block\",\r\n    margin: \"15px auto\"\r\n  },\r\n  botonOpciones: {\r\n    padding: \"18px 8px\",\r\n    justifyContent: \"left\",\r\n    width: \"100%\"\r\n\r\n  },\r\n  cajaMenu: {\r\n    padding: \"2px 5px 0px 5px\",\r\n    height: \"453px\",\r\n    transition: \"height 0.25s ease-in\",\r\n    overflow: \"hidden\",\r\n  },\r\n  cajaMenuTres: {\r\n    padding: \"2px 5px 0px 5px\",\r\n    height: \"350px\",\r\n    transition: \"height 0.25s ease-in\",\r\n\r\n  },\r\n  cajaMenuDos: {\r\n    padding: \"2px 0px 0px\",\r\n    height: \"0px\",\r\n\r\n    overflow: \"hidden\",\r\n    transition: \"height 0.25s  ease-out\"\r\n  },\r\n  cajaListMenu: {\r\n    border: \"0.01px solid\",\r\n    borderColor: \"#e5e5e5\",\r\n    margin: \"11px 11px 11px\",\r\n    background: \"#ffffff\"\r\n  },\r\n  input: {\r\n    marginLeft: \"15px\",\r\n    [theme.breakpoints.down(\"md\")]: {\r\n      width: \"85%\"\r\n    }\r\n  },\r\n  linkList: {\r\n    padding: \"5px 0px\",\r\n    textDecoration: \"none\",\r\n    color: \"rgb(0 0 0 / 30%)\",\r\n    cursor: \"pointer\"\r\n  },\r\n  linkLi: {\r\n    padding: \"9px 0px\",\r\n    cursor: \"pointer\"\r\n  },\r\n  linkLiDos: {\r\n    width: \"50%\",\r\n    margin: \"3px auto\",\r\n    borderRadius: \"21px\",\r\n    color: \"white\",\r\n    background: \"#4a9341\"\r\n\r\n  }\r\n  ,\r\n  esconder: {\r\n    display: \"none\"\r\n\r\n  },\r\n\r\n  mostrar: {\r\n    display: \"unset\"\r\n\r\n  },\r\n  noRegistro: {\r\n\r\n    width: \"50%\",\r\n    padding: \"10px\",\r\n    color: \"#808080\"\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n}))\r\n\r\nconst ButtonAppBar = (props) => {\r\n\r\n  // color rojo \r\n  const rojoColor = red[\"a700\"]\r\n  const history = useHistory()\r\n  const [url, seturl] = useState(history.location.pathname)\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const [menu, setmenu] = useState(false)\r\n  const [appBar, setappBar] = useState(false)\r\n  const [listapaper, setlistapaper] = useState([])\r\n  const [noFound, setNoFound] = useState(false)\r\n  const [buscador, setbuscador] = useState({\r\n    buscado: \"\"\r\n  })\r\n  const [abrir, setabrir] = useState(false)\r\n  const open = Boolean(anchorEl);\r\n  const usuario = useContext(UsuarioContext)\r\n  const wrapperRef = useRef(null)\r\n\r\n  const abrirVentana = () => {\r\n    setabrir(true)\r\n  }\r\n  const cerrarVentana = () => {\r\n    setabrir(false)\r\n  }\r\n  const dejarUnaColaboracion = async () => {\r\n\r\n    const { value: text } = await Swal.fire({\r\n      input: 'textarea',\r\n      title: 'Would you like to collaborate?',\r\n      inputPlaceholder: 'Please tell us about the environmental software or sources of environmental information that you know',\r\n      confirmButtonColor: '#21cbce',\r\n      denyButtonText: `Cancel`,\r\n      confirmButtonText: `Send`,\r\n      showDenyButton: true,\r\n    })\r\n\r\n    if (text) {\r\n\r\n\r\n\r\n\r\n\r\n      let user = \"anonimo\"\r\n      let anonimo = true\r\n\r\n      if (usuario != null) {\r\n        user = {\r\n          nombre: usuario.displayName,\r\n          email: usuario.email,\r\n          imagen: usuario.photoURL\r\n        }\r\n        anonimo = false\r\n\r\n      }\r\n      //Swal.fire(text)\r\n\r\n\r\n      let Comentario = {\r\n        fecha: new Date(),\r\n        usuario: user,\r\n        comentario: text,\r\n        anonimo\r\n      }\r\n\r\n      console.log(Comentario)\r\n\r\n      FuncionesFirebase.IngresarColaboracion(Comentario)\r\n    }\r\n\r\n\r\n\r\n  }\r\n  const abrirCerrarMenu = () => {\r\n\r\n    setmenu(!menu)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n\r\n  };\r\n  // handle menu\r\n  const handleMenu = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const buscarPaper = (papermatch) => {\r\n    history.push(`/buscar/${papermatch.id}`)\r\n    setlistapaper([])\r\n  }\r\n  // cerrar sesion\r\n  const cerrarSesion = () => {\r\n\r\n    Firebase.cerrarSesion()\r\n\r\n  }\r\n\r\n\r\n  const formatTitle = (titulo) => {\r\n    var string = titulo;\r\n    var length = 50;\r\n    var trimmedString = string.substring(0, length);\r\n    if (trimmedString.length < 20) {\r\n      var trimmedStringdos = trimmedString\r\n    } else {\r\n      var trimmedStringdos = trimmedString + \"...\"\r\n    }\r\n    console.log(trimmedStringdos)\r\n    return trimmedStringdos\r\n  }\r\n  const formatTitleDos = (titulo) => {\r\n    var string = titulo;\r\n    var length = 30;\r\n    var trimmedString = string.substring(0, length);\r\n\r\n    if (trimmedString.length < 12) {\r\n      var trimmedStringdos = trimmedString\r\n\r\n    } else {\r\n      var trimmedStringdos = trimmedString + \"...\"\r\n    }\r\n\r\n\r\n\r\n    console.log(trimmedStringdos)\r\n    return trimmedStringdos\r\n\r\n  }\r\n\r\n\r\n  const buscar = async (e) => {\r\n    setlistapaper([])\r\n\r\n    console.log(e.target.value)\r\n\r\n    setbuscador({ [e.target.name]: e.target.value })\r\n\r\n    //validar cuando el tipeo esta vacio\r\n    if (e.target.value !== \"\") {\r\n      const inicio = e.target.value.toLocaleLowerCase()\r\n      const prueba = await Firebase.db.collection(\"paper\").\r\n        orderBy(\"busqueda\")\r\n        .startAt(inicio).endAt(inicio + '\\uf8ff')\r\n        .limit(5)\r\n        .onSnapshot(manejarSnapshot)\r\n\r\n    } else {\r\n      setlistapaper([])\r\n      setNoFound(false)\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  function manejarSnapshot(snapshot) {\r\n    const lista = snapshot.docs.map(doc => {\r\n      return {\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }\r\n    })\r\n\r\n    if (lista.length == 0) {\r\n      setNoFound(true)\r\n    } else {\r\n      setNoFound(false)\r\n\r\n    }\r\n    //lista paper\r\n    setlistapaper(lista)\r\n    return lista\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  const dejarUnComentario = async () => {\r\n\r\n    const { value: text } = await Swal.fire({\r\n      input: 'textarea',\r\n      title: 'Sugerencias-Comentarios-Preguntas?',\r\n      inputPlaceholder: 'Por favor escribe tu feedback aquí',\r\n      confirmButtonColor: '#21cbce',\r\n      denyButtonText: `Cancelar`,\r\n      confirmButtonText: `Enviar`,\r\n      showDenyButton: true,\r\n    })\r\n\r\n    if (text) {\r\n\r\n\r\n\r\n\r\n\r\n      let user = \"anonimo\"\r\n      let anonimo = true\r\n\r\n      if (usuario != null) {\r\n        user = {\r\n          nombre: usuario.displayName,\r\n          email: usuario.email,\r\n          imagen: usuario.photoURL\r\n        }\r\n        anonimo = false\r\n\r\n      }\r\n      //Swal.fire(text)\r\n\r\n\r\n      let Comentario = {\r\n        fecha: new Date(),\r\n        usuario: user,\r\n        comentario: text,\r\n        anonimo\r\n      }\r\n\r\n      console.log(Comentario)\r\n\r\n      FuncionesFirebase.IngresarComentario(Comentario)\r\n    }\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  const classes = useStyles();\r\n\r\n  // state Scroll\r\n\r\n  //hacer un useEffect\r\n\r\n  useEffect(() => {\r\n\r\n\r\n    console.log(history.location.pathname)\r\n\r\n\r\n    if (history.location.pathname == \"/login\") {\r\n      if (usuario !== null) {\r\n        console.log(\"redirecciono \")\r\n        setappBar(false)\r\n        history.push(\"/\")\r\n\r\n\r\n      } else {\r\n        setappBar(true)\r\n\r\n      }\r\n\r\n    } else {\r\n\r\n      if (history.location.pathname == \"/adminetiquetas\" || history.location.pathname == \"/ab\") {\r\n\r\n        setappBar(true)\r\n      } else {\r\n        setappBar(false)\r\n      }\r\n    }\r\n\r\n    document.addEventListener(\"mousedown\", handleClickOutside)\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside)\r\n    }\r\n\r\n  }, [usuario, url, history.location.pathname])\r\n\r\n\r\n\r\n\r\n  const handleClickOutside = event => {\r\n\r\n    const { current: wrap } = wrapperRef\r\n    if (wrap && !wrap.contains(event.target)) {\r\n      setlistapaper([])\r\n      setNoFound(false)\r\n      // onBlur={()=>{\r\n      setbuscador({\r\n        buscado: \"\"\r\n      })\r\n      // }}\r\n    }\r\n  }\r\n\r\n\r\n  const pruebaFormulario = (event) => {\r\n    history.push({\r\n      pathname: `/search`,\r\n      search: `?query=${buscador.buscado}`,\r\n      state: buscador\r\n    });\r\n    event.preventDefault()\r\n\r\n  }\r\n\r\n\r\n\r\n  const buscarDos = () => {\r\n\r\n    console.log(buscador.buscado)\r\n    history.push({\r\n      pathname: `/search`,\r\n      search: `?query=${buscador.buscado}`,\r\n      state: buscador\r\n    });\r\n    //event.preventDefault()\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <div className={classes.root} >\r\n      <Dialogo abierto={abrir} cerrar={cerrarVentana}  ></Dialogo>\r\n      <AppBar position=\"static\" color=\"secondary\" elevation={0} >\r\n        <Toolbar>\r\n          <Typography align=\"center\">\r\n            <Link href=\"/\" className={classes.linkclassnohover}>\r\n\r\n              <img className={classes.estiloIcono} src={Icono} alt=\"\" />\r\n\r\n            </Link>\r\n\r\n          </Typography>\r\n          <Hidden lgUp>\r\n            <Typography variant=\"h6\" style={{ flexGrow: \"1\" }}>\r\n\r\n            </Typography>\r\n\r\n            <Typography align=\"center\">\r\n\r\n              <IconButton onClick={() => abrirCerrarMenu()} edge=\"start\" variant=\"contained\" color=\"primary\" aria-label=\"menu\"  >\r\n\r\n                <MenuIcon style={{ fontSize: \"35px\" }} />\r\n\r\n              </IconButton>\r\n\r\n\r\n            </Typography>\r\n\r\n          </Hidden>\r\n\r\n          <Hidden mdDown>\r\n            <div ref={wrapperRef} className={classes.search}>\r\n              <div>\r\n                <form onSubmit={pruebaFormulario}>\r\n                  <InputBase\r\n\r\n                    // onBlur={()=>{\r\n                    //   setbuscador({\r\n                    //     buscado:\"\"\r\n                    //   })\r\n                    // }}\r\n                    className={classes.input}\r\n                    onChange={e => buscar(e)}\r\n\r\n\r\n                    value={buscador.buscado}\r\n                    name=\"buscado\"\r\n                    autoComplete=\"off\"\r\n                    placeholder=\"Buscar\"\r\n\r\n                  />\r\n                  <IconButton onClick={() => { buscarDos() }} color=\"primary\" aria-label=\"search\">\r\n                    <SearchIcon />\r\n                  </IconButton>\r\n                </form>\r\n              </div>\r\n\r\n              {listapaper.length > 0 ?\r\n                <div className={classes.divlista}>\r\n\r\n                  {listapaper.map((valor) => (\r\n\r\n\r\n                    <div style={{\r\n                      height: \"54px\",\r\n                      overflow: \"hidden\"\r\n                    }}  >\r\n\r\n\r\n\r\n                      <Button\r\n                        className={classes.botonOpciones}\r\n                        startIcon={<BookIcon></BookIcon>}\r\n                        color=\"primary\"\r\n                        onClick={() => buscarPaper(valor)}\r\n                      >\r\n\r\n\r\n\r\n                        {\r\n                          formatTitle(valor.titulo)\r\n                        }\r\n\r\n                      </Button>\r\n\r\n\r\n\r\n                      {/* <Link onCli >\r\n<Grid\r\ncontainer\r\n>\r\n\r\n\r\n  <Grid xs={1}>\r\n        <div>\r\n          <BookIcon className={classes.icono}  />\r\n        </div>\r\n  </Grid>\r\n  <Grid xs={11}>\r\nd\r\n        <Typography align=\"left\" className={classes.resumen}  variant=\"body1\" >\r\n           {valor.titulo}\r\n        </Typography>\r\n  </Grid>\r\n\r\n</Grid>\r\n</Link> */}\r\n                    </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                  ))}\r\n\r\n\r\n                </div>\r\n                :\r\n                noFound &&\r\n                <div className={classes.divlista}>\r\n                  <div style={{\r\n                    height: \"54px\",\r\n                    overflow: \"hidden\"\r\n                  }}>\r\n                    <Typography className={classes.noRegistro} align=\"left\" variant=\"h6\">\r\n                      no results\r\n                    </Typography>\r\n\r\n                  </div>\r\n                </div>\r\n\r\n              }\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            {/* <Hidden mdDown> */}\r\n\r\n\r\n\r\n\r\n            <div className={classes.grow} />\r\n\r\n\r\n\r\n            {!appBar ?\r\n\r\n              <>\r\n              <Link href=\"/about\" className={classes.linkclass}>\r\n                  <div className=\"divHover\">\r\n                    <Typography align=\"center\" >\r\n                      Nosotros\r\n                    </Typography>\r\n                    <div className=\"subrayado\"></div>\r\n                  </div>\r\n                </Link>\r\n                {/* <Link href='/latest' className={classes.linkclass}>\r\n                  <div className=\"divHover\">\r\n                    <Typography >\r\n\r\n                      Latest\r\n\r\n                    </Typography>\r\n                    <div className=\"subrayado\"></div>\r\n                  </div>\r\n                </Link> */}\r\n                <Link href=\"/popular\" className={\r\n                  classes.linkclass}>\r\n                  <div className=\"divHover\">\r\n                    <Typography >\r\n\r\n                      Popular\r\n                    </Typography>\r\n                    <div className=\"subrayado\"></div>\r\n                  </div>\r\n                </Link>\r\n\r\n                <Link onClick={() => abrirVentana()} className={\r\n                  classes.linkclass}>\r\n                  <div className=\"divHover\">\r\n                    <Typography >\r\n\r\n                      Soluciones\r\n                    </Typography>\r\n                  </div>\r\n                </Link>\r\n\r\n\r\n\r\n\r\n              </>\r\n\r\n\r\n              :\r\n              <div></div>\r\n            }\r\n\r\n            {/* <Link href=\"/choose\" className={classes.linkclass}>\r\n              <div className=\"divHover\">\r\n                <Typography >\r\n                  Topics\r\n\r\n                </Typography>\r\n                <div className=\"subrayado\"></div>\r\n              </div>\r\n            </Link> */}\r\n\r\n\r\n\r\n\r\n\r\n\r\n            {usuario == null ?\r\n\r\n              <>\r\n\r\n                \r\n                {/* <Link href=\"/why\" className={classes.linkclass}>\r\n                  <div className=\"divHover\">\r\n                    <Typography align=\"center\" >\r\n\r\n                      Why\r\n                      <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className={classes.button}\r\n                      endIcon={<AddIcon></AddIcon>}\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                  >\r\n                      mas\r\n                  </Button>\r\n\r\n                    </Typography>\r\n                    <div className=\"subrayado\"></div>\r\n                  </div>\r\n                </Link> */}\r\n                {/* <Link  onClick={()=>dejarUnComentario()} className={classes.linkclass}>\r\n          <div className=\"divHover\">\r\n              <Typography align=\"center\" >\r\n\r\n                Feedback\r\n                  {/* <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className={classes.button}\r\n                      endIcon={<AddIcon></AddIcon>}\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                  >\r\n                      mas\r\n                  </Button> */}\r\n\r\n                {/* </Typography>\r\n              <div className=\"subrayado\"></div>\r\n            </div>\r\n            </Link> */}\r\n\r\n                <Button onClick={() => dejarUnComentario()} className=\"botonCollaborate\" variant=\"contained\"\r\n\r\n                  startIcon={<PublicIcon />}\r\n\r\n                >\r\n\r\n                  FeedBack\r\n                </Button>\r\n\r\n\r\n              </>\r\n\r\n\r\n\r\n\r\n              :\r\n              usuario.administrador ?\r\n\r\n\r\n                <Link onClick={handleMenu} className={classes.linkclassnohover}>\r\n\r\n                  <div className=\"divHover\">\r\n                    <Typography align=\"center\" >\r\n\r\n\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.button}\r\n                        endIcon={<AddIcon></AddIcon>}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                      >\r\n                        More\r\n                      </Button>\r\n\r\n                    </Typography>\r\n                    <div className=\"subrayado\"></div>\r\n                  </div>\r\n                </Link>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                :\r\n\r\n                <>\r\n                  <Link href=\"/about\" className={classes.linkclass}>\r\n                    <div className=\"divHover\">\r\n                      <Typography align=\"center\" >\r\n\r\n                        About\r\n                        {/* <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    endIcon={<AddIcon></AddIcon>}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                >\r\n                    mas\r\n                </Button> */}\r\n\r\n                      </Typography>\r\n                      <div className=\"subrayado\"></div>\r\n                    </div>\r\n                  </Link>\r\n\r\n\r\n\r\n\r\n\r\n                </>\r\n\r\n\r\n\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n            {/* <Link onClick={handleMenu} className={classes.linkclass}> */}\r\n            {/* <Link  className={classes.linkclass}>\r\n        <div className=\"divHover\">\r\n            <Typography align=\"center\" >\r\n\r\n              Nosotros\r\n                {/* <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    endIcon={<AddIcon></AddIcon>}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                >\r\n                    mas\r\n                </Button> */}\r\n            {/*\r\n            </Typography>\r\n            <div className=\"subrayado\"></div>\r\n          </div>\r\n          </Link> */}\r\n\r\n\r\n\r\n\r\n            {usuario ?\r\n              <Button variant=\"outlined\" color=\"primary\" onClick={() => cerrarSesion()}>\r\n                Sign out\r\n              </Button>\r\n\r\n              :\r\n\r\n              <></>\r\n              // para cuando el usuario  sea necesario\r\n              //   <Button variant=\"outlined\" color=\"primary\" href=\"/login\">\r\n              //   Iniciar Sesion\r\n              //  </Button>\r\n            }\r\n\r\n\r\n\r\n\r\n          </Hidden>\r\n        </Toolbar>\r\n\r\n        <Menu\r\n          id=\"menu-appbar\"\r\n          keepMounted\r\n          anchorEl={anchorEl}\r\n          anchorOrigin={{\r\n            vertical: 'bottom',\r\n            horizontal: 'center',\r\n          }}\r\n          keepMounted\r\n          transformOrigin={{\r\n            vertical: 'top',\r\n            horizontal: 'center',\r\n          }}\r\n          open={open}\r\n          onClose={handleClose}\r\n        >\r\n          <MenuItem onClick={() => {\r\n            handleClose()\r\n            abrirCerrarMenu()\r\n            history.push(\"/about\")\r\n          }}>Nosotros</MenuItem>\r\n          <MenuItem onClick={() => {\r\n            handleClose()\r\n            abrirCerrarMenu()\r\n            history.push(\"/why\")\r\n          }}>Why</MenuItem>\r\n          <MenuItem onClick={() => {\r\n            handleClose()\r\n            abrirCerrarMenu()\r\n            history.push(\"/administrarnosotros\")\r\n          }}>Administrar Nosotros</MenuItem>\r\n          <MenuItem onClick={() => {\r\n            handleClose()\r\n            abrirCerrarMenu()\r\n            history.push(\"/admintitulo\")\r\n          }}>Administrar Titulo</MenuItem>\r\n          <MenuItem onClick={() => {\r\n            history.push(\"/adminetiquetas\")\r\n            setmenu(false)\r\n            handleClose()\r\n          }}>Administrar Etiquetas</MenuItem>\r\n          <MenuItem onClick={() => {\r\n            history.push(\"/admintipos\")\r\n            setmenu(false)\r\n            handleClose()\r\n          }}>Administrar Tipos</MenuItem>\r\n          <MenuItem onClick={() => {\r\n            history.push(\"/adminwhy\")\r\n            setmenu(false)\r\n            handleClose()\r\n          }}>Administrar Why</MenuItem>\r\n          <MenuItem onClick={() => {\r\n            history.push(\"/listacomentarios\")\r\n            setmenu(false)\r\n            handleClose()\r\n          }}>Ver Comentarios </MenuItem>\r\n\r\n          <MenuItem onClick={() => {\r\n            history.push(\"/colaborate\")\r\n            setmenu(false)\r\n            handleClose()\r\n          }}>Ver Colaboraciones </MenuItem>\r\n          <MenuItem onClick={() => {\r\n            history.push(\"/listusuarios\")\r\n            setmenu(false)\r\n            handleClose()\r\n          }}>Usuarios</MenuItem>\r\n          {/* <MenuItem onClick={handleClose}>Partner</MenuItem> */}\r\n        </Menu>\r\n      </AppBar>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      <Hidden lgUp>\r\n        <div className={menu ?\r\n          listapaper.length > 0 ?\r\n            classes.cajaMenuTres :\r\n            classes.cajaMenu\r\n          : classes.cajaMenuDos}>\r\n\r\n\r\n          <div ref={wrapperRef} className={classes.search}>\r\n            <div className={classes.cajaListMenu}>\r\n\r\n              <InputBase\r\n                className={classes.input}\r\n                onChange={e => buscar(e)}\r\n                value={buscador.buscado}\r\n                name=\"buscado\"\r\n                autoComplete=\"off\"\r\n                placeholder=\"Buscar\"\r\n                inputProps={{ 'aria-label': 'search google maps' }}\r\n              />\r\n              <IconButton onClick={() => { buscarDos() }} color=\"primary\" aria-label=\"search\">\r\n                <SearchIcon />\r\n              </IconButton>\r\n\r\n\r\n\r\n            </div>\r\n\r\n            {listapaper.length > 0 ?\r\n              <div className={classes.divlista}>\r\n\r\n                {listapaper.map((valor) => (\r\n\r\n\r\n\r\n                  <div style={{\r\n                    height: \"54px\",\r\n                    overflow: \"hidden\"\r\n                  }}  >\r\n\r\n\r\n\r\n                    <Button\r\n                      className={classes.botonOpciones}\r\n                      startIcon={<BookIcon></BookIcon>}\r\n                      color=\"primary\"\r\n                      onClick={() => buscarPaper(valor)}\r\n                    >\r\n\r\n                      {formatTitleDos(valor.titulo)\r\n                      }\r\n                    </Button>\r\n\r\n\r\n\r\n                    {/* <Link onCli >\r\n<Grid\r\ncontainer\r\n>\r\n\r\n\r\n  <Grid xs={1}>\r\n        <div>\r\n          <BookIcon className={classes.icono}  />\r\n        </div>\r\n  </Grid>\r\n  <Grid xs={11}>\r\n\r\n        <Typography align=\"left\" className={classes.resumen}  variant=\"body1\" >\r\n           {valor.titulo}\r\n        </Typography>\r\n  </Grid>\r\n\r\n</Grid>\r\n</Link> */}\r\n                  </div>\r\n\r\n\r\n                ))}\r\n\r\n\r\n              </div>\r\n              : <div></div>}\r\n\r\n            {/* <div className={menu?classes.mostrar:classes.esconder}> */}\r\n\r\n\r\n            {appBar ? <div></div> :\r\n              <>\r\n                {/* <Link  href='/latest'   className={classes.linkList} >\r\n              <Typography className={props.recientes?classes.linkLiDos:classes.linkLi} align=\"center\" variant=\"subtitle1\">\r\n                        Latest\r\n              </Typography>\r\n              </Link> */}\r\n                <Link href='/popular' className={classes.linkList} >\r\n                  <Typography className={props.valorados ? classes.linkLiDos : classes.linkLi} align=\"center\" variant=\"subtitle1\">\r\n                    Popular\r\n                  </Typography>\r\n                </Link>\r\n              </>\r\n            }\r\n\r\n            {/* \r\n                <Link href=\"/choose\" className={classes.linkList}>\r\n              <Typography className={classes.linkLi} align=\"center\" variant=\"subtitle1\">\r\n              Environmental Topics\r\n              </Typography>\r\n              </Link> */}\r\n\r\n\r\n\r\n            {usuario == null ?\r\n              <>\r\n                <Link onClick={() => {\r\n                  {\r\n                    handleClose()\r\n                    abrirCerrarMenu()\r\n                    history.push(\"/about\")\r\n                  }\r\n                }} className={classes.linkList} >\r\n                  <Typography className={classes.linkLi} align=\"center\" variant=\"subtitle1\">\r\n                    About\r\n\r\n                  </Typography>\r\n                </Link>\r\n                <Link onClick={() => dejarUnComentario()} className={classes.linkList} >\r\n                  <Typography className={classes.linkLi} align=\"center\" variant=\"subtitle1\">\r\n                    Feedback\r\n                  </Typography>\r\n                </Link>\r\n\r\n              </>\r\n              :\r\n\r\n              usuario.administrador ?\r\n                <Link onClick={handleMenu} className={classes.linkclass}>\r\n                  <div className=\"divHover\">\r\n                    <Typography align=\"center\" >\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.button}\r\n                        endIcon={<AddIcon></AddIcon>}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                      >\r\n                        more\r\n                      </Button>\r\n                    </Typography>\r\n                    <div className=\"subrayado\"></div>\r\n                  </div>\r\n                </Link>\r\n                :\r\n                <>\r\n                  <Link className={classes.linkList} >\r\n                    <Typography className={classes.linkLi} align=\"center\" variant=\"subtitle1\">\r\n                      Nosotros\r\n                    </Typography>\r\n                  </Link>\r\n\r\n\r\n                </>\r\n\r\n            }\r\n\r\n            <Typography className={classes.linkLi} align=\"center\" variant=\"h6\">\r\n\r\n\r\n              {usuario ?\r\n                <Button color=\"primary\" variant=\"outlined\" onClick={() => cerrarSesion()} >\r\n                  Log out\r\n                </Button>\r\n                :\r\n\r\n                <></>\r\n                //   <Button color=\"primary\" variant=\"outlined\" href=\"/login\" >\r\n                //   Log in\r\n                // </Button>\r\n\r\n              }\r\n\r\n            </Typography>\r\n          </div>\r\n          {/* </div> */}\r\n\r\n\r\n\r\n        </div>\r\n\r\n\r\n\r\n\r\n      </Hidden>\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default withRouter(ButtonAppBar)","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\firebase\\firebase.js",[],"C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Funciones\\PaperDoc.js",[],"C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\BotonFlotante.jsx",[],"C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\Papertres.jsx",["393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408","409"],"import React from 'react'\r\nimport {Paper as Papel,Grid,Typography,Chip,Button ,CircularProgress ,IconButton,makeStyles,Link} from \"@material-ui/core\"\r\nimport Basurero from '@material-ui/icons/Delete';\r\nimport Lapiz from '@material-ui/icons/Create';\r\nimport InsertDriveFileIcon from '@material-ui/icons/InsertDriveFile';\r\n// import Corazon from '@material-ui/icons/FavoriteBorder';\r\nimport moment from 'moment' \r\n// import CorazonLleno from '@material-ui/icons/Favorite';\r\nimport \"moment/locale/es\"\r\nimport { useState } from 'react';\r\nimport Swal from \"sweetalert2\"\r\nimport firebase from \"../firebase/firebase\"\r\nimport AddAPhotoIcon from '@material-ui/icons/AddAPhoto';\r\nimport { useContext } from 'react';\r\nimport { UsuarioContext } from '../Provedores/UsuarioContext';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useEffect } from 'react';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport {RetornarPaper,RenovarPaperMapEtiqueta} from '../Funciones/Funciones'\r\nimport {actualizarPaper,ActualizarPaperEnEtiquetas} from '../Funciones/PaperDoc'\r\nimport CorazonLleno from \"../imagen/iconos/arbolLleno.png\"\r\nimport Corazon from \"../imagen/iconos/arbolVacio.png\"\r\nimport BotonMenu from '../Componetes/Tarjeta/BotonMenu'\r\n\r\n\r\nconst  estilos = makeStyles((theme)=>({\r\n\r\n\r\n    margen:{\r\n\r\n            margin:\"250px auto \",\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    },\r\n    caja:{\r\n        position:\"relative\",\r\n        width:\"80vw\",\r\n        margin:\"20px auto\",\r\n        display:\"block\",\r\n        height:\"unset\",\r\n        borderRadius:\"10px\",\r\n    transition:\"background-color .25s,color .25s,box-shadow .25s\",\r\n    boxShadow:\"0 8px 42px -8px rgb(0 0 0 / 20%)\",\r\n    border:\"1px solid #f0f0f0\",\r\n    [theme.breakpoints.down(\"md\")]:{\r\n        height:\"unset\"\r\n    },\r\n\r\n\r\n  \r\n\r\n    \"& .botoneditar\":{\r\n        background:\"#1ab37c\",\r\n        color:\"#ffffff\",\r\n     \r\n        \"&:hover\": {\r\n           background:\"#ffffff\",\r\n           color:\"#1ab37c !important\",\r\n         },\r\n\r\n\r\n    },\r\n    \"& .botoneditar\":{\r\n        background:\"#1ab37c\",\r\n        color:\"#ffffff\",\r\n        marginTop:\"10px\",\r\n\r\n        \"&:hover\": {\r\n           background:\"#ffffff\",\r\n           color:\"#1ab37c !important\",\r\n         },\r\n\r\n\r\n    }\r\n\r\n\r\n    }\r\n\r\n,\r\n    titulo:{\r\n\r\n        fontWeight:\"500\",\r\n        fontFamily:\"nunito\"\r\n    }\r\n,\r\n\r\nfecha:{\r\n        fontWeight:\"500\",\r\n        fontFamily:\"nunito\",\r\n        paddingTop:\"5px\",\r\n        color:\"#717171\"\r\n},\r\ncajaMeGusta:{\r\n        position:'absolute',\r\n        top:'8px',\r\n        right:'12px',\r\n[theme.breakpoints.down(\"sm\")]:{\r\n        position:'unset'\r\n},\r\n},\r\n\r\ncontenedor:{\r\n        margin:\"18px auto\"\r\n\r\n},\r\nresumen:{\r\n        fontFamily:\"nunito\",\r\n        margin:\"15px auto\"\r\n},\r\ndiveditarborrar:{\r\n\r\n        position:\"absolute\",\r\n        bottom:\"0\",\r\n        right:\"0\",\r\n        width:\"90px\"\r\n},\r\ndivFoto:{\r\n\r\n    width:\"250px\",\r\n    height:\"160px\",\r\n    border:\"2px dashed #21cbce\",\r\n    display:\"block\",\r\n    margin:\"16px auto\",\r\n    position:\"relative\",\r\n    [theme.breakpoints.down(\"sm\")]:{\r\n        margin:\"30px auto\"\r\n}\r\n},\r\n\r\ndivImagen:{\r\n       \r\n        height:\"160px\",\r\n        width:\"260px\",\r\n        backgroundSize:\"260px auto\",\r\n        backgroundRepeat:\"no-repeat\",\r\n        backgroundPosition:\"50%\",\r\n        borderRadius:\"16px\",\r\n        display:\"block\",\r\n        margin:\"auto\",\r\n        marginTop:\"15px\",\r\n        [theme.breakpoints.down(\"sm\")]:{\r\n                marginTop:\"30px\"\r\n        }\r\n}\r\n,\r\ndivTexto:{\r\n        [theme.breakpoints.down(\"md\")]:{\r\n\r\n                margin:\"0vw 5vw 0\"\r\n        },\r\n\r\n\r\n\r\n        [theme.breakpoints.down(\"sm\")]:{\r\n\r\n                margin:\"5vw 5vw 0\"\r\n        }\r\n}\r\n\r\n,botonLikes:{\r\n        color:\"#35b37c\",\r\n        margin:\"8px 0px 0x 0px\",\r\n        border:\"1px solid\"\r\n\r\n\r\n    },\r\n\r\n    botonPdf:{\r\n        position:\"absolute\",\r\n        bottom:\"55px\",\r\n        right:'0px',\r\n        [theme.breakpoints.down(\"sm\")]:{\r\n                position:'unset'\r\n        }\r\n}\r\n,\r\ntextUpVote:{\r\n        fontFamily:\"nunito\",\r\n        textAlign:\"center\",\r\n        color:\"#808080\"     \r\n     }\r\n,\r\n\r\n\r\nimgFoto:{\r\n    color:\"#21cbce\",\r\n    position:\"absolute\",\r\n    margin:\"auto\",\r\n    top:\"0\",\r\n    bottom:\"0\",\r\n    left:\"0\",\r\n    right:\"0\",\r\n    fontSize:\"3rem\"\r\n}\r\n\r\n,\r\n    margenChip:{\r\n        margin:\"0px 3px\",\r\n        [theme.breakpoints.down(\"sm\")]:{\r\n\r\n                margin:\"0px 4px\"\r\n        }\r\n       \r\n    },\r\n    divReg:{\r\n\r\n        margin:\"45px auto\",\r\n        width:\"75vw\"\r\n\r\n    },\r\n    texto:{\r\n        fontFamily:\"nunito\",\r\n        fontWeight:\"300\"\r\n\r\n    },\r\n    centrarComponente:{\r\n            textAlign:\"end\",\r\n            marginRight:\"10px\",\r\n            [theme.breakpoints.down(\"md\")]:{\r\n\r\n                    textAlign:\"center\",\r\n            }\r\n\r\n    }\r\n\r\n\r\n\r\n }))\r\n\r\n\r\n\r\n\r\n\r\nconst Paper = (props) => {\r\n        const clases =estilos()\r\n        const history = useHistory();\r\n        const usuario =useContext(UsuarioContext)\r\n        const [valor, setvalor] = useState(props.paper)\r\n        const [paper, setpaper] = useState([])\r\n        const [cargando, setcargando] = useState(false)\r\n        const [cargandoCorazon, setcargandoCorazon] = useState(false)\r\n        const buscaretiquetas=props.buscaretiquetas\r\n        const megusta=props.megusta\r\n        const tamaño =props.length\r\n        const [ultimoDocumento, setultimoDocumento] = useState(0)\r\n        const cambiarLike=props.cambiarLike\r\n\r\n\r\n\r\n\r\n\r\nconst buscarChips=(valor)=>{\r\nhistory.push(`/tag/${valor.id}`)\r\n      \r\n    }      \r\n\r\n\r\n    const megustaSinValidarUsuario=(valor)=>{\r\n\r\n\r\n\r\n\r\n                        \r\n                        const nuevoHaVotado=[]\r\n\r\n\r\n                                if(valor.click){\r\n                        valor.likes=valor.likes-1\r\n                        valor.click=false\r\n                        }else{\r\n\r\n                        valor.likes=valor.likes+1\r\n                        valor.click=true\r\n                        }         \r\n\r\n                        let  nuevoValor={\r\n                                ...valor,\r\n                                likes:valor.likes,\r\n                                haVotado:nuevoHaVotado\r\n                                }\r\n\r\n                        //guarda datos en el paper\r\n                        firebase.db.collection(\"paper\").doc(valor.id).update({\r\n                                ...valor,\r\n                                likes:valor.likes,\r\n                                haVotado:nuevoHaVotado\r\n\r\n                        })\r\n\r\n                                valor.etiquetas.map(valordos=>{\r\n                                        firebase.db.collection(\"etiquetas\").doc(valordos.id).collection(\"paper\").doc(valor.id).update({\r\n                                                ...valor,\r\n                                                likes:valor.likes,\r\n                                                haVotado:nuevoHaVotado\r\n                                \r\n                                        })})\r\n\r\n                listaPaperdos(nuevoValor,valor.likes,nuevoHaVotado);\r\n                cambiarLike(nuevoValor)\r\n\r\n\r\n//firebase.db.collection(\"paper\").doc(valor.id).update(nuevoValor)\r\n\r\n      // mapear etiquetas\r\n\r\n//       valor.etiquetas.map(valordos=>{\r\n//         firebase.db.collection(\"etiquetas\").doc(valordos.id).collection(\"paper\").doc(valor.id).update({\r\n//                 ...valor,\r\n//                 likes:valor.likes,\r\n//                 haVotado:nuevoHaVotado\r\n\r\n//         })\r\n// })\r\n\r\n//armararreglo(nuevoValor)\r\n     //setpaper({...valor,likes:valor.likes})\r\n\r\n     // }\r\n      console.log(\"final\")\r\n}\r\n\r\n\r\nconst borrar=(e)=>{\r\n\r\n    Swal.fire({\r\n            title: 'Esta seguro que desea borrar el siguiente registro?',\r\n            text:`${e.titulo}`,\r\n            showDenyButton: true,\r\n          \r\n            confirmButtonText: `Borrar`,\r\n            denyButtonText: `Cancelar`,\r\n          }).then((result) => {\r\n            /* Read more about isConfirmed, isDenied below */\r\n            if (result.isConfirmed) {\r\n\r\n                                    \r\n                            firebase.db.collection(\"paper\").doc(e.id).delete().then(() => {\r\n                                    console.log(\"Document successfully deleted!\");\r\n                            }).catch((error) => {\r\n                                    console.error(\"Error removing document: \", error);\r\n                            });\r\n                           \r\n                            //hacer un mapeo y borrar \r\n\r\n\r\n                            e.etiquetas.map(valor=>{\r\n \r\n                                firebase.db.collection(\"etiquetas\").doc(valor.id).collection(\"paper\").doc(e.id).delete().then(async() => {\r\n                                        //  console.log(\"Document successfully deleted!\");\r\n\r\n\r\n\r\n                                         let soloTag=await firebase.db.collection(\"etiquetas\").doc(valor.id).get().then((doc)=>{\r\n\r\n\r\n                                                   return{...doc.data()}\r\n                                         \r\n                                         })\r\n\r\n                                           console.log(soloTag)\r\n                                           let nuevoObjeto={  ...soloTag,\r\n                                                   contar:soloTag.contar-1}\r\n\r\n                                             console.log(nuevoObjeto)      \r\n\r\n                                           firebase.db.collection(\"etiquetas\").doc(valor.id).set(nuevoObjeto)\r\n\r\n\r\n                                   }).catch((error) => {\r\n                                        console.error(\"Error removing document: \", error);\r\n                                });\r\n                               \r\n\r\n                            })\r\n\r\n                            var  borrarArchivo= firebase.storage.ref().child(\"PDF\").child(e.id)    \r\n                            var  borrarImagen= firebase.storage.ref().child(\"IMAGEN\").child(e.id)    \r\n\r\n\r\n                            \r\n                                borrarArchivo.delete().then(function() {\r\n                                        console.log(\"borrado\")\r\n                                // File deleted successfully\r\n                                }).catch(function(error) {\r\n                                        console.log(error)\r\n                                // Uh-oh, an error occurred!\r\n                                });          \r\n\r\n                                borrarImagen.delete().then(function() {\r\n                                console.log(\"borrado\")\r\n                        // File deleted successfully\r\n                        }).catch(function(error) {\r\n                                console.log(error)\r\n                        // Uh-oh, an error occurred!\r\n                        });          \r\n\r\n\r\n\r\n\r\n\r\n                            props.buscaretiquetas()\r\n\r\n              Swal.fire('Borrado!', '', 'success')\r\n            } else if (result.isDenied) {\r\n            \r\n            }\r\n          })\r\n\r\n        \r\n}\r\n\r\n\r\n\r\nconst megustatres=async(valor)=>{\r\n\r\n\r\n        //setcargando(true)\r\n        if(usuario==null) {\r\n                return history.push(\"/login\")\r\n        }\r\n\r\n        // prueba de las funciones \r\n        //const valorRenovado=  await RetornarPaper(valor.id)\r\n        //valor=valorRenovado\r\n\r\n        if(valor.haVotado==undefined){                    \r\n                var antiguoHaVotado=[]\r\n        }else{\r\n                var antiguoHaVotado=valor.haVotado\r\n        }\r\n\r\n                        \r\n        // nuevo paper \r\n\r\n        let newPaper={}\r\n\r\n     if(antiguoHaVotado.includes(usuario.uid)){ \r\n      \r\n                antiguoHaVotado=antiguoHaVotado.filter(function(obj){\r\n                        return obj!==usuario.uid\r\n                })\r\n\r\n                let megusta=valor.likes-1 \r\n               \r\n                 newPaper={\r\n                        ...valor,\r\n                         likes:megusta,\r\n                        haVotado:antiguoHaVotado\r\n                }\r\n\r\n\r\n                listaPaperdos(newPaper,megusta,antiguoHaVotado)\r\n                //await firebase.db.collection(\"paper\").doc(valor.id).update(nuevoPaper)\r\n                //RenovarPaperMapEtiqueta(nuevoPaper)\r\n                // \r\n              \r\n\r\n     }else{ \r\n        // alert(\"no incluido\")\r\n     const nuevoHaVotado = [...antiguoHaVotado, usuario.uid];\r\n     console.log(nuevoHaVotado)\r\n     let megusta=valor.likes+1   \r\n     \r\n\r\n     // crear variable de paper \r\n\r\n     newPaper={\r\n        ...valor,\r\n         likes:megusta,\r\n        haVotado:nuevoHaVotado\r\n}\r\n\r\nlistaPaperdos(newPaper,megusta,nuevoHaVotado)\r\n//await firebase.db.collection(\"paper\").doc(valor.id).update(nuevoPaper)\r\n\r\n//RenovarPaperMapEtiqueta(nuevoPaper)\r\n\r\n\r\n\r\n        //        let arreglo=paper \r\n        //        setpaper([])\r\n\r\n        // const nuevoPaper=arreglo.map(papel=>{\r\n        //    if(valor.id==papel.id){\r\n\r\n\r\n\r\n                 \r\n        //         return{\r\n        //                 ...papel,\r\n        //                 likes:1\r\n        //         }\r\n\r\n        //    }\r\n\r\n        //    return papel\r\n\r\n        // })\r\n\r\n        // setpaper(nuevoPaper)\r\n\r\n}\r\n\r\nactualizarPaper(newPaper)\r\nActualizarPaperEnEtiquetas(newPaper)\r\nbuscaretiquetas()\r\nprops.setChangeLike({\r\n        cambio:true,\r\n        idEtiqueta:props.id,\r\n        paper:newPaper\r\n    })\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\nconst megustacuatro=async(valor)=>{ \r\n        //setcargando(true)\r\n        if(usuario==null) {\r\n                return history.push(\"/login\")\r\n        }\r\n        // prueba de las funciones \r\n        //const valorRenovado=  await RetornarPaper(valor.id)\r\n        //valor=valorRenovado\r\n        if(valor.haVotado==undefined){                    \r\n                var antiguoHaVotado=[]\r\n        }else{\r\n                var antiguoHaVotado=valor.haVotado\r\n        }                      \r\n        // nuevo paper \r\n        let newPaper={}\r\n        if(antiguoHaVotado.includes(usuario.uid)){ \r\n                antiguoHaVotado=antiguoHaVotado.filter(function(obj){\r\n                        return obj!==usuario.uid\r\n                })\r\n                let megusta=valor.likes-1 \r\n                 newPaper={\r\n                        ...valor,\r\n                         likes:megusta,\r\n                        haVotado:antiguoHaVotado\r\n                }\r\n        listaPaperdos(newPaper,megusta,antiguoHaVotado)\r\n                //await firebase.db.collection(\"paper\").doc(valor.id).update(nuevoPaper)\r\n                //RenovarPaperMapEtiqueta(nuevoPaper)\r\n                // \r\n              \r\n        console.log(newPaper)\r\n     }else{ \r\n        // alert(\"no incluido\")\r\n     const nuevoHaVotado = [...antiguoHaVotado, usuario.uid];\r\n     console.log(nuevoHaVotado)\r\n     let megusta=valor.likes+1   \r\n     \r\n\r\n     // crear variable de paper \r\n\r\n     newPaper={\r\n        ...valor,\r\n         likes:megusta,\r\n        haVotado:nuevoHaVotado\r\n}\r\n\r\nconsole.log(newPaper)\r\n//listaPaperdos(newPaper,megusta,nuevoHaVotado)\r\n//await firebase.db.collection(\"paper\").doc(valor.id).update(nuevoPaper)\r\n\r\n//RenovarPaperMapEtiqueta(nuevoPaper)\r\n\r\n\r\n\r\n        //        let arreglo=paper \r\n        //        setpaper([])\r\n\r\n        // const nuevoPaper=arreglo.map(papel=>{\r\n        //    if(valor.id==papel.id){\r\n\r\n\r\n\r\n                 \r\n        //         return{\r\n        //                 ...papel,\r\n        //                 likes:1\r\n        //         }\r\n\r\n        //    }\r\n\r\n        //    return papel\r\n\r\n        // })\r\n\r\n        // setpaper(nuevoPaper)\r\n\r\n}\r\n\r\n// actualizarPaper(newPaper)\r\n// ActualizarPaperEnEtiquetas(newPaper)\r\n// buscaretiquetas()\r\n// props.setChangeLike({\r\n//         cambio:true,\r\n//         idEtiqueta:props.id,\r\n//         paper:newPaper\r\n//     })\r\n\r\n\r\n             \r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\nconst listaPaperdos=(valor,megusta,nuevosvotos)=>\r\n{\r\n        const nuevoPaper=paper.map(papel=>{\r\n                if(valor.id==papel.id){\r\n                     return {\r\n                         ...valor,\r\n                         likes:megusta,\r\n                         haVotado:nuevosvotos       \r\n                     }\r\n                }\r\n                return papel\r\n             })\r\n             setpaper(nuevoPaper)\r\n}\r\n\r\n\r\n\r\n const funcionCorazondos=(valor)=>{\r\n\r\n             if(valor.likes>0){\r\n                 return true       \r\n             }else{\r\n                return false\r\n             }\r\n\r\n\r\n\r\n }\r\n\r\n\r\nconst funcionCorazon=(valor)=>{\r\n       \r\n        let votos_usuarios=[]\r\n\r\n        if(valor.haVotado==undefined){\r\n                console.log(\"paso por aca dodo\")\r\n                return false\r\n        }else{\r\n\r\n        votos_usuarios=valor.haVotado\r\n        if(votos_usuarios.length==0){\r\n                console.log(\"paso por aca dodo\")\r\n                return false\r\n        }else{\r\n                console.log(usuario)\r\n                if(usuario!=undefined){\r\n                if(votos_usuarios.includes(usuario.uid)){\r\n                        return true\r\n                }else{\r\n                        return false\r\n                }}\r\n\r\n        }\r\n}\r\n\r\n       \r\n\r\n }\r\n\r\n\r\n\r\n\r\nuseEffect(async() => {\r\n\r\n\r\n\r\n\r\n        setvalor(props.paper)\r\n// if(props.changeLike.cambio){\r\n//         console.log(props.changeLike.idEtiqueta)\r\n//         console.log(props.id)\r\n//         if(props.changeLike.idEtiqueta!=props.id){\r\n              \r\n//                 cargarListaDos()\r\n//         }else{\r\n//                 cargarListaDos()\r\n//         }\r\n        \r\n\r\n// }else{\r\n\r\n// // iniciar carga \r\n// setcargando(true)\r\n//  //tomar todas las etiquetas\r\n\r\n//             const etiquetas = props.etiquetas\r\n//             console.log(etiquetas)\r\n// // buscar los paper guardados en cada etiquetas \r\n//         //crear variable para guardar \r\n//          let listadepaper=[]\r\n\r\n//         //lista de paper con las etiquetas\r\n//         listadepaper =  await firebase.db.collection(\"etiquetas\").doc(etiquetas.id).collection(\"paper\").get()\r\n        \r\n\r\n//             var consulta =listadepaper.docs.map(doc=>{\r\n//                     return{\r\n//                             id:doc.id,\r\n//                             ...doc.data()\r\n//                     }\r\n//             })    \r\n\r\n\r\n//         //mostrar el resultado \r\n\r\n//         console.log(consulta)\r\n\r\n//         //Guardar la consulta\r\n//         setpaper(consulta)\r\n         \r\n//         // terminar de cargar\r\n\r\n//         setcargando(false)\r\n//         }\r\n\r\n\r\n\r\n}, [props])\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n                \r\n            \r\n\r\n                                        <Papel key={valor.id} className={clases.caja} elevation={3}>\r\n\r\n                                        <Grid container  className={clases.contenedor}>\r\n                                                <Grid xs={12} sm={12} md={4}>\r\n                                                                                <div>\r\n\r\n                                                                                {valor.imagen!==undefined &&\r\n                                                                                valor.imagen==null?\r\n\r\n\r\n                                                                                <div className={clases.divFoto}>\r\n                                                                                < AddAPhotoIcon className={clases.imgFoto}></AddAPhotoIcon>  \r\n\r\n                                                                                </div> \r\n                                                                                        \r\n                                                                                \r\n                                                                                \r\n                                                                                \r\n                                                                                :         \r\n                                                                                <div  className={clases.divImagen} style={{\r\n                                                                                backgroundImage:`url(${valor.imagen})`,\r\n                                                                                \r\n                                                                                }} >\r\n\r\n                                                                                        \r\n                                                                                        </div>\r\n\r\n                                                                                }   \r\n                                                                                </div>\r\n                                                 </Grid>\r\n                                            \r\n <Grid xs={12} sm={12} md={6}>\r\n        <div className={clases.divTexto}>             \r\n\r\n\r\n<Typography variant=\"h5\" className={clases.titulo} >\r\n{valor.info==true?\r\n\r\n<a  style={{textDecoration:\"none\"}} href={`/information/${valor.id}`} >\r\n\r\n\r\n   {valor.titulo}\r\n</a>        \r\n:\r\n    valor.titulo            }                                                                  \r\n</Typography>\r\n\r\n        <Typography className={clases.fecha} variant=\"subtitle2\">\r\n                        {moment(new Date(valor.subida.seconds*1000)).format(\"D MMM YYYY\")}    \r\n        </Typography>\r\n\r\n\r\n        <Typography variant=\"body2\" className={clases.resumen}>\r\n                {valor.resumen}\r\n        </Typography>\r\n\r\n    \r\n        </div>        \r\n        </Grid>\r\n\r\n         \r\n        <Grid xs={12} sm={12} md={4}>\r\n                                                                <Typography variant=\"subtitle1\" align=\"center\">  \r\n                                                                aplicaciones en :\r\n                                                                </Typography>\r\n\r\n                                                                \r\n                                                          </Grid>    \r\n\r\n                                                           <Grid xs={12} sm={12} md={8}>\r\n\r\n                                                                <Typography variant=\"subtitle1\">\r\n\r\n                                                                        {valor.etiquetas.map((valor)=>(\r\n                                                                        //      <Link style={{textDecoration:\"none\"}} to={`/etiquetas/${valor}`}>\r\n                                                                        <Chip variant=\"outlined\"  className={clases.margenChip} onClick={()=>buscarChips(valor)} color=\"primary\" size=\"small\" label={valor.descripcion} />\r\n                                                                        //    </Link>\r\n                                                                                        ))}\r\n\r\n\r\n                                                                </Typography>\r\n                                                                \r\n                                                                \r\n                                                          </Grid>                     \r\n                                                                                         \r\n        <Grid xs={12} sm={12} md={2}>\r\n\r\n        <div className={clases.cajaMeGusta}>\r\n                                                                 <Typography className={clases.centrarComponente} variant=\"subtitle1\" >\r\n                                                                <Button onClick={()=>megustaSinValidarUsuario(valor)}\r\n                                                                className={clases.botonLikes}\r\n                                                                startIcon={\r\n                                                                funcionCorazondos(valor)?\r\n                                                                // <CorazonLleno></CorazonLleno>\r\n                                                                <>\r\n                                                                <img height=\"25\" src={CorazonLleno}></img>\r\n                                                                \r\n                                                                </>\r\n                                                                :\r\n                                                                //  <Corazon></Corazon>\r\n                                                                <>\r\n                                                                <img  height=\"25\"  src={Corazon}></img>\r\n                                                               \r\n                                                                </>\r\n                                                               }\r\n                                                                >\r\n                                                                        {valor.likes}\r\n                                                                </Button>\r\n                                                                <Typography className={clases.textUpVote} variant='subtitle2' >\r\n                                                                 upvote\r\n                                                                 </Typography>\r\n                                                                \r\n                                                </Typography>\r\n                                                </div>\r\n                                               \r\n                                               \r\n                                               \r\n                                               <div className={clases.botonPdf}>\r\n                                                <Typography  className={clases.centrarComponente} variant=\"subtitle1\"\r\n                                                          >\r\n                                                <a href={valor.pdf==null?\r\n                                                    valor.link:valor.pdf\r\n                                                }  style={{textDecoration:\"none\"}} target=\"_blank\">\r\n                                                <Button  className=\"botoneditar\" variant=\"contained\"\r\n                                               \r\n                                                >\r\n                                                        get it\r\n                                                </Button>\r\n                                                </a>\r\n                                                </Typography>\r\n                                                </div>    \r\n\r\n\r\n\r\n\r\n        {usuario==null?\r\n\r\n\r\n                                                      \r\n<div></div>\r\n:\r\n\r\n\r\nusuario.administrador?\r\n\r\n<div className={clases.diveditarborrar}>          \r\n\r\n<Grid container>\r\n        \r\n         <Grid xs={6}>\r\n        \r\n                <Typography variant=\"subtitle1\" align=\"center\">\r\n                   <BotonMenu id={valor.id}></BotonMenu>\r\n                </Typography>\r\n        </Grid>\r\n        <Grid  xs={6}>\r\n                <Typography variant=\"subtitle1\" align=\"center\">\r\n\r\n                <IconButton  variant=\"contained\"  color=\"primary\"  onClick={()=>borrar(valor)}>\r\n                        <Basurero></Basurero>    \r\n                </IconButton>\r\n\r\n                </Typography>\r\n        </Grid>\r\n</Grid>\r\n</div>                              \r\n\r\n:\r\n<div></div>\r\n\r\n}  \r\n\r\n\r\n\r\n        </Grid>\r\n\r\n          \r\n\r\n                                            \r\n\r\n\r\n\r\n                                        </Grid>\r\n\r\n                                        \r\n                                      \r\n                                         </Papel>                      \r\n\r\n                               \r\n\r\n                                        \r\n{/*                                         \r\n                                                                { tamaño==2&&\r\n\r\n                                                                <Typography align=\"center\">\r\n                                                                <Button \r\n                                                                        endIcon={<ExpandMoreIcon></ExpandMoreIcon>}\r\n                                                                        variant =\"contained\"\r\n                                                                        color=\"primary\"\r\n\r\n                                                                onClick={()=>{\r\n                                                                        \r\n                                                                }} >\r\n                                                                ver mas\r\n                                                                        </Button> \r\n                                                                </Typography>   }                     \r\n\r\n                                      } */}\r\n\r\n                      \r\n             \r\n\r\n                \r\n            \r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paper\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\Caja.jsx",["410","411","412","413","414","415","416","417","418"],"import React,{useEffect,useState} from 'react'\r\nimport {Grid,makeStyles, Typography, Button,IconButton,CircularProgress, setRef} from \"@material-ui/core\"\r\nimport Paper from '@material-ui/core/Paper';\r\nimport firebase from '../firebase/firebase'\r\nimport moment from 'moment'\r\nimport {Link} from 'react-router-dom'\r\nimport Swal from 'sweetalert2'\r\nimport {Chip} from '@material-ui/core'\r\nimport \"moment/locale/es\"\r\nimport SaveIcon from '@material-ui/icons/Save';\r\n//import Corazon from '@material-ui/icons/FavoriteBorder';\r\nimport Basurero from '@material-ui/icons/Delete';\r\n//import CorazonLleno from '@material-ui/icons/Favorite';\r\nimport Lapiz from '@material-ui/icons/Create';\r\nimport AddAPhotoIcon from '@material-ui/icons/AddAPhoto';\r\nimport {UsuarioContext} from \"../Provedores/UsuarioContext\"\r\nimport { useContext } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport CorazonLleno from \"../imagen/iconos/arbolLleno.png\"\r\nimport Corazon from \"../imagen/iconos/arbolVacio.png\"\r\n import BotonMenu from './Tarjeta/BotonMenu'\r\n\r\n   \r\n      \r\n\r\n const  estilos = makeStyles((theme)=>({\r\n        button: {\r\n                margin: '3px'\r\n              },\r\n\r\n    margen:{\r\n\r\n            margin:\"45px auto \",\r\n\r\n\r\n\r\n            \"& .botoneditar\":{\r\n                background:\"#4a9341\",\r\n                color:\"#ffffff\",\r\n\r\n                \"&:hover\": {\r\n                   background:\"#ffffff\",\r\n                   color:\"#1ab37c !important\",\r\n                 },\r\n\r\n\r\n            },\r\n      \r\n\r\n            \" & #mandarina .MuiSvgIcon-root\" :{\r\n              \r\n                color:\"#EC6933\",\r\n              \r\n            },\r\n            \" & #verde .MuiSvgIcon-root\" :{\r\n              \r\n                color:\"#4B9965\",\r\n              \r\n            },\r\n            \" & #morado .MuiSvgIcon-root\" :{\r\n              \r\n                color:\"#9372B6\",\r\n              \r\n            },\r\n            \" & #azul .MuiSvgIcon-root\" :{\r\n              \r\n                color:\"#4CA9B2\",\r\n              \r\n            },\r\n\r\n\r\n\r\n            \" & .MuiButton-containedPrimary\" :{\r\n              \r\n                color:\"#434343\",\r\n                backgroundColor:\"#ffffff\",\r\n                boxShadow:\"none\"\r\n            },\r\n          \r\n\r\n            \"& .botoneditar\":{\r\n                background:\"#4a9341\",\r\n                color:\"#ffffff\",\r\n                marginTop:\"10px\",\r\n\r\n                \"&:hover\": {\r\n                   background:\"#ffffff\",\r\n                   color:\"#1ab37c !important\",\r\n                 },\r\n\r\n\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    },\r\n    caja:{\r\n        position:\"relative\",\r\n        width:\"80vw\",\r\n        margin:\"20px auto\",\r\n        display:\"block\",\r\n        height:\"unset\",\r\n        borderRadius:\"10px\",\r\n    transition:\"background-color .25s,color .25s,box-shadow .25s\",\r\n    boxShadow:\"0 8px 42px -8px rgb(0 0 0 / 20%)\",\r\n    border:\"1px solid #f0f0f0\",\r\n    [theme.breakpoints.down(\"md\")]:{\r\n        height:\"unset\"\r\n    }\r\n\r\n    }\r\n\r\n,\r\n    titulo:{\r\n\r\n        fontWeight:\"500\",\r\n        fontFamily:\"nunito\"\r\n    }\r\n,\r\n        tituloGeneral:{\r\n\r\n        fontWeight:\"700\",\r\n        fontFamily:\"Lato\",\r\n        fontSize:\"27px\"\r\n        }\r\n,\r\ndivTituloGeneral:{\r\n        margin:\"0px auto\",\r\n        width:\"85vw\"\r\n},\r\nfecha:{\r\n        fontWeight:\"500\",\r\n        fontFamily:\"nunito\",\r\n        paddingTop:\"5px\",\r\n        color:\"#717171\"\r\n},\r\ncontenedor:{\r\n        margin:\"18px auto\"\r\n},\r\nresumen:{\r\n        fontFamily:\"nunito\",\r\n        margin:\"15px auto\"\r\n},\r\ndiveditarborrar:{\r\n        position:\"absolute\",\r\n        bottom:\"0\",\r\n        right:\"9px\",\r\n        width:\"90px\"\r\n},\r\ndivFoto:{\r\n\r\n        width:\"250px\",\r\n        height:\"160px\",\r\n        border:\"2px dashed #21cbce\",\r\n        display:\"block\",\r\n        margin:\"16px auto\",\r\n        position:\"relative\",\r\n        [theme.breakpoints.down(\"sm\")]:{\r\n                margin:\"30px auto\"\r\n        }\r\n    },\r\n    divImagen:{\r\n\r\n         height:\"160px\",\r\n         width:\"260px\",\r\n         backgroundSize:\"260px auto\",\r\n         backgroundRepeat:\"no-repeat\",\r\n         backgroundPosition:\"50%\",\r\n         borderRadius:\"16px\",\r\n         display:\"block\",\r\n         margin:\"auto\",\r\n         marginTop:\"15px\",\r\n         [theme.breakpoints.down(\"sm\")]:{\r\n                 marginTop:\"30px\"\r\n         }\r\n\r\n\r\n\r\n      },\r\n\r\n    imgFoto:{\r\n        color:\"#21cbce\",\r\n        position:\"absolute\",\r\n        margin:\"auto\",\r\n        top:\"0\",\r\n        bottom:\"0\",\r\n        left:\"0\",\r\n        right:\"0\",\r\n        fontSize:\"3rem\"\r\n    },\r\n    cajaMeGusta:{\r\n            position:'absolute',\r\n            top:'8px',\r\n            right:'12px',\r\n    [theme.breakpoints.down(\"sm\")]:{\r\n            position:'unset'\r\n    }\r\n\r\n\r\n    },\r\n    divCircular:{\r\n        marginTop:\"100px\"\r\n\r\n    }\r\n    ,botonLikes:{\r\n        color:\"#35b37c\",\r\n        margin:\"8px 0px 0x 0px\",\r\n        border:\"1px solid\"\r\n\r\n\r\n    },\r\n    margenChip:{\r\n\r\n        margin:\"0px 3px\",\r\n        [theme.breakpoints.down(\"sm\")]:{\r\n\r\n                margin:\"0px 4px\"\r\n        }\r\n\r\n\r\n    },\r\n    circular:{\r\n        height:\"72px !important\",\r\n        width:\"72px !important\",\r\n        display:\"block\",\r\n        margin:\"auto\"\r\n        },\r\n        divTexto:{\r\n                [theme.breakpoints.down(\"md\")]:{\r\n\r\n                        margin:\"0vw 5vw 0\"\r\n                },\r\n\r\n\r\n\r\n                [theme.breakpoints.down(\"sm\")]:{\r\n\r\n                        margin:\"5vw 5vw 0\"\r\n                }\r\n        },\r\n        textNoDisponible:{\r\n\r\n\r\n                fontFamily:\"Nunito\",\r\n                color:\"#808080\"\r\n\r\n\r\n\r\n\r\n        },\r\n        centrarComponente:{\r\n                textAlign:\"end\",\r\n                marginRight:\"10px\",\r\n                [theme.breakpoints.down(\"md\")]:{\r\n\r\n                        textAlign:\"center\",\r\n                }\r\n\r\n        },\r\n        botonPdf:{\r\n                position:\"absolute\",\r\n                bottom:\"55px\",\r\n                right:'0px',\r\n                [theme.breakpoints.down(\"sm\")]:{\r\n                        position:'unset'\r\n                }\r\n        }\r\n,\r\n        textUpVote:{\r\n           fontFamily:\"nunito\",\r\n           textAlign:\"center\",\r\n           color:\"#808080\"     \r\n        }\r\n\r\n\r\n\r\n\r\n\r\n }))\r\n\r\n\r\n\r\n\r\nconst Caja = (props) => {\r\n\r\n    const history = useHistory();\r\n    const clases =estilos()\r\n    const usuario =useContext(UsuarioContext)\r\n    const [listapaper,setlistapaper]=useState([])\r\n    const [cargando, setcargando] = useState(false)\r\n    const [cargandodos, setcargandodos] = useState(false)\r\n    const [paper, setpaper] = useState({})\r\n    const [ultimoDocumento, setultimoDocumento] = useState(0)\r\n   const [vacio, setvacio] = useState(false)\r\n  const [tituloGeneral,setTituloGeneral]=useState(\"The Lastest\")\r\n\r\n\r\n\r\n  \r\n\r\n\r\n      \r\n const listadepaper=async(recientes,valorados)=>{\r\n        console.log(\"inicio\")\r\n\r\n        try {\r\n\r\n        if(recientes){\r\n                setlistapaper([])\r\n                await firebase.db.collection(\"paper\").orderBy(\"subida\",\"desc\").limit\r\n                (5).get().then((coleccion)=>\r\n                {\r\n\r\n                            if(coleccion.size!=0){\r\n                                        console.log(\"paso por aca \")\r\n                                        const lista =coleccion.docs.map((paperObje)=>{return {...paperObje.data(),\r\n                                        click:false\r\n                                        }})\r\n                                        setultimoDocumento(lista[lista.length-1].id)\r\n                                        setlistapaper((listapaper)=>[...listapaper,...lista])\r\n                                        setcargando(false)\r\n\r\n                                }\r\n                                if(coleccion.length==5){\r\n                                        setvacio(true)\r\n                                }else{\r\n                                        setvacio(false)\r\n                                }\r\n\r\n                }\r\n\r\n                )\r\n        }else{\r\n                if(valorados){\r\n                        setlistapaper([])\r\n                       await  firebase.db.collection(\"paper\").orderBy(\"likes\",\"desc\").limit(5).get().then((coleccion)=>\r\n                        {\r\n\r\n                                    if(coleccion.size!=0){\r\n\r\n                                                const lista =coleccion.docs.map((paperObje)=>paperObje.data())\r\n                                                setultimoDocumento(lista[lista.length-1].id)\r\n                                                setlistapaper((listapaper)=>[...listapaper,...lista])\r\n                                                setcargando(false)\r\n\r\n                                        }\r\n                                        if(coleccion.length==5){\r\n                                                setvacio(true)\r\n                                        }else{\r\n                                                setvacio(false)\r\n                                        }\r\n\r\n                        }\r\n\r\n                        )\r\n                }else{\r\n\r\n                         let nuevalista=[]\r\n                            await firebase.db.collection(\"paper\").orderBy(\"id\",\"desc\").limit(5).get().then(valor=>{\r\n\r\n\r\n                                nuevalista=valor.docs.map(doc=>{\r\n\r\n                                                          return{\r\n                                                                id:doc.id,\r\n                                                                ...doc.data()\r\n                                                            }\r\n\r\n                                })\r\n\r\n                                if(nuevalista.length==5){\r\n                                        setvacio(true)\r\n                                }else{\r\n                                        setvacio(false)\r\n                                }\r\n\r\n                                if(nuevalista.length==0){\r\n                                        setultimoDocumento(0)\r\n                                }else{\r\n                                setultimoDocumento(nuevalista[nuevalista.length-1].id)\r\n                                 }\r\n\r\n\r\n                           })\r\n\r\n\r\n\r\n\r\n                           console.log(\"paso por aca \")\r\n                        setlistapaper(nuevalista)\r\n\r\n\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n        }\r\n\r\n        } catch (error) {\r\n                console.log(error)\r\n        }\r\n        console.log(\"final\")\r\n\r\n        setcargando(false)\r\n }\r\n\r\n//  const  manejarSnapshot=(snapshot)=>{\r\n\r\n\r\n\r\n//         console.log(listapaper)\r\n//         const  lista =snapshot.docs.map(doc=>{\r\n//             return{\r\n//                 id:doc.id,\r\n//                 ...doc.data()\r\n//             }\r\n//         })\r\n//         console.log(lista)\r\n//         setcargando(false)\r\n\r\n//                 if(lista.length!=0){\r\n//                         setvacio(false)\r\n//                         setultimoDocumento(lista[lista.length-1].id)\r\n\r\n//                 }else{\r\n\r\n//                         setvacio(true)\r\n\r\n//                 }\r\n//         setlistapaper(lista)\r\n//     }\r\n\r\n\r\n\r\n\r\n\r\n//nueva funcion de busqueda\r\n\r\nconst buscarTexto=async(texto_busqueda,recientes,valorados)=>{\r\n\r\n\r\n        setcargando(true)\r\n\r\n        try {\r\n\r\n                if(recientes){\r\n                        console.log(texto_busqueda)\r\n                        setlistapaper([])\r\n                        await firebase.db.collection(\"paper\").orderBy(\"busqueda\")\r\n                        .startAt(texto_busqueda).endAt(texto_busqueda+'\\uf8ff')\r\n                       .limit(5).get().then((coleccion)=>\r\n                        {\r\n\r\n                                    if(coleccion.size!=0){\r\n\r\n                                                const lista =coleccion.docs.map((paperObje)=>paperObje.data())\r\n                                                console.log(lista)\r\n                                                console.log(listapaper)\r\n\r\n\r\n                                                setultimoDocumento(lista[lista.length-1].id)\r\n                                                setlistapaper((listapaper)=>[...listapaper,...lista])\r\n                                                setcargando(false)\r\n\r\n                                        }\r\n                                        if(coleccion.length==5){\r\n                                                setvacio(true)\r\n                                        }else{\r\n                                                setvacio(false)\r\n                                        }\r\n\r\n                        }\r\n\r\n                        )\r\n                }else{\r\n                        // if(valorados){\r\n                        //         setlistapaper([])\r\n                        //        await  firebase.db.collection(\"paper\").orderBy(\"likes\",\"desc\").limit(5).get().then((coleccion)=>\r\n                        //         {\r\n\r\n                        //                     if(coleccion.size!=0){\r\n\r\n                        //                                 const lista =coleccion.docs.map((paperObje)=>paperObje.data())\r\n                        //                                 setultimoDocumento(lista[lista.length-1].id)\r\n                        //                                 setlistapaper((listapaper)=>[...listapaper,...lista])\r\n                        //                                 setcargando(false)\r\n\r\n                        //                         }\r\n                        //                         if(coleccion.length==5){\r\n                        //                                 setvacio(true)\r\n                        //                         }else{\r\n                        //                                 setvacio(false)\r\n                        //                         }\r\n\r\n                        //         }\r\n\r\n                        //         )\r\n                        // }else{\r\n\r\n                        //          let nuevalista=[]\r\n                        //             await firebase.db.collection(\"paper\").orderBy(\"id\",\"desc\").limit(5).get().then(valor=>{\r\n\r\n\r\n                        //                 nuevalista=valor.docs.map(doc=>{\r\n\r\n                        //                                           return{\r\n                        //                                                 id:doc.id,\r\n                        //                                                 ...doc.data()\r\n                        //                                             }\r\n\r\n                        //                 })\r\n\r\n                        //                 if(nuevalista.length==5){\r\n                        //                         setvacio(true)\r\n                        //                 }else{\r\n                        //                         setvacio(false)\r\n                        //                 }\r\n\r\n                        //                 if(nuevalista.length==0){\r\n                        //                         setultimoDocumento(0)\r\n                        //                 }else{\r\n                        //                 setultimoDocumento(nuevalista[nuevalista.length-1].id)\r\n                        //                  }\r\n\r\n\r\n                        //            })\r\n\r\n\r\n\r\n\r\n                        //            console.log(\"paso por aca \")\r\n                        //         setlistapaper(nuevalista)\r\n\r\n\r\n\r\n\r\n\r\n\r\n                        // }\r\n\r\n\r\n                }\r\n\r\n                } catch (error) {\r\n                        console.log(error)\r\n                }\r\n\r\n\r\n\r\n                setcargando(false)\r\n\r\n\r\n\r\n}\r\n\r\n\r\nconst pedirpaper=()=>{\r\n\r\n//buscar si  ahi un paper en especifico\r\n//\r\nsetcargando(true)\r\n\r\nconst {papermatch}=props.paperid\r\n\r\nif(papermatch){\r\n\r\n        buscarPorId(papermatch)\r\n\r\n}else{\r\n\r\n  // LLAMAR A LOS PAPER\r\n\r\n\r\n\r\n  listadepaper(props.recientes,props.valorados)\r\n\r\n}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst borrar=(e)=>{\r\n\r\n\r\n\r\n\r\n        Swal.fire({\r\n                title: '¿Esta seguro que desea borrar el siguiente registro?',\r\n                text:`${e.titulo}`,\r\n                showDenyButton: true,\r\n                confirmButtonColor: '#21cbce',\r\n                confirmButtonText: `Borrar`,\r\n                denyButtonText: `Cancelar`,\r\n              }).then((result) => {\r\n                /* Read more about isConfirmed, isDenied below */\r\n\r\n                 if (result.isConfirmed) {\r\n                                firebase.db.collection(\"paper\").doc(e.id).delete().then(() => {\r\n                                        let nuevaLista=[]\r\n                                        listapaper.map((valor)=>{\r\n                                                        if(valor.id!=e.id){\r\n                                                                console.log(valor)\r\n                                                                nuevaLista.push(valor)\r\n                                                        }\r\n\r\n                                        })\r\n\r\n\r\n                                        //pedirpaper()\r\n\r\n                                console.log(\"borrado\")\r\n\r\n                                }).catch((error) => {\r\n                                        console.error(\"Error removing document: \", error);\r\n                                });\r\n\r\n\r\n                                e.etiquetas.map( valor=>{\r\n\r\n                                        firebase.db.collection(\"etiquetas\").doc(valor.id).collection(\"paper\").doc(e.id).delete().then(async() => {\r\n                                             //  console.log(\"Document successfully deleted!\");\r\n\r\n\r\n\r\n                                              let soloTag=await firebase.db.collection(\"etiquetas\").doc(valor.id).get().then((doc)=>{\r\n\r\n\r\n                                                        return{...doc.data()}\r\n\r\n                                              })\r\n\r\n                                                console.log(soloTag)\r\n                                                let nuevoObjeto={  ...soloTag,\r\n                                                        contar:soloTag.contar-1}\r\n\r\n                                                  console.log(nuevoObjeto)\r\n\r\n                                                firebase.db.collection(\"etiquetas\").doc(valor.id).set(nuevoObjeto)\r\n\r\n\r\n                                        }).catch((error) => {\r\n                                            console.error(\"Error removing document: \", error);\r\n                                        });\r\n\r\n\r\n                                    })\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                   try {\r\n                                        var  borrarArchivo= firebase.storage.ref().child(\"PDF\").child(e.id)\r\n                                        var  borrarImagen= firebase.storage.ref().child(\"IMAGEN\").child(e.id)\r\n\r\n\r\n                                   } catch (error) {\r\n                                    console.log(error)\r\n                                   }\r\n\r\n\r\n\r\n\r\n                              console.log(borrarArchivo)\r\n                              console.log(borrarImagen)\r\n\r\n\r\n                                   if(borrarArchivo!=undefined){\r\n                                                borrarArchivo.delete().then(function() {\r\n                                                        //console.log(\"borrado\")\r\n                                                        // File deleted successfully\r\n                                                }).catch(function(error) {\r\n\r\n                                                                console.log(error)\r\n                                                        //console.log(error)\r\n                                                        // Uh-oh, an error occurred!m\r\n                                                });\r\n\r\n                                        }\r\n                                if(borrarImagen!=undefined){\r\n\r\n\r\n                                                if(e.imagen!=null){ borrarImagen.delete().then(function() {\r\n                                                                //console.log(\"borrado\")\r\n                                                        // File deleted successfully\r\n                                                        }).catch(function(error) {\r\n                                                                console.log(error)\r\n                                                        // Uh-oh, an error occurred!\r\n                                                        }); }\r\n                                }\r\n\r\n\r\n                  Swal.fire({title:'Borrado!', confirmButtonColor:'#21cbce',icon: 'success'}).then(()=>{\r\n                          pedirpaper()\r\n                  })\r\n                } else if (result.isDenied) {\r\n\r\n                }\r\n              })\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n useEffect(() => {\r\n\r\n//buscar si  ahi un paper en especifico\r\n//\r\nsetcargando(true)\r\n\r\nconst {papermatch}=props.paperid\r\n\r\nif(papermatch){\r\n\r\n        buscarPorId(papermatch)\r\n\r\n}else{\r\n\r\n  // LLAMAR A LOS PAPER\r\n\r\n\r\n\r\n  listadepaper(props.recientes,props.valorados)\r\n\r\n}\r\n\r\n                // if(props.busqueda!=undefined){\r\n                //         const texto_busqueda=props.busqueda.buscado\r\n                //         buscarTexto(texto_busqueda,props.recientes,props.valorados)\r\n                // }\r\n                //else{\r\n                // pedirpaper()\r\n                // }\r\n\r\n                //    console.log(listapaper)\r\n                //    setlistapaper([])\r\n\r\n }, [props.recientes,props.paperid,props.busqueda])\r\n\r\n\r\n\r\n\r\n const funcionCorazon=(valor)=>{\r\n\r\n        let votos_usuarios=[]\r\n\r\n        if(valor.haVotado==undefined){\r\n                console.log(\"paso por aca dodo\")\r\n                return false\r\n        }else{\r\n\r\n        votos_usuarios=valor.haVotado\r\n        if(votos_usuarios.length==0){\r\n                console.log(\"paso por aca dodo\")\r\n                return false\r\n        }else{\r\n\r\n                if(usuario!=undefined){\r\n                if(votos_usuarios.includes(usuario.uid)){\r\n                        return true\r\n                }else{\r\n                        return false\r\n                }}\r\n\r\n        }\r\n}\r\n\r\n\r\n\r\n }\r\n\r\n\r\n\r\n\r\n const funcionCorazondos=(valor)=>{\r\n\r\n             if(valor.likes>0){\r\n                 return true       \r\n             }else{\r\n                return false\r\n             }\r\n\r\n\r\n\r\n }\r\n\r\n\r\n\r\n\r\n\r\n  const pedirMas=async()=>{\r\n                setcargandodos(true)\r\n                const recientes=props.recientes\r\n                const valorados=props.valorados\r\n                const paperRef=firebase.db.collection(\"paper\")\r\n\r\n\r\n        try {\r\n\r\n                if(recientes){\r\n\r\n\r\n\r\n\r\n                        return paperRef.doc(ultimoDocumento).get().then(async(doc)=>\r\n                        {\r\n                           //     console.log(doc)\r\n                          var valoradosOrdenados = await paperRef.orderBy(\"subida\",\"desc\").startAfter(doc).limit(5).get()\r\n\r\n                                if(valoradosOrdenados.size!=0){\r\n\r\n                             //      console.log(valoradosOrdenados)\r\n                                 const lista =valoradosOrdenados.docs.map((paperObje)=>paperObje.data())\r\n                                 setultimoDocumento(lista[lista.length-1].id)\r\n                                 setlistapaper((listapaper)=>[...listapaper,...lista])\r\n                                 setcargandodos(false)\r\n                        }else{\r\n\r\n                                setvacio(false)\r\n                                setcargandodos(false)\r\n                          }\r\n\r\n                        }\r\n                        )\r\n\r\n\r\n\r\n\r\n\r\n\r\n                }else{\r\n\r\n\r\n                        if(valorados){\r\n\r\n\r\n\r\n                                // const valoradosRef=firebase.db.collection(\"paper\")\r\n\r\n                                return paperRef.doc(ultimoDocumento).get().then(async(doc)=>\r\n                                {\r\n                                        console.log(doc)\r\n                                  var valoradosOrdenados = await paperRef.orderBy(\"likes\",\"desc\").startAfter(doc).limit(5).get()\r\n\r\n                                        if(valoradosOrdenados.size!=0){\r\n\r\n                                           console.log(valoradosOrdenados)\r\n                                         const lista =valoradosOrdenados.docs.map((paperObje)=>paperObje.data())\r\n                                         setultimoDocumento(lista[lista.length-1].id)\r\n                                         setlistapaper((listapaper)=>[...listapaper,...lista])\r\n                                         setcargandodos(false)\r\n\r\n                                }else{\r\n\r\n                                        setvacio(false)\r\n                                        setcargandodos(false)\r\n                                  }\r\n\r\n                                }\r\n                                )\r\n\r\n\r\n                                // firebase.db.collection(\"paper\").orderBy(\"likes\",\"desc\").startAfter(ultimoDocumento).limit(5).get().then((coleccion)=>\r\n                                // {\r\n\r\n\r\n                                //                 console.log(\"dentro de la coleccion \")\r\n\r\n                                //             if(coleccion.size!=0){\r\n\r\n                                //                         const lista =coleccion.docs.map((paperObje)=>paperObje.data())\r\n                                //                         setultimoDocumento(lista[lista.length-1].likes)\r\n                                //                         setlistapaper((listapaper)=>[...listapaper,...lista])\r\n\r\n                                //                 }else{\r\n\r\n                                //                       setvacio(true)\r\n                                //                 }\r\n                                // }\r\n\r\n                                // )\r\n                        }else{\r\n\r\n\r\n                                return paperRef.doc(ultimoDocumento).get().then(async(doc)=>\r\n                                {\r\n                                        //console.log(doc)\r\n                                  var valoradosOrdenados = await paperRef.orderBy(\"id\",\"desc\").startAfter(doc).limit(5).get()\r\n\r\n                                        if(valoradosOrdenados.size!=0){\r\n\r\n                                          // console.log(valoradosOrdenados)\r\n                                         const lista =valoradosOrdenados.docs.map((paperObje)=>paperObje.data())\r\n                                         setultimoDocumento(lista[lista.length-1].id)\r\n                                         setlistapaper((listapaper)=>[...listapaper,...lista])\r\n                                         setcargandodos(false)\r\n\r\n                                }else{\r\n\r\n                                        setvacio(false)\r\n                                        setcargandodos(false)\r\n                                  }\r\n\r\n                                }\r\n                                )\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                // comentar\r\n                        //       firebase.db.collection(\"paper\").orderBy(\"id\",\"desc\").startAfter(ultimoDocumento).limit(1).get().then((coleccion)=>\r\n                        //         {\r\n\r\n                        //                     if(coleccion.size!=0){\r\n\r\n                        //                                 const lista =coleccion.docs.map((paperObje)=>paperObje.data())\r\n                        //                                 setultimoDocumento(lista[lista.length-1])\r\n                        //                                 setlistapaper((listapaper)=>[...listapaper,...lista])\r\n\r\n                        //                         }else{\r\n\r\n                        //                               setvacio(true)\r\n                        //                         }\r\n                        //         }\r\n\r\n                        //         )\r\n                        }\r\n\r\n\r\n                }\r\n\r\n                } catch (error) {\r\n                        console.log(error)\r\n                }\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n // buscar por id del paper\r\n\r\n  const buscarPorId=async(id)=>{\r\n//  alert(id)\r\n  var variable=await firebase.db.collection(\"paper\").doc(id)\r\n //console.log(variable)\r\n\r\n\r\n variable.get().then((doc) => {\r\n        // Document was found in the cache. If no cached document exists,\r\n        // an error will be returned to the 'catch' block below.\r\n       // console.log(\"Cached document data:\", doc.data());\r\n        setlistapaper([doc.data()])\r\n\r\n        setcargando(false)\r\n        setvacio(false)\r\n\r\n    }).catch((error) => {\r\n        console.log(\"Error getting cached document:\", error);\r\n    });\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n  const buscarChips=(valor)=>{\r\n\r\n\r\n        history.push(`/tag/${valor.id}`)\r\n\r\n  }\r\n\r\n\r\n\r\nconst megusta=(valor)=>{\r\n\r\n\r\n        // if(usuario==null) {\r\n        //         return history.push(\"/login\")\r\n        // }\r\n\r\n\r\n\r\n\r\n          console.log(valor.haVotado)\r\n\r\n        if(valor.haVotado==undefined){\r\n                var antiguoHaVotado=[]\r\n         }else{\r\n                var antiguoHaVotado=valor.haVotado\r\n         }\r\n\r\n\r\n     if(antiguoHaVotado.includes(usuario.uid)){\r\n             console.log(antiguoHaVotado)\r\n\r\n        antiguoHaVotado=antiguoHaVotado.filter(function(obj){\r\n                return obj!==usuario.uid\r\n        })\r\n        valor.likes=valor.likes-1\r\n\r\n        let  nuevoValor={\r\n                ...valor,\r\n                 likes:valor.likes,\r\n                haVotado:antiguoHaVotado\r\n        }\r\n\r\n\r\n        firebase.db.collection(\"paper\").doc(valor.id).update(nuevoValor)\r\n\r\n\r\n        // armar de nuevo el arreglo con el valor\r\n\r\n         armararreglo(nuevoValor)\r\n\r\n       // mapear etiquetas\r\n\r\n        valor.etiquetas.map(valordos=>{\r\n                firebase.db.collection(\"etiquetas\").doc(valordos.id).collection(\"paper\").doc(valor.id).update({\r\n                        ...valor,\r\n                        likes:valor.likes,\r\n                       haVotado:antiguoHaVotado\r\n\r\n                })\r\n        })\r\n\r\n\r\n         //setpaper({...valor,likes:valor.likes})\r\n        // actualizar la etiquetas\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n     }else{\r\n\r\n     const nuevoHaVotado = [...antiguoHaVotado, usuario.uid];\r\n     valor.likes=valor.likes+1\r\n\r\n\r\n     let  nuevoValor={\r\n        ...valor,\r\n         likes:valor.likes,\r\n        haVotado:nuevoHaVotado\r\n        }\r\nfirebase.db.collection(\"paper\").doc(valor.id).update(nuevoValor)\r\n\r\n      // mapear etiquetas\r\n\r\n      valor.etiquetas.map(valordos=>{\r\n        firebase.db.collection(\"etiquetas\").doc(valordos.id).collection(\"paper\").doc(valor.id).update({\r\n                ...valor,\r\n                likes:valor.likes,\r\n                haVotado:nuevoHaVotado\r\n\r\n        })\r\n})\r\n\r\narmararreglo(nuevoValor)\r\n     //setpaper({...valor,likes:valor.likes})\r\n\r\n      }\r\n      console.log(\"final\")\r\n}\r\n\r\n\r\nconst megustaSinValidarUsuario=(valor)=>{\r\n    \r\n\r\n   if(valor.click){    \r\n     valor.likes=valor.likes-1\r\n     valor.click=false\r\n}else{\r\n     valor.likes=valor.likes+1\r\n     valor.click=true\r\n}\r\n\r\n     const nuevoHaVotado = [];\r\n     let  nuevoValor={\r\n        ...valor,\r\n         likes:valor.likes,\r\n        haVotado:nuevoHaVotado\r\n        }\r\n\r\n\r\n\r\n       //guarda datos en el paper\r\n       firebase.db.collection(\"paper\").doc(valor.id).update({\r\n        ...valor,\r\n        likes:valor.likes,\r\n        haVotado:nuevoHaVotado\r\n\r\n})\r\n\r\n      // mapear etiquetas\r\n      valor.etiquetas.map(valordos=>{\r\n\r\n        //guarda datos  en las etiquetas\r\n        firebase.db.collection(\"etiquetas\").doc(valordos.id).collection(\"paper\").doc(valor.id).update({\r\n                ...valor,\r\n                likes:valor.likes,\r\n                haVotado:nuevoHaVotado\r\n\r\n        })\r\n})\r\n\r\narmararreglo(nuevoValor)\r\n     //setpaper({...valor,likes:valor.likes})\r\n\r\n     // }\r\n      console.log(\"final\")\r\n}\r\n\r\nconst armararreglo=(nuevoValor)=>{\r\n\r\n\r\n                 let   nuevalista=listapaper.map(valor=>{\r\n\r\n                                if (nuevoValor.id==valor.id){\r\n\r\n                                        return{\r\n                                                ...nuevoValor\r\n                                        }\r\n                                }else{\r\n\r\n                                        return{ ...valor}\r\n                                }\r\n\r\n\r\n\r\n                 })\r\n\r\n\r\n                 console.log(nuevalista)\r\n                 setlistapaper(nuevalista)\r\n\r\n\r\n}\r\n\r\n\r\n\r\n    return (\r\n\r\n\r\n\r\n// <Button onClick={()=>{pedirMas()}} >\r\n//                             ver mas\r\n// </Button>\r\n\r\n\r\n\r\n\r\n\r\n        <div  className={clases.margen}>\r\n\r\n\r\n                <div className={clases.divTituloGeneral}>\r\n\r\n                <Grid container>\r\n                <Grid xs={8} md={7}>\r\n                         <Typography variant=\"h4\" className={clases.tituloGeneral}>\r\n                                {props.textoGeneral}\r\n                        </Typography>\r\n                </Grid>\r\n\r\n                <Grid xs={4} md={5}>\r\n\r\n                <Button\r\n                id='mandarina'\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        size=\"small\"\r\n        className={clases.button}\r\n        startIcon={<SaveIcon />}\r\n      >\r\n        Lastest\r\n      </Button> <Button\r\n         id='verde'\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        size=\"small\"\r\n        className={clases.button}\r\n        startIcon={<SaveIcon />}\r\n      >\r\n        Popular\r\n      </Button>\r\n       <Button\r\n         id='morado'\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        size=\"small\"\r\n        className={clases.button}\r\n        startIcon={<SaveIcon />}\r\n      >\r\n        People\r\n      </Button> \r\n      <Button\r\n        id='azul'\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        size=\"small\"\r\n        className={clases.button}\r\n        startIcon={<SaveIcon />}\r\n      >\r\n        Personal Health\r\n      </Button>\r\n\r\n\r\n                               \r\n\r\n                </Grid>\r\n                </Grid>\r\n                </div>\r\n\r\n                <Grid container>\r\n                    <Grid  xs={12}>\r\n                            {\r\n                            cargando?\r\n                            <div className={clases.divCircular} >\r\n                            <CircularProgress className={clases.circular}></CircularProgress>\r\n                        </div>\r\n                        :<div>\r\n                           { listapaper.length==0 ?\r\n                              <Typography className={clases.\r\n                              textNoDisponible\r\n                               } align=\"center\" variant=\"h4\">\r\n                                        No hay registros\r\n                              </Typography>\r\n\r\n\r\n                           :\r\n\r\n                           <div>\r\n                                {\r\n\r\n                            listapaper.map((valor)=>(\r\n\r\n                                        <Paper key={valor.id} className={clases.caja} elevation={3}>\r\n                                        <Grid container  className={clases.contenedor}>\r\n                                                <Grid xs={12} sm={12} md={9}>\r\n\r\n\r\n                                                    <Grid container >    \r\n                                                        <Grid xs={12} sm={12} md={4} >\r\n                                                                <div  >\r\n\r\n                                                                {valor.imagen==null?\r\n\r\n                                                                <div className={clases.divFoto}>\r\n                                                                                < AddAPhotoIcon className={clases.imgFoto}></AddAPhotoIcon>\r\n\r\n                                                                </div> :\r\n                                                                <div   className={clases.divImagen} style={{\r\n                                                                backgroundImage:`url(${valor.imagen})`,\r\n\r\n                                                                }} >\r\n\r\n\r\n                                                                        </div>\r\n\r\n                                                                }\r\n                                                                </div>\r\n                                                              \r\n\r\n                                                        </Grid>\r\n\r\n\r\n                                                        <Grid  xs={12} sm={12} md={8}>\r\n                                                        <div className={clases.divTexto}>\r\n                                                        \r\n                                                        <Typography variant=\"h5\" className={clases.titulo} >\r\n                                                                        {valor.info==true?\r\n\r\n                                                                        <a  style={{textDecoration:\"none\"}} href={`/information/${valor.id}`} >\r\n\r\n\r\n                                                                           {valor.titulo}\r\n                                                                        </a>        \r\n                                                                        :\r\n                                                                         valor.titulo\r\n                                                                        }\r\n                                                        </Typography>\r\n\r\n                                                                <Typography className={clases.fecha} variant=\"subtitle2\">\r\n                                                                        {moment(new Date(valor.subida.seconds*1000)).format(\"D MMM YYYY\")}\r\n                                                        </Typography>\r\n\r\n\r\n\r\n\r\n\r\n                                                        <Typography variant=\"body2\" className={clases.resumen}>\r\n                                                                {valor.resumen}\r\n                                                        </Typography>\r\n\r\n                                                    \r\n\r\n                                                        </div>\r\n\r\n                                                        </Grid>\r\n                                                                        \r\n                                                             \r\n                                                        <Grid xs={12} sm={12} md={4}>\r\n                                                                <Typography variant=\"subtitle1\" align=\"center\">  \r\n                                                                aplicaciones en :\r\n                                                                </Typography>\r\n\r\n                                                                \r\n                                                          </Grid>    \r\n\r\n                                                           <Grid xs={12} sm={12} md={8}>\r\n\r\n                                                                <Typography variant=\"subtitle1\">\r\n\r\n                                                                        {valor.etiquetas.map((valor)=>(\r\n                                                                        //      <Link style={{textDecoration:\"none\"}} to={`/etiquetas/${valor}`}>\r\n                                                                        <Chip variant=\"outlined\"  className={clases.margenChip} onClick={()=>buscarChips(valor)} color=\"primary\" size=\"small\" label={valor.descripcion} />\r\n                                                                        //    </Link>\r\n                                                                                        ))}\r\n\r\n\r\n                                                                </Typography>\r\n                                                                \r\n                                                                \r\n                                                          </Grid>                     \r\n                                                     </Grid>\r\n                                                \r\n                                                \r\n                                                 </Grid>  \r\n                                        <Grid xs={12} sm={12} md={2}>\r\n                                                        <div className={clases.cajaMeGusta}>\r\n                                                                        <Typography className={clases.centrarComponente} variant=\"subtitle1\" >\r\n\r\n                                                                        <Button onClick={()=>megustaSinValidarUsuario(valor)}\r\n                                                                        className={clases.botonLikes}\r\n                                                                        startIcon={\r\n\r\n                                                                        funcionCorazondos(valor)?\r\n                                                                        // <CorazonLleno></CorazonLleno>\r\n                                                                        <>\r\n                                                                        <img height=\"25\" src={CorazonLleno}></img>\r\n                                                                        \r\n                                                                        </>\r\n                                                                        :\r\n\r\n                                                                        //  <Corazon></Corazon>\r\n                                                                        <>\r\n                                                                        <img  height=\"25\"  src={Corazon}></img>\r\n                                                                \r\n                                                                        </>\r\n\r\n                                                                }\r\n                                                                        >\r\n\r\n                                                                                {valor.likes}\r\n                                                                        </Button>\r\n\r\n                                                                        <Typography className={clases.textUpVote} variant='subtitle2' >\r\n                                                                        upvote\r\n                                                                        </Typography>\r\n                                                                        \r\n\r\n                                                        </Typography>\r\n                                                        </div>\r\n                                                \r\n                                                \r\n                                                \r\n                                                <div className={clases.botonPdf}>\r\n                                                        <Typography  className={clases.centrarComponente} variant=\"subtitle1\"\r\n                                                                >\r\n\r\n\r\n\r\n\r\n                                                        <a href={valor.pdf==null?\r\n                                                        valor.link:valor.pdf\r\n                                                        }  style={{textDecoration:\"none\"}} target=\"_blank\">\r\n                                                        <Button  className=\"botoneditar\" variant=\"contained\"\r\n\r\n                                                \r\n\r\n                                                        >\r\n\r\n                                                                get it\r\n                                                        </Button>\r\n\r\n                                                        </a>\r\n\r\n                                                        </Typography>\r\n                                                        </div>        \r\n\r\n                                                {usuario==null?\r\n\r\n\r\n\r\n                                                                <div></div>\r\n                                                                :\r\n\r\n\r\n                                                                usuario.administrador?\r\n\r\n                                                                <div className={clases.diveditarborrar}>\r\n\r\n                                                                <Grid container>\r\n\r\n                                                                        <Grid xs={6}>\r\n\r\n                                                                                <Typography variant=\"subtitle1\" align=\"center\">\r\n                                                                           \r\n                                                                                        {/* <Link to={`/editarpaper/${valor.id}`}> */}\r\n                                                                                                \r\n                                                                                                <BotonMenu setlistapaper={setlistapaper} id={valor.id}></BotonMenu>\r\n                                   \r\n\r\n                                                                                        {/* </Link> */}\r\n\r\n                                                                                </Typography>\r\n                                                                        </Grid>\r\n                                                                        <Grid  xs={6}>\r\n                                                                                <Typography variant=\"subtitle1\" align=\"center\">\r\n\r\n                                                                                <IconButton  variant=\"contained\"  color=\"primary\"  onClick={()=>borrar(valor)}>\r\n                                                                                        <Basurero></Basurero>\r\n                                                                                </IconButton>\r\n\r\n                                                                                </Typography>\r\n                                                                        </Grid>\r\n                                                                </Grid>\r\n                                                </div>\r\n\r\n                                                        :\r\n                                                        <div></div>\r\n\r\n                                                                }\r\n        </Grid>\r\n\r\n\r\n\r\n                                         </Grid>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                        </Paper>\r\n                            ))\r\n                            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                            </div>\r\n                         }\r\n\r\n                            {cargandodos?\r\n\r\n<div className={clases.divCircular} >\r\n<CircularProgress className={clases.circular}></CircularProgress>\r\n</div>\r\n\r\n\r\n\r\n:\r\n\r\n// vacio==true &&\r\n\r\n        <Typography align=\"center\">\r\n        <Button\r\n\r\n                endIcon={<ExpandMoreIcon></ExpandMoreIcon>}\r\n                variant =\"contained\"\r\n                className=\"botonVerMas\"\r\n\r\n        onClick={()=>{\r\n                pedirMas()\r\n        }} >\r\n        See More\r\n\r\n                </Button>\r\n</Typography>   }\r\n\r\n\r\n\r\n\r\n\r\n\r\n                            </div>\r\n                            }\r\n\r\n\r\n\r\n\r\n                     </Grid>\r\n\r\n\r\n                </Grid>\r\n\r\n\r\n        </div>\r\n\r\n )\r\n}\r\n\r\nexport default Caja\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\Paper.jsx",["419","420","421"],"import React from 'react'\r\nimport {Paper as Papel,Grid,Typography,Chip,Button,IconButton,makeStyles,Link} from \"@material-ui/core\"\r\nimport Basurero from '@material-ui/icons/Delete';\r\nimport Lapiz from '@material-ui/icons/Create';\r\nimport InsertDriveFileIcon from '@material-ui/icons/InsertDriveFile';\r\nimport Corazon from '@material-ui/icons/FavoriteBorder';\r\nimport moment from 'moment' \r\nimport \"moment/locale/es\"\r\nimport { useState } from 'react';\r\nimport Swal from \"sweetalert2\"\r\nimport firebase from \"../firebase/firebase\"\r\nimport AddAPhotoIcon from '@material-ui/icons/AddAPhoto';\r\nimport { useContext } from 'react';\r\nimport { UsuarioContext } from '../Provedores/UsuarioContext';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n\r\nconst  estilos = makeStyles((theme)=>({\r\n\r\n\r\n    margen:{\r\n\r\n            margin:\"250px auto \",\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    },\r\n    caja:{\r\n        position:\"relative\",\r\n        width:\"80vw\",\r\n        margin:\"20px auto\",\r\n        display:\"block\",\r\n        height:\"228px\",\r\n        borderRadius:\"10px\",\r\n    transition:\"background-color .25s,color .25s,box-shadow .25s\",\r\n    boxShadow:\"0 8px 42px -8px rgb(0 0 0 / 20%)\",\r\n    border:\"1px solid #f0f0f0\",\r\n    [theme.breakpoints.down(\"md\")]:{\r\n        height:\"unset\"\r\n    },\r\n\r\n\r\n\r\n\r\n    \"& .botoneditar\":{\r\n        background:\"#1ab37c\",\r\n        color:\"#ffffff\",\r\n     \r\n        \"&:hover\": {\r\n           background:\"#ffffff\",\r\n           color:\"#1ab37c !important\",\r\n         },\r\n\r\n\r\n    },\r\n    \"& .botoneditar\":{\r\n        background:\"#1ab37c\",\r\n        color:\"#ffffff\",\r\n        marginTop:\"10px\",\r\n\r\n        \"&:hover\": {\r\n           background:\"#ffffff\",\r\n           color:\"#1ab37c !important\",\r\n         },\r\n\r\n\r\n    }\r\n\r\n\r\n    }\r\n\r\n,\r\n    titulo:{\r\n\r\n        fontWeight:\"500\",\r\n        fontFamily:\"nunito\"\r\n    }\r\n,\r\n\r\nfecha:{\r\n        fontWeight:\"500\",\r\n        fontFamily:\"nunito\",\r\n        paddingTop:\"5px\",\r\n        color:\"#717171\"\r\n},\r\n\r\ncontenedor:{\r\n        margin:\"18px auto\"\r\n\r\n},\r\nresumen:{\r\n        fontFamily:\"nunito\",\r\n        margin:\"15px auto\"\r\n},\r\ndiveditarborrar:{\r\n\r\n        position:\"absolute\",\r\n        top:\"0\",\r\n        right:\"0\",\r\n        width:\"90px\"\r\n},\r\ndivFoto:{\r\n\r\n    width:\"250px\",\r\n    height:\"160px\",\r\n    border:\"2px dashed #21cbce\",\r\n    display:\"block\",\r\n    margin:\"16px auto\",\r\n    position:\"relative\",\r\n    [theme.breakpoints.down(\"sm\")]:{\r\n        margin:\"30px auto\"\r\n}\r\n},\r\n\r\ndivImagen:{\r\n       \r\n        height:\"160px\",\r\n        width:\"260px\",\r\n        backgroundSize:\"260px auto\",\r\n        backgroundRepeat:\"no-repeat\",\r\n        backgroundPosition:\"50%\",\r\n        borderRadius:\"0\",\r\n        display:\"block\",\r\n        margin:\"auto\",\r\n        marginTop:\"15px\",\r\n        [theme.breakpoints.down(\"sm\")]:{\r\n                marginTop:\"30px\"\r\n        }\r\n}\r\n,\r\ndivTexto:{\r\n        [theme.breakpoints.down(\"md\")]:{\r\n\r\n                margin:\"0vw 5vw 0\"\r\n        },\r\n\r\n\r\n\r\n        [theme.breakpoints.down(\"sm\")]:{\r\n\r\n                margin:\"5vw 5vw 0\"\r\n        }\r\n}\r\n,\r\n\r\n\r\nimgFoto:{\r\n    color:\"#21cbce\",\r\n    position:\"absolute\",\r\n    margin:\"auto\",\r\n    top:\"0\",\r\n    bottom:\"0\",\r\n    left:\"0\",\r\n    right:\"0\",\r\n    fontSize:\"3rem\"\r\n}\r\n\r\n,\r\n    margenChip:{\r\n\r\n        [theme.breakpoints.down(\"sm\")]:{\r\n\r\n                margin:\"0px 4px\"\r\n        }\r\n       \r\n    }\r\n\r\n\r\n\r\n }))\r\n\r\n\r\n\r\n\r\n\r\nconst Paper = (props) => {\r\n    const clases =estilos()\r\n    const history = useHistory();\r\nconst usuario =useContext(UsuarioContext)\r\n\r\nconst [valor, setvalor] = useState(props.Paper)\r\nconst [paper, setpaper] = useState({})\r\n\r\n\r\nconst buscarChips=(valor)=>{\r\n        history.push(`/tag/${valor}`)\r\n      \r\n    }      \r\n\r\n\r\n\r\nconst borrar=(e)=>{\r\n\r\n\r\n\r\n\r\n    Swal.fire({\r\n            title: 'Esta seguro que desea borrar el siguiente registro?',\r\n            text:`${e.titulo}`,\r\n            showDenyButton: true,\r\n          \r\n            confirmButtonText: `Borrar`,\r\n            denyButtonText: `Cancelar`,\r\n          }).then((result) => {\r\n            /* Read more about isConfirmed, isDenied below */\r\n            if (result.isConfirmed) {\r\n\r\n                                    \r\n                            firebase.db.collection(\"paper\").doc(e.id).delete().then(() => {\r\n                                    console.log(\"Document successfully deleted!\");\r\n                            }).catch((error) => {\r\n                                    console.error(\"Error removing document: \", error);\r\n                            });\r\n              Swal.fire('Borrado!', '', 'success')\r\n            } else if (result.isDenied) {\r\n            \r\n            }\r\n          })\r\n\r\n        \r\n}\r\n\r\n\r\nconst megusta=async(valor)=>{\r\n\r\n               \r\n      console.log(valor)\r\n\r\n\r\n        if(usuario==null) {\r\n                return history.push(\"/login\")\r\n        }\r\n\r\n\r\n        \r\n          \r\n         \r\n\r\n        if(valor.haVotado==undefined){                    \r\n                var antiguoHaVotado=[]\r\n         }else{\r\n                var antiguoHaVotado=valor.haVotado\r\n         }\r\n\r\n         console.log(antiguoHaVotado)\r\n         console.log(usuario.uid)\r\n         console.log(antiguoHaVotado.includes(usuario.uid))\r\n     if(antiguoHaVotado.includes(usuario.uid)){ \r\n\r\n                antiguoHaVotado=antiguoHaVotado.filter(function(obj){\r\n                        return obj!==usuario.uid\r\n                })\r\n\r\n\r\n                console.log(antiguoHaVotado)\r\n\r\n                valor.likes=valor.likes-1\r\n                await firebase.db.collection(\"paper\").doc(valor.id).update({\r\n                        ...valor,\r\n                        likes:valor.likes,\r\n                        haVotado:antiguoHaVotado\r\n                })\r\n                \r\n                setpaper({...valor,likes:valor.likes})\r\n              \r\n\r\n     }else{ \r\n        \r\n     const nuevoHaVotado = [...antiguoHaVotado, usuario.uid];\r\n     console.log(nuevoHaVotado)\r\n     valor.likes=valor.likes+1   \r\nawait firebase.db.collection(\"paper\").doc(valor.id).update({\r\n        ...valor,\r\n         likes:valor.likes,\r\n        haVotado:nuevoHaVotado\r\n})\r\n\r\n     setpaper({...valor,likes:valor.likes})\r\n      }\r\n}\r\n\r\n\r\n    return (\r\n        <div>\r\n            \r\n\r\n\r\n\r\n\r\n            <Papel className={clases.caja} elevation={3}>\r\n\r\n\r\n<Grid container  className={clases.contenedor}>\r\n\r\n        <Grid xs={12} sm={12} md={4}>\r\n                <div>\r\n\r\n                     {valor.imagen==null?\r\n\r\n\r\n                    <div className={clases.divFoto}>\r\n                    < AddAPhotoIcon className={clases.imgFoto}></AddAPhotoIcon>  \r\n\r\n                    </div> \r\n                        \r\n                      \r\n                      \r\n                      \r\n                      :         \r\n                   <div  className={clases.divImagen} style={{\r\n                  backgroundImage:`url(${valor.imagen})`,\r\n                   \r\n                }} >\r\n\r\n                        \r\n                        </div>\r\n\r\n                     }   \r\n                </div>\r\n        </Grid>\r\n\r\n\r\n        <Grid xs={12} sm={12} md={5}>\r\n        <div className={clases.divTexto}>             \r\n\r\n\r\n        <Typography variant=\"h5\" className={clases.titulo} >\r\n                        {valor.titulo}             \r\n        </Typography>\r\n\r\n        <Typography className={clases.fecha} variant=\"subtitle2\">\r\n                        {moment(new Date(valor.subida.seconds*1000)).format(\"D MMM YYYY\")}    \r\n        </Typography>\r\n\r\n\r\n        <Typography variant=\"body2\" className={clases.resumen}>\r\n                {valor.resumen}\r\n        </Typography>\r\n\r\n        <Typography variant=\"subtitle1\">\r\n\r\n                {valor.etiquetas.map((valor)=>(\r\n                \r\n                <Chip variant=\"outlined\" className={clases.margenChip} onClick={()=>buscarChips(valor)} color=\"primary\" size=\"small\" label={valor} />\r\n                     \r\n                                ))}\r\n\r\n\r\n        </Typography>\r\n\r\n\r\n        </div>        \r\n        </Grid>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        <Grid xs={12} sm={12} md={3}>\r\n\r\n        <Typography variant=\"subtitle1\" align=\"center\">\r\n\r\n                        <Button\r\n                         onClick={()=>megusta(valor)}\r\n                        style={{color:\"#ff0000\",\r\n                        marginTop:\"40px\"\r\n                }}\r\n                        startIcon={<Corazon></Corazon>}\r\n                        >\r\n\r\n                                {valor.likes}\r\n                        </Button>\r\n\r\n        </Typography>\r\n\r\n\r\n        <Typography variant=\"subtitle1\" align=\"center\">\r\n        <a href={valor.pdf}  style={{textDecoration:\"none\"}} target=\"_blank\">                                               \r\n        <Button  className=\"botoneditar\" variant=\"contained\"\r\n        \r\n        startIcon={<InsertDriveFileIcon />}\r\n        \r\n        >\r\n\r\n                pdf \r\n        </Button>\r\n\r\n        </a>     \r\n\r\n        </Typography>\r\n\r\n          \r\n        {usuario==null?\r\n\r\n\r\n                                                      \r\n<div></div>\r\n:\r\n\r\n\r\nusuario.administrador?\r\n\r\n<div className={clases.diveditarborrar}>          \r\n\r\n<Grid container>\r\n        \r\n         <Grid xs={6}>\r\n        \r\n                <Typography variant=\"subtitle1\" align=\"center\">\r\n                        <Link to={`/editarpaper/${valor.id}`}>\r\n                                <IconButton  variant=\"outlined\" color=\"primary\">\r\n                                <Lapiz></Lapiz>\r\n                                </IconButton>\r\n                        </Link>\r\n\r\n                </Typography>\r\n        </Grid>\r\n        <Grid  xs={6}>\r\n                <Typography variant=\"subtitle1\" align=\"center\">\r\n\r\n                <IconButton  variant=\"contained\"  color=\"primary\"  onClick={()=>borrar(valor)}>\r\n                        <Basurero></Basurero>    \r\n                </IconButton>\r\n\r\n                </Typography>\r\n        </Grid>\r\n</Grid>\r\n</div>                              \r\n\r\n:\r\n<div></div>\r\n\r\n}  \r\n\r\n\r\n\r\n        </Grid>\r\n\r\n\r\n\r\n</Grid>\r\n\r\n\r\n\r\n\r\n\r\n\r\n</Papel>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paper\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Funciones\\Funciones.js",[],"C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\Etiquetas.jsx",["422","423","424","425","426"],"import React ,{useState,useEffect}from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    flexWrap: 'wrap',\r\n    '& > *': {\r\n      margin: theme.spacing(0.5),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function Chips(props) {\r\n  const classes = useStyles();\r\n  const lista=props.etiquetas\r\n  const [valor, setvalor] = useState(props.etiquetas)\r\n\r\n\r\n  const removerE=props.removerEtiqueta()\r\n  const handleDelete = () => {\r\n    console.info('You clicked the delete icon.');\r\n  };\r\n\r\n  const handleClick = () => {\r\n    console.info('You clicked the Chip.');\r\n  };\r\n\r\nuseEffect(() => {\r\n  setvalor(props.etiquetas)\r\n}, [props])\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n    {valor ?\r\n\r\nvalor.map((e) => (\r\n\r\n                        <Chip\r\n                      \r\n                        key={e.id}\r\n                        label={e.descripcion}\r\n                        onClick={handleClick}\r\n                        onDelete={()=>removerE(e)}\r\n                        color=\"primary\"\r\n                       \r\n                        />\r\n  \r\n        ))\r\n:<div></div>}\r\n   \r\n    \r\n     \r\n    </div>\r\n  );\r\n}\r\n",["427","428"],"C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\AutoCompletarTres.jsx",["429","430","431","432","433","434","435"],"/* eslint-disable no-use-before-define */\r\nimport React,{useState} from 'react';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { useEffect } from 'react';\r\nimport { Grid ,IconButton} from '@material-ui/core';\r\nimport PostAddIcon from '@material-ui/icons/PostAdd';\r\nimport LabelIcon from '@material-ui/icons/Label';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport Swal from \"sweetalert2\" \r\nimport Firebase from \"../firebase/firebase\"\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    margin:\"10px 0px\"\r\n  },\r\n}));\r\n\r\n\r\n\r\n\r\n\r\nconst crearEtiqueta=async(valor)=>{\r\n\r\n  const id=await Firebase.db.collection(\"etiquetas\").add({descripcion:valor,contar:0}).then((docRef) => {\r\n    //console.log(\"Document written with ID: \", docRef.id);\r\n\r\n    return docRef.id\r\n})\r\nreturn id\r\n}\r\n\r\nexport default function Tags(props) {\r\n  const classes = useStyles();\r\n  const etiquetas=props.etiquetas\r\n  const settag=props.settag\r\n  const tag=props.tag\r\n  const removerEtiqueta=props.removerEtiqueta\r\n //const [prueba1,setprueba1] =useState([\"hola\",\"chao\"])\r\n const [prueba2,setprueba2] =useState(props.tag)\r\n const [prueba1,setprueba1] =useState([])\r\n const [tagdos, settagdos] = useState(props.tag)\r\n\r\n\r\n \r\n   const recorrertag=()=>{\r\n    \r\n\r\n    \r\n      let resultado=etiquetas.filter(({id:id1})=>tag.some(({id:id2})=>id2===id1))\r\n      \r\n\r\n    console.log(resultado)\r\n    settagdos(resultado)\r\n   }\r\n\r\n\r\n   useEffect(() => {\r\n    recorrertag()\r\n   }, [props])\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n     <Grid container>\r\n        <Grid xs={10}>\r\n\r\n        \r\n      <Autocomplete\r\n        multiple\r\n     \r\n        id=\"tags-filled\"\r\n        options={etiquetas}\r\n        value={tagdos}\r\n        \r\n        onChange={(event, newValue) => { \r\n                settag(newValue)\r\n        }}\r\n        getOptionLabel={option=>option.descripcion}\r\n        renderTags={(value, getTagProps) =>{\r\n          return value.map((option, index) => {\r\n               return <Chip variant=\"outlined\" label={option.descripcion } {...getTagProps({ index })} />\r\n          })\r\n        }}\r\n        renderInput={(params) => {\r\n         return  <TextField {...params}   variant=\"outlined\" label=\"Etiquetas\" placeholder=\"Etiquetas\" />\r\n        }}\r\n      />\r\n      </Grid>\r\n      <Grid xs={2}>\r\n\r\n      <IconButton color=\"primary\"  onClick={()=>{\r\n          Swal.fire({\r\n     \r\n            title: 'Ingrese nueva etiqueta',\r\n            input:\"text\",\r\n            showCancelButton:true,\r\n            confirmButtonColor: '#21cbce',\r\n            cancelButtonColor: '#d33',\r\n            confirmButtonText:\"Ingresar\",\r\n           preConfirm:(valor)=>{\r\n              var coincide=false \r\n              etiquetas.map((etiquet)=>{\r\n\r\n                if(etiquet.descripcion==valor){\r\n                  coincide=true\r\n                  \r\n                }\r\n              })\r\n\r\n             if(coincide){\r\n              Swal.fire({\r\n                icon:\"info\",\r\n                title:\"Ese registro ya esta disponible\"\r\n              })\r\n             }else{\r\n              const id = crearEtiqueta(valor)\r\n              Swal.fire({\r\n                icon:\"success\",\r\n                title:\"Nuevo Registro Creado\"    \r\n\r\n              })\r\n\r\n             }\r\n\r\n}             \r\n\r\n          })\r\n      }}>\r\n          {/* <PostAddIcon /> */}\r\n          {/* <LabelIcon></LabelIcon> */}\r\n          <AddCircleOutlineIcon></AddCircleOutlineIcon>\r\n        </IconButton>\r\n      </Grid>\r\n\r\n</Grid>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\firebase\\config.js",[],"C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\Search.jsx",[],"C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\Usuarios.jsx",["436","437","438"],"import React,{useEffect,useState} from 'react'\r\nimport { Grid,Typography, Avatar, makeStyles,CircularProgress,Button } from '@material-ui/core'\r\nimport firebase from '../firebase/firebase'\r\nimport userImagen from \"../imagen/user.png\"\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n\r\n\r\n\r\nconst estilos=makeStyles((theme)=>({\r\n\r\n\r\n    root:{\r\n\r\n        \" & .MuiButton-containedPrimary:hover\" :{\r\n            backgroundColor: \"#303f9f00\",\r\n            color:\"#5fcccf\",\r\n            border:\"1px solid\"\r\n        },\r\n\r\n    },\r\n\r\n\r\n\r\n    tituloGeneral:{\r\n\r\n        fontWeight:\"700\",\r\n        fontFamily:\"Lato\",\r\n        fontSize:\"27px\"\r\n        },                     \r\n        divTituloGeneral:{\r\n                margin:\"55px auto\",\r\n                width:\"85vw\"\r\n        },\r\n        textNoDisponible:{\r\n\r\n\r\n            fontFamily:\"Nunito\",\r\n            color:\"#808080\"\r\n\r\n    },\r\n\r\n    divCircular:{\r\n        marginTop:\"100px\",\r\n        width:\"inherit\"\r\n\r\n    },\r\n    circular:{\r\n        height:\"72px !important\",\r\n        width:\"72px !important\",\r\n        display:\"block\",\r\n        margin:\"auto\"\r\n        },\r\n\r\n\r\n}))\r\n\r\n\r\n\r\n\r\nconst Usuarios = () => {\r\n\r\n const clases=estilos()   \r\n\r\n // solicitud maxima de usarios \r\nconst usuariosSolicitados=3\r\n//usuarios mostrados\r\nconst usuariosMostrados=2\r\n\r\nconst [usuarios, setusuarios] = useState([])\r\nconst [ultimo, setultimo] = useState()\r\nconst [vacio, setvacio] = useState(false)\r\nconst usuariosRef=firebase.db.collection(\"usuarios\")\r\n\r\nconst [cargando, setcargando] = useState(false)\r\n\r\n\r\n    const listAllUsers =async()=> {\r\n    \r\n        \r\n    // crear nueva lista \r\n        let  nuevalista=[]\r\n        await usuariosRef.orderBy(\"nombre\",\"asc\").get().then(doc=>{\r\n            //console.log(doc.docs)\r\n            //   reducir a uno la lista \r\n \r\n            //    for(let i=0;i<)    \r\n                let tamaño=doc.docs.length\r\n               \r\n                for(let i=0;i<tamaño;i++){\r\n\r\n                    console.log(doc.docs[i].data())\r\n                    nuevalista.push(doc.docs[i].data())\r\n                }\r\n\r\n                //setultimo(doc.docs[usuariosMostrados-1].id)\r\n    \r\n                if(tamaño==usuariosSolicitados){\r\n                            setvacio(false)\r\n                    }else{\r\n                            setvacio(true)\r\n                    } \r\n        })\r\n         setusuarios(nuevalista)\r\n         setcargando(false)   \r\n\r\n    }\r\n    \r\n\r\n    const pedirMas =async()=> {\r\n    \r\n        try{\r\n                        // crear nueva lista \r\n                            let  nuevalista=[]\r\n\r\n\r\n                            await usuariosRef.doc(ultimo).get().then(async(doc)=>{\r\n                                  \r\n                            await usuariosRef.orderBy(\"nombre\",\"asc\").startAfter(doc).get().then(doc=>{\r\n                                //console.log(doc.docs)\r\n                                //   reducir a uno la lista \r\n                                console.log(\"paso por aca\")\r\n                                //    for(let i=0;i<)    \r\n                                    let tamaño=doc.docs.length\r\n\r\n                                console.log(tamaño)\r\n                               \r\n                                console.log(doc.docs[0].data())\r\n                                if(tamaño==usuariosSolicitados){\r\n                                    for(let i=0;i<tamaño-1;i++){\r\n                                        console.log(i)\r\n                                        console.log(doc.docs[i].data())\r\n                                        nuevalista.push(doc.docs[i].data())\r\n                                            \r\n                                    }\r\n                                }else{\r\n                                    for(let i=0;i<=tamaño-1;i++){\r\n                                        console.log(i)\r\n                                        console.log(doc.docs[i].data())\r\n                                        nuevalista.push(doc.docs[i].data())\r\n                                            \r\n                                    }\r\n                                }\r\n\r\n\r\n\r\n                                    // insertar el ultimos\r\n                                \r\n                                    setultimo(doc.docs[usuariosMostrados-1].id)\r\n                    \r\n                                    if(tamaño==usuariosSolicitados){\r\n                                                setvacio(false)\r\n                                        }else{\r\n                                                setvacio(true)\r\n                                        } \r\n                            })\r\n\r\n                             })\r\n                            setusuarios((usuarios)=>[...usuarios,...nuevalista])\r\n                            setcargando(false)   \r\n\r\n\r\n                        }catch(error){console.log(error)}\r\n                    \r\n        }\r\n        \r\n\r\n    useEffect(() => {\r\n           // Start listing users from the beginning, 1000 at a time.\r\n      setcargando(true)     \r\n      listAllUsers();\r\n\r\n    }, [])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n       \r\n        <Grid className={clases.root} container>\r\n            <Grid xs={12} md={1}>\r\n\r\n            </Grid>\r\n            <Grid xs={12} md={10}>\r\n                        \r\n    \r\n\r\n\r\n                    <div className={clases.divTituloGeneral}>\r\n                         <Typography variant=\"h4\" className={clases.tituloGeneral}>\r\n                                Lista de Usuarios\r\n                        </Typography>\r\n                </div>\r\n\r\n\r\n\r\n\r\n\r\n                    <div>\r\n\r\n                   \r\n                                {\r\n                                cargando?\r\n                                <div className={clases.divCircular} >\r\n                                <CircularProgress className={clases.circular}></CircularProgress>\r\n                                </div> \r\n                                :\r\n                                \r\n                                \r\n                                usuarios.length ?\r\n                                   \r\n                                   <>\r\n                                       {\r\n                                    usuarios.map(doc=>(\r\n                                        \r\n                                     \r\n                                        <Grid container>\r\n                                            \r\n                                                    <Grid xs={12} md={4}>\r\n                                                    <div >\r\n                                                        {doc.photoURL==null?\r\n                                                             \r\n                                                             <Avatar style={{margin:\"auto\"}} src={userImagen}></Avatar>\r\n                                                             :\r\n                                                   \r\n                                                             <Avatar  style={{margin:\"auto\"}} src={`${doc.photoURL}`}></Avatar>\r\n\r\n                                                        }                                        \r\n                                                    \r\n                                                    </div>\r\n                                            </Grid>\r\n                                            <Grid xs={12} md={4}>\r\n                                                <Typography align=\"center\">\r\n                                                    {doc.nombre}\r\n                                                </Typography>    \r\n                                            </Grid>\r\n\r\n                                            <Grid xs={12} md={4}>\r\n                                                <Typography align=\"center\">\r\n                                                    {doc.correo}\r\n                                                 </Typography>   \r\n                                            </Grid>\r\n\r\n                                               <Grid xs={12}>\r\n                                                    <hr></hr>\r\n                                                </Grid>            \r\n                                          \r\n                                        </Grid>\r\n                                    )\r\n                                  )   \r\n                                  \r\n                                  }\r\n\r\n\r\n\r\n{/*                                                                     \r\n                                {vacio==false &&\r\n\r\n                                <Typography align=\"center\">\r\n                                <Button \r\n                                        endIcon={<ExpandMoreIcon></ExpandMoreIcon>}\r\n                                        variant =\"contained\"\r\n                                        color=\"primary\"\r\n\r\n                                onClick={()=>{\r\n                                    pedirMas()\r\n                                }} >\r\n                                ver mas\r\n\r\n                                        </Button> \r\n                                </Typography>   }                      */}\r\n\r\n\r\n\r\n\r\n                                  </> \r\n                                \r\n                                \r\n                                :\r\n\r\n                                <Grid xs={12}>\r\n                                        <Typography className={clases.\r\n                              textNoDisponible\r\n                               } align=\"center\" variant=\"h4\">\r\n                                        No hay registros\r\n                              </Typography>          \r\n                           \r\n\r\n                                 </Grid>\r\n                                \r\n                                \r\n                                }\r\n\r\n\r\n\r\n\r\n\r\n                    </div>\r\n\r\n\r\n            </Grid>\r\n\r\n            <Grid xs={12} md={1}>\r\n\r\n            </Grid>\r\n\r\n\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Usuarios\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\ListarComentarios.jsx",["439","440","441","442","443","444","445","446","447","448"],"import React,{useEffect,useState} from 'react'\r\nimport { Grid,Typography,Button,Avatar, makeStyles,CircularProgress,Paper } from '@material-ui/core'\r\nimport Comentario from '../Componetes/Comentario'\r\nimport FuncionesGenerales from \"../Funciones/FuncionesFirebase\"\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\r\nimport Firebase from '../firebase/firebase'\r\n\r\nconst estilos=makeStyles((theme=>({\r\n    root:{\r\n      \r\n        \" & .MuiButton-containedPrimary:hover\" :{\r\n            backgroundColor: \"#303f9f00\",\r\n            color:\"#5fcccf\",\r\n            border:\"1px solid\"\r\n        },\r\n            \r\n\r\n    },\r\n\r\n    \r\n    tituloGeneral:{\r\n\r\n    fontWeight:\"700\",\r\n    fontFamily:\"Lato\",\r\n    fontSize:\"27px\"\r\n    }\r\n,\r\ndivTituloGeneral:{\r\n    margin:\"55px auto\",\r\n    \r\n},\r\ndivCircular:{\r\n    marginTop:\"100px\"\r\n\r\n},\r\ncircular:{\r\n    height:\"72px !important\",\r\n    width:\"72px !important\",\r\n    display:\"block\",\r\n    margin:\"auto\"\r\n    },\r\n\r\n    textNoDisponible:{\r\n\r\n\r\n        fontFamily:\"Nunito\",\r\n        color:\"#808080\"\r\n\r\n},\r\n})))\r\n\r\n\r\n\r\nconst ListarComentarios = () => {\r\n\r\n    const clases=estilos()\r\n\r\n    // solicitud maxima  de comentarios \r\n     const comentariosSolicitados = 3\r\n     // comentorios mostrados \r\n     const comentariosMostrados=2\r\n    // referencia base de datos \r\n    const  comentariosRef=Firebase.db.collection('Comentarios')\r\n\r\n    const [comentarios, setcomentarios] = useState([])\r\n    const [cargando, setcargando] = useState(false)\r\n    const [ultimo,setUltimo]=useState()\r\n    const [vacio,setVacio]=useState(false)\r\n\r\n\r\n    useEffect(async () => {\r\n\r\n        setcargando(true)\r\n        pedirComentarios()\r\n\r\n\r\n    }, [])\r\n\r\n\r\n    const pedirComentarios=async()=>{\r\n\r\n        const nuevaLista=[]\r\n        await comentariosRef.orderBy('fecha','asc').get().then((doc)=>{\r\n\r\n\r\n            let tamano=doc.docs.length\r\n            for(let i=0;i<tamano;i++){\r\n\r\n                nuevaLista.push(doc.docs[i].data())\r\n            }\r\n\r\n            setUltimo(doc.docs.length-1)\r\n\r\n\r\n                if(tamano==comentariosSolicitados){\r\n\r\n                    setVacio(false)\r\n                }\r\n                else{\r\n                    setVacio(true)\r\n                }\r\n                })\r\n       console.log(nuevaLista)\r\n        setcomentarios(nuevaLista)\r\n        setcargando(false)\r\n        \r\n    }\r\n\r\n    const pedirMas=async()=>{\r\n\r\n        const nuevaLista=[]\r\n        await comentariosRef.orderBy('fecha','asc').startAfter(ultimo).limit(comentariosSolicitados).get().then((doc)=>{\r\n\r\n\r\n            let tamano=doc.docs.length\r\n            for(let i=0;i<tamano;i++){\r\n\r\n                nuevaLista.push(doc.docs[i].data())\r\n            }\r\n\r\n            setUltimo(doc.docs.length-1)\r\n\r\n\r\n                if(tamano==comentariosSolicitados){\r\n\r\n                    setVacio(false)\r\n                }\r\n                else{\r\n                    setVacio(true)\r\n                }\r\n                })\r\n       console.log(nuevaLista)\r\n        setcomentarios(nuevaLista)\r\n        setcargando(false)\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className={clases.root} >\r\n\r\n<Grid  container>\r\n\r\n<Grid xs=\"1\"  md=\"2\"> \r\n\r\n</Grid>\r\n<Grid xs=\"10\" md=\"8\">\r\n        <div className={clases.divTituloGeneral}>\r\n                    <Typography variant=\"h4\" className={clases.tituloGeneral}>\r\n                            Feedback\r\n                    </Typography>\r\n        </div>\r\n\r\n\r\n\r\n\r\n        {                            \r\n                cargando?\r\n                <div className={clases.divCircular} >\r\n                <CircularProgress className={clases.circular}></CircularProgress>\r\n            </div>\r\n            :<div>\r\n               { comentarios.length==0 ?\r\n                  <Typography className={clases.\r\n                  textNoDisponible\r\n                   } align=\"center\" variant=\"h4\">\r\n                            No hay registros\r\n                  </Typography>          \r\n               \r\n\r\n                    :\r\n\r\n                    <div>\r\n\r\n                                {\r\n                                    comentarios.map((doc)=>(\r\n                                        <Comentario Comentario={doc}> </Comentario>\r\n                                    ))\r\n                                }\r\n\r\n                            {/* {vacio==false&&\r\n\r\n                                    <Typography align=\"center\">        \r\n                                    <Button variant='contained'\r\n                                    color=\"primary\"\r\n                                    endIcon={<ExpandMoreIcon/>}       \r\n                                    onClick={()=>{pedirMas()}}\r\n                                    >\r\n                                    ver mas      \r\n                                    </Button>       \r\n                                    </Typography>        \r\n\r\n\r\n                            }\r\n                       */}\r\n                    </div>\r\n                 \r\n        \r\n            }\r\n            </div>\r\n        }\r\n\r\n</Grid>\r\n\r\n<Grid xs=\"1\" md=\"2\">\r\n    \r\n</Grid>\r\n</Grid>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListarComentarios\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\Colaboraciones.jsx",["449","450","451","452","453","454","455","456","457","458"],"import React,{useEffect,useState} from 'react'\r\nimport { Grid,Typography,Button,Avatar, makeStyles,CircularProgress,Paper } from '@material-ui/core'\r\nimport Comentario from '../Componetes/Comentario'\r\nimport FuncionesGenerales from \"../Funciones/FuncionesFirebase\"\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\r\nimport Firebase from '../firebase/firebase'\r\n\r\nconst estilos=makeStyles((theme=>({\r\n    root:{\r\n      \r\n        \" & .MuiButton-containedPrimary:hover\" :{\r\n            backgroundColor: \"#303f9f00\",\r\n            color:\"#5fcccf\",\r\n            border:\"1px solid\"\r\n        },\r\n            \r\n\r\n    },\r\n\r\n    \r\n    tituloGeneral:{\r\n\r\n    fontWeight:\"700\",\r\n    fontFamily:\"Lato\",\r\n    fontSize:\"27px\"\r\n    }\r\n,\r\ndivTituloGeneral:{\r\n    margin:\"55px auto\",\r\n    \r\n},\r\ndivCircular:{\r\n    marginTop:\"100px\"\r\n\r\n},\r\ncircular:{\r\n    height:\"72px !important\",\r\n    width:\"72px !important\",\r\n    display:\"block\",\r\n    margin:\"auto\"\r\n    },\r\n\r\n    textNoDisponible:{\r\n\r\n\r\n        fontFamily:\"Nunito\",\r\n        color:\"#808080\"\r\n\r\n},\r\n})))\r\n\r\n\r\n\r\nconst ListarComentarios = () => {\r\n\r\n    const clases=estilos()\r\n\r\n    // solicitud maxima  de comentarios \r\n     const comentariosSolicitados = 3\r\n     // comentorios mostrados \r\n     const comentariosMostrados=2\r\n    // referencia base de datos \r\n    const  comentariosRef=Firebase.db.collection('Colaboracion')\r\n\r\n    const [comentarios, setcomentarios] = useState([])\r\n    const [cargando, setcargando] = useState(false)\r\n    const [ultimo,setUltimo]=useState()\r\n    const [vacio,setVacio]=useState(false)\r\n\r\n\r\n    useEffect(async () => {\r\n\r\n        setcargando(true)\r\n        pedirComentarios()\r\n\r\n\r\n    }, [])\r\n\r\n\r\n    const pedirComentarios=async()=>{\r\n\r\n        const nuevaLista=[]\r\n        await comentariosRef.orderBy('fecha','asc').get().then((doc)=>{\r\n\r\n\r\n            let tamano=doc.docs.length\r\n            for(let i=0;i<tamano;i++){\r\n\r\n                nuevaLista.push(doc.docs[i].data())\r\n            }\r\n\r\n            setUltimo(doc.docs.length-1)\r\n\r\n\r\n                if(tamano==comentariosSolicitados){\r\n\r\n                    setVacio(false)\r\n                }\r\n                else{\r\n                    setVacio(true)\r\n                }\r\n                })\r\n       console.log(nuevaLista)\r\n        setcomentarios(nuevaLista)\r\n        setcargando(false)\r\n        \r\n    }\r\n\r\n    const pedirMas=async()=>{\r\n\r\n        const nuevaLista=[]\r\n        await comentariosRef.orderBy('fecha','asc').startAfter(ultimo).limit(comentariosSolicitados).get().then((doc)=>{\r\n\r\n\r\n            let tamano=doc.docs.length\r\n            for(let i=0;i<tamano;i++){\r\n\r\n                nuevaLista.push(doc.docs[i].data())\r\n            }\r\n\r\n            setUltimo(doc.docs.length-1)\r\n\r\n\r\n                if(tamano==comentariosSolicitados){\r\n\r\n                    setVacio(false)\r\n                }\r\n                else{\r\n                    setVacio(true)\r\n                }\r\n                })\r\n       console.log(nuevaLista)\r\n        setcomentarios(nuevaLista)\r\n        setcargando(false)\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className={clases.root} >\r\n\r\n<Grid  container>\r\n\r\n<Grid xs=\"1\"  md=\"2\"> \r\n\r\n</Grid>\r\n<Grid xs=\"10\" md=\"8\">\r\n        <div className={clases.divTituloGeneral}>\r\n                    <Typography variant=\"h4\" className={clases.tituloGeneral}>\r\n                            Colaboraciones\r\n                    </Typography>\r\n        </div>\r\n\r\n\r\n\r\n\r\n        {                            \r\n                cargando?\r\n                <div className={clases.divCircular} >\r\n                <CircularProgress className={clases.circular}></CircularProgress>\r\n            </div>\r\n            :<div>\r\n               { comentarios.length==0 ?\r\n                  <Typography className={clases.\r\n                  textNoDisponible\r\n                   } align=\"center\" variant=\"h4\">\r\n                            No hay registros\r\n                  </Typography>          \r\n               \r\n\r\n                    :\r\n\r\n                    <div>\r\n\r\n                                {\r\n                                    comentarios.map((doc)=>(\r\n                                        <Comentario Comentario={doc}> </Comentario>\r\n                                    ))\r\n                                }\r\n\r\n                            {/* {vacio==false&&\r\n\r\n                                    <Typography align=\"center\">        \r\n                                    <Button variant='contained'\r\n                                    color=\"primary\"\r\n                                    endIcon={<ExpandMoreIcon/>}       \r\n                                    onClick={()=>{pedirMas()}}\r\n                                    >\r\n                                    ver mas      \r\n                                    </Button>       \r\n                                    </Typography>        \r\n\r\n\r\n                            }\r\n                       */}\r\n                    </div>\r\n                 \r\n        \r\n            }\r\n            </div>\r\n        }\r\n\r\n</Grid>\r\n\r\n<Grid xs=\"1\" md=\"2\">\r\n    \r\n</Grid>\r\n</Grid>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListarComentarios\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\AdministrarNosotros.jsx",["459"],"import React,{useState,useEffect} from 'react'\r\nimport { Typography, makeStyles,Grid,TextField ,Button,CircularProgress} from '@material-ui/core'\r\nimport TextoEditor  from \"../Componetes/TextoEditor.jsx\"\r\nimport { EditorState } from 'draft-js';\r\nimport Firebase from \"../../src/firebase/firebase\"\r\nimport draftToHtml from 'draftjs-to-html';\r\nimport { convertToRaw } from 'draft-js';\r\nimport {  ContentState, convertFromHTML } from 'draft-js'\r\nimport Swal from \"sweetalert2\"\r\nimport htmlToDraft from 'html-to-draftjs';\r\n\r\n\r\nconst estilos=makeStyles((theme)=>({\r\n\r\n    divTituloGeneral:{\r\n        margin:\"55px auto\",\r\n        width:\"85vw\",\r\n        \" & .MuiButton-containedPrimary:hover\" :{\r\n            backgroundColor: \"#303f9f00\",\r\n            color:\"#5fcccf\",\r\n            border:\"1px solid\"\r\n        },\r\n\r\n},\r\ntituloGeneral:{\r\n\r\n    fontWeight:\"700\",\r\n    fontFamily:\"Lato\",\r\n    fontSize:\"27px\"\r\n    },\r\n    divCircular:{\r\n        marginTop:\"200px\"\r\n\r\n    },\r\n\r\nmargenDiv:{\r\n    margin:\"100px 0px 0px 0px\"\r\n},\r\ncircular:{\r\n    height:\"72px !important\",\r\n    width:\"72px !important\",\r\n    display:\"block\",\r\n    margin:\"auto\"\r\n    },\r\n\r\n    margenDivContenedor:{\r\n        margin:\"30px 0px\"\r\n    },\r\n    textoTitulo:{\r\n        margin:\"0px 0px 10px 5px\"\r\n    }\r\n\r\n}))\r\n\r\n\r\n\r\nconst AdministrarNosotros = (props) => {\r\n    const clases=estilos()\r\n    const [titulo, settitulo] = useState(\"\")\r\n    const [editorState, setEditorState] = useState(EditorState.createWithContent(\r\n        ContentState.createFromBlockArray(\r\n          convertFromHTML('<p></p>')\r\n        )\r\n      ))\r\n   //   const [editorState, setEditorState] = useState(EditorState.createEmpty())\r\n\r\n    const [cargando, setcargando] = useState(false)\r\n\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const onEditorStateChange = (editorState) => {\r\n        setEditorState(editorState)\r\n      }\r\n    \r\n\r\n    const onTitleStateChange=(e)=>{\r\n        e.preventDefault()\r\n        settitulo(e.target.value)\r\n    }\r\n\r\n\r\n\r\n\r\nconst remplazarTexto =(htmlText)=>{\r\n  console.log(htmlText)\r\n\r\n  //<div style=\"text-align:none;\">\r\n let textoprueba=htmlText.replace(`<div style=\"text-align:none;\">`,`<div style=\"text-align: center; width: 100%;\">`)\r\n\r\n \r\n return textoprueba\r\n}\r\n\r\n    const Guardar=()=>{\r\n\r\n        const rawContentState = convertToRaw(editorState.getCurrentContent());\r\n        let htmlText = draftToHtml(rawContentState);\r\n        let htmlConverted = remplazarTexto(htmlText) //here I call the function that converts the <img/> to <div><img/></div>. \r\n        \r\n\r\n        const configWeb={\r\n            title:titulo,\r\n            //contenido:draftToHtml(convertToRaw(editorState.getCurrentContent()))\r\n            contenido:htmlConverted\r\n        }\r\n\r\n\r\n\r\n        Firebase.db.collection(\"administrarnosotros\").doc(\"configuracion\").set(configWeb).then(()=>\r\n        \r\n         Swal.fire({\r\n             title:\"Su informacion ha sido guardada\",\r\n             icon:\"success\",\r\n             showConfirmButton: false,\r\n             timer:1500\r\n         }).then(()=>{\r\n             props.history.push(\"/nosotros\")\r\n         })\r\n        ).catch(error=>console.log(error))\r\n\r\n\r\n        //guardar en la base de datos\r\n\r\n\r\n    }\r\n  \r\n\r\n\r\n\r\n\r\n\r\n    useEffect(async () => {\r\n\r\n        setcargando(true)\r\n    \r\n        const retornarObjeto=await Firebase.db.collection(\"administrarnosotros\").doc(\"configuracion\").get().then((respuesta)=>{\r\n            console.log(respuesta.data())\r\n\r\n            return respuesta.data()\r\n        })\r\n\r\n        if(retornarObjeto!=undefined){\r\n            \r\n            settitulo(retornarObjeto.title)\r\n\r\n// funcion extraida \r\n           // const blocksFromHTML = convertFromHTML(retornarObjeto.contenido);\r\n           \r\n            const contentBlock = htmlToDraft(retornarObjeto.contenido);\r\n            const contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\r\n            // const text = ContentState.createFromBlockArray(\r\n            //         blocksFromHTML.contentBlocks,\r\n            //         blocksFromHTML.entityMap\r\n            //         );\r\n                    \r\n                    const editorState = EditorState.createWithContent(contentState);\r\n                \r\n                setEditorState(\r\n                    editorState \r\n            )\r\n\r\n\r\n// fin de la funcion extraida \r\n            // setEditorState(EditorState.createWithContent(\r\n            //     ContentState.createFromBlockArray(\r\n            //       convertFromHTML(retornarObjeto.contenido)\r\n            //     )\r\n            //   ))\r\n\r\n        }\r\n\r\n        setcargando(false)\r\n\r\n\r\n    }, [])\r\n\r\n\r\n\r\n\r\n    return (\r\n        \r\n\r\n<div className={clases.divTituloGeneral}>\r\n<Typography variant=\"h4\" className={clases.tituloGeneral}>\r\nAdministrar Paginas Nosotros\r\n</Typography>\r\n\r\n<div className={clases.margenDiv}>\r\n\r\n{\r\ncargando?\r\n                            <div className={clases.divCircular} >\r\n                            <CircularProgress className={clases.circular}></CircularProgress>\r\n                        </div>\r\n                        :<div>\r\n                          \r\n <Grid container>\r\n\r\n<Grid xs={1} ></Grid>\r\n<Grid xs={10}>\r\n            <Grid xs={12} md={12}>\r\n\r\n            <div className={clases.margenDivContenedor}>\r\n                    <Typography className={clases.textoTitulo} variant=\"h6\" >\r\n                        Titulo\r\n                    </Typography>\r\n                    <TextField value={titulo} onChange={onTitleStateChange} id=\"outlined-basic\"  variant=\"outlined\" fullWidth />\r\n            </div>\r\n\r\n            <div className={clases.margenDivContenedor}>\r\n                    <Typography className={clases.textoTitulo} variant=\"h6\" >\r\n                        Contenido\r\n                    </Typography>\r\n            <TextoEditor editorState={editorState} onEditorStateChange={setEditorState} ></TextoEditor>\r\n            \r\n            </div>\r\n\r\n            <Button onClick={()=>Guardar()} variant=\"contained\" color=\"primary\">\r\n                Guardar\r\n            </Button>\r\n\r\n            </Grid>\r\n\r\n\r\n\r\n    \r\n\r\n</Grid>\r\n<Grid xs={1} ></Grid>\r\n\r\n\r\n</Grid>    \r\n</div>\r\n\r\n\r\n     \r\n}                          \r\n\r\n\r\n\r\n</div>\r\n</div>\r\n    )\r\n}\r\n\r\nexport default AdministrarNosotros\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Funciones\\FuncionesFirebase.js",["460","461","462","463","464","465"],"\r\nimport Firebase from \"../firebase/firebase\"\r\nimport Swal from \"sweetalert2\"\r\nimport moment from \"moment\"\r\n\r\n\r\n\r\n\r\nexport default {\r\n\r\n\r\n\r\n        async IngresarComentario(Comentario){\r\n\r\n\r\n       await Firebase.db.collection(\"Comentarios\").add(Comentario).then(()=>\r\n         Swal.fire({     \r\n            icon: 'success',\r\n            title: '¡Muchas Gracias!',\r\n            showConfirmButton: false,\r\n            timer: 1500\r\n          })\r\n         )\r\n\r\n        }\r\n        ,\r\n        async IngresarColaboracion(Colaboracion){\r\n\r\n\r\n          await Firebase.db.collection(\"Colaboracion\").add(Colaboracion).then(()=>\r\n          Swal.fire({     \r\n             icon: 'success',\r\n             title: '¡Muchas Gracias!',\r\n             showConfirmButton: false,\r\n             timer: 1500\r\n           })\r\n          )\r\n \r\n         },\r\n\r\n        async ListarComentarios(){\r\n          let listatres=[]\r\n           await Firebase.db.collection(\"Comentarios\").get().then((collection)=>{   \r\n            listatres=collection.docs.map(doc=>{\r\n                      return doc.data()\r\n                  })\r\n            \r\n           })\r\n         \r\n           return listatres\r\n        },\r\n      // pedir etiquetas \r\n      async ListarEtiquetas (){\r\n        let lista=await Firebase.db.collection(\"etiquetas\").orderBy('descripcion').get().then(doc=>{\r\n              let listados= doc.docs.map(etiqueta => {\r\n                return {\r\n\r\n                  id:etiqueta.id,\r\n                  ...etiqueta.data()\r\n                    }\r\n              })   \r\n            return listados;\r\n                  })\r\n        return lista\r\n      }\r\n        ,\r\n      async CrearInformacion(Info,Paper){\r\n        //armar arreglos etiquetas \r\n        let etiquetas=[]\r\n        etiquetas=Paper.etiquetas\r\n        let prueba= await Firebase.db.collection(\"Informacion\").doc(Info.id).set({...Info})\r\n        let pruebados= await Firebase.db.collection(\"paper\").doc(Info.id).update({info:true})\r\n        etiquetas.map(async(doc)=>{\r\n          let pruebaTres= await Firebase.db.collection(\"etiquetas\").doc(doc.id).collection('paper').doc(Info.id).update({info:true})\r\n        })\r\n        return prueba\r\n      },\r\n      async BorrarInformacion(Info,Paper){\r\n        let etiquetas=[]\r\n        etiquetas=Paper.etiquetas\r\n        let pruebados= await Firebase.db.collection(\"paper\").doc(Info.id).update({info:false})\r\n        //let pruebados= await Firebase.db.collection(\"paper\").doc(Info.id).update({info:true})\r\n        etiquetas.map(async(doc)=>{\r\n          let pruebaTres= await Firebase.db.collection(\"etiquetas\").doc(doc.id).collection('paper').doc(Info.id).update({info:false})\r\n        }) \r\n        await Firebase.db.collection(\"Informacion\").doc(Info.id).delete().then(() => {\r\n        }).catch((error) => {\r\n                console.error(\"Error removing document: \", error);\r\n         });\r\n\r\n      },\r\n\r\n      async subirImagen(id,imagen){\r\n        // prueba de usuario \r\n        // subir  imagen\r\n            if(imagen.imagen!==null){\r\n\r\n\r\n                    if(imagen.imagen instanceof File){\r\n                        const imgRef=await Firebase.storage.ref().child(\"Informacion\").child(id)\r\n                        await imgRef.put(imagen.imagen)\r\n                        const imgURL=await imgRef.getDownloadURL() \r\n                        return imgURL\r\n                    }else{\r\n                        return imagen.file \r\n                    }\r\n            }else{\r\n               \r\n             return null\r\n            }\r\n\r\n  }, \r\n\r\n  async retornarInformacion(id){\r\n\r\n      let informacion =await Firebase.db.collection('Informacion').doc(id).get().then((doc)=>{\r\n        if(doc.exists){\r\n          console.log(\"Document data:\", doc.data());\r\n          return doc.data()\r\n      }else{\r\n          console.log(\"No such document!\");\r\n      }\r\n      })\r\n      return informacion\r\n  },\r\n  async retornarPaper(id){\r\n\r\n    let informacion =await Firebase.db.collection('paper').doc(id).get().then((doc)=>{\r\n      if(doc.exists){\r\n        console.log(\"Document data:\", doc.data());\r\n        return doc.data()\r\n    }else{\r\n        console.log(\"No such document!\");\r\n    }\r\n    })\r\n    return informacion\r\n\r\n  },\r\n  async descargarImagen(id){\r\n\r\n        let retornar=null\r\n\r\n        var pathReference =await Firebase.storage.ref('Informacion/126906762_110192684249055_224218762780413843_o.jpg');\r\n        console.log(pathReference)\r\n    let ref=await Firebase.storage.ref().child(\"Informacion\").child(id)\r\n\r\n    \r\n    pathReference.getDownloadURL().then(function(url) {\r\n \r\n        var xhr = new XMLHttpRequest();\r\n  xhr.responseType = 'blob';\r\n  xhr.onload = function(event) {\r\n    var blob = xhr.response;\r\n    console.log(blob)\r\n  };\r\n  xhr.open('GET', url);\r\n  xhr.send();\r\n  var img = document.getElementById('myimg');\r\n  img.src = url;\r\n\r\n\r\n        retornar=url\r\n\r\n    }).catch(function(error) {\r\n\r\n        console.log(error)\r\n\r\n    })\r\n\r\n\r\n    return retornar\r\n\r\n\r\n\r\n  },\r\n  // admin pagina why\r\n  // a)mostrar \r\n//1. Pedir cabeza \r\n  async pedirCabeza(){\r\n    let consulta=await Firebase.db.collection('PagWhy').doc(\"Cabeza\").get().then(doc=>{\r\n        if(doc.exists){\r\n          return doc.data()\r\n        }else{\r\n          console.log(\"el documento no existe\")\r\n        }      \r\n      })\r\n      return consulta\r\n  },\r\n//2. Pedir Componente Uno\r\nasync pedirComponenteUno(){\r\n   let consulta=await Firebase.db.collection('PagWhy').doc(\"ComponenteUno\").get().then(doc=>{\r\n        if(doc.exists){\r\n          return doc.data()\r\n        } else{\r\n          console.log(\"el documento no existe\")\r\n        }\r\n   })\r\n   return consulta\r\n},\r\n//3. Pedir Compenente Tres \r\nasync pedirComponenteDos(){\r\n  let consulta=await Firebase.db.collection('PagWhy').doc(\"ComponenteDos\").get().then(doc=>{\r\n      if(doc.exists){\r\n        return doc.data()\r\n      }else{\r\n        console.log(\"el documento no existe\")\r\n      }\r\n  })\r\n  return consulta\r\n},\r\n//4. Pedir Componente Tres \r\nasync pedirComponenterTres(){\r\n  let consulta=await Firebase.db.collection('PagWhy').doc(\"ComponenteTres\").get().then(doc=>{\r\n     if(doc.exists){\r\n       return doc.data()\r\n     }else{\r\n       console.log(\"el documento no existe\")\r\n     }\r\n\r\n  })\r\n  return consulta \r\n},\r\n//b) editar componentes\r\n//b.1)editar Cabeza \r\nasync editarCabeza(Cabeza){\r\n  let consulta=await Firebase.db.collection(\"PagWhy\").doc(\"Cabeza\").set({...Cabeza})\r\n  return consulta\r\n},\r\n//b.2)editar Componente Uno \r\nasync editarComponenteUno(ComponenteUno){\r\n let consulta=await Firebase.db.collection(\"PagWhy\").doc(\"ComponenteUno\").set({...ComponenteUno})\r\n  return consulta\r\n},\r\n//b.3)editar Componente dos \r\nasync editarComponenteDos(ComponenteDos){\r\n  let consulta=await Firebase.db.collection(\"PagWhy\").doc(\"ComponenteDos\").set({...ComponenteDos})\r\n  return consulta\r\n},\r\n//b.4)editar Componente tres \r\nasync editarComponenteTres(ComponenteTres){\r\n  let consulta=await Firebase.db.collection(\"PagWhy\").doc(\"ComponenteTres\").set({...ComponenteTres})\r\n  return consulta \r\n},\r\n\r\n//c)subir imagen \r\n//c.1) subir imagen de los componentes \r\nasync subirImagenWhy(id,imagen){\r\n      if(imagen.imagen!==null){\r\n        if(imagen.imagen instanceof File)\r\n        {     \r\n              const imgRef=Firebase.storage.ref().child(\"imagenWhy\").child(id) \r\n              await imgRef.put(imagen.imagen)\r\n              const imgURL=await imgRef.getDownloadURL()\r\n              return imgURL\r\n        }\r\n    }\r\n\r\n},\r\nasync pedirTitulo (){\r\n\r\n const consulta =await Firebase.db.collection('Paginas').doc(\"Titulo\").get().then((doc)=>{\r\n      if(doc.exists){\r\n        return doc.data()\r\n      }else{\r\n        return \"la informacion no existe\"\r\n      }} )  \r\n      return consulta\r\n},\r\nasync  guardarTitulo (Titulo){\r\n\r\n  const consulta = await Firebase.db.collection('Paginas').doc('Titulo').set({...Titulo})\r\n  return consulta\r\n}\r\n\r\n\r\n\r\n\r\n}   ","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\CajaBusqueda.jsx",["466","467","468","469","470","471","472"],"import React,{useEffect,useState} from 'react'\r\nimport {Grid,makeStyles, Typography, Button,IconButton,CircularProgress, setRef} from \"@material-ui/core\"\r\nimport Paper from '@material-ui/core/Paper';\r\nimport firebase from '../firebase/firebase'\r\nimport moment from 'moment' \r\nimport {Link} from 'react-router-dom'\r\nimport Swal from 'sweetalert2'\r\nimport {Chip} from '@material-ui/core'\r\nimport \"moment/locale/es\"\r\nimport InsertDriveFileIcon from '@material-ui/icons/InsertDriveFile';\r\n\r\nimport Basurero from '@material-ui/icons/Delete';\r\n\r\nimport Lapiz from '@material-ui/icons/Create';\r\nimport AddAPhotoIcon from '@material-ui/icons/AddAPhoto';\r\nimport {UsuarioContext} from \"../Provedores/UsuarioContext\"\r\nimport { useContext } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport CorazonLleno from \"../imagen/iconos/arbolLleno.png\"\r\nimport Corazon from \"../imagen/iconos/arbolVacio.png\"\r\n\r\n const  estilos = makeStyles((theme)=>({\r\n\r\n\r\n    margen:{\r\n\r\n            margin:\"100px auto \",\r\n\r\n\r\n\r\n            \"& .botoneditar\":{\r\n                background:\"#1ab37c\",\r\n                color:\"#ffffff\",\r\n             \r\n                \"&:hover\": {\r\n                   background:\"#ffffff\",\r\n                   color:\"#1ab37c !important\",\r\n                 },\r\n\r\n\r\n            },\r\n\r\n            \" & .MuiButton-containedPrimary:hover\" :{\r\n                backgroundColor: \"#303f9f00\",\r\n                color:\"#5fcccf\",\r\n                border:\"1px solid\"\r\n            },\r\n\r\n            \"& .botoneditar\":{\r\n                background:\"#1ab37c\",\r\n                color:\"#ffffff\",\r\n                marginTop:\"10px\",\r\n\r\n                \"&:hover\": {\r\n                   background:\"#ffffff\",\r\n                   color:\"#1ab37c !important\",\r\n                 },\r\n\r\n\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    },\r\n    caja:{\r\n        position:\"relative\",\r\n        width:\"80vw\",\r\n        margin:\"20px auto\",\r\n        display:\"block\",\r\n        height:\"unset\",\r\n        borderRadius:\"10px\",\r\n    transition:\"background-color .25s,color .25s,box-shadow .25s\",\r\n    boxShadow:\"0 8px 42px -8px rgb(0 0 0 / 20%)\",\r\n    border:\"1px solid #f0f0f0\",\r\n    [theme.breakpoints.down(\"md\")]:{\r\n        height:\"unset\"\r\n    }\r\n\r\n    }\r\n\r\n,\r\n    titulo:{\r\n\r\n        fontWeight:\"500\",\r\n        fontFamily:\"nunito\"\r\n    }\r\n,\r\ntituloGeneral:{\r\n\r\n    fontWeight:\"700\",\r\n    fontFamily:\"Lato\",\r\n    fontSize:\"27px\"\r\n}\r\n,\r\ndivTituloGeneral:{\r\n        margin:\"55px auto\",\r\n        width:\"85vw\"\r\n},\r\nfecha:{\r\n        fontWeight:\"500\",\r\n        fontFamily:\"nunito\",\r\n        paddingTop:\"5px\",\r\n        color:\"#717171\"\r\n},\r\ncontenedor:{\r\n        margin:\"18px auto\"\r\n},\r\nresumen:{\r\n        fontFamily:\"nunito\",\r\n        margin:\"15px auto\"\r\n},\r\n\r\n\r\n\r\n\r\ndiveditarborrar:{\r\n        position:\"absolute\",\r\n        bottom:\"0\",\r\n        right:\"9px\",\r\n        width:\"90px\"\r\n},\r\n\r\n\r\nbotonPdf:{\r\n        position:\"absolute\",\r\n        bottom:\"55px\",\r\n        right:'0px',\r\n        [theme.breakpoints.down(\"sm\")]:{\r\n                position:'unset'\r\n        }\r\n}\r\n,\r\n\r\ntextUpVote:{\r\n        fontFamily:\"nunito\",\r\n        textAlign:\"center\",\r\n        color:\"#808080\"     \r\n     }\r\n,\r\n\r\ncajaMeGusta:{\r\n        position:'absolute',\r\n        top:'8px',\r\n        right:'12px',\r\n[theme.breakpoints.down(\"sm\")]:{\r\n        position:'unset'\r\n}\r\n\r\n\r\n},\r\n\r\n\r\ndivFoto:{\r\n\r\n        width:\"250px\",\r\n        height:\"160px\",\r\n        border:\"2px dashed #21cbce\",\r\n        display:\"block\",\r\n        margin:\"16px auto\",\r\n        position:\"relative\",\r\n        [theme.breakpoints.down(\"sm\")]:{\r\n                margin:\"30px auto\"\r\n        }\r\n    },\r\n\r\n    divImagen:{\r\n       \r\n         height:\"160px\",\r\n         width:\"260px\",\r\n         backgroundSize:\"260px auto\",\r\n         backgroundRepeat:\"no-repeat\",\r\n         backgroundPosition:\"50%\",\r\n         borderRadius:\"0\",\r\n         display:\"block\",\r\n         margin:\"auto\",\r\n         marginTop:\"15px\",\r\n         [theme.breakpoints.down(\"sm\")]:{\r\n                 marginTop:\"30px\"\r\n         }\r\n\r\n     \r\n      \r\n      },\r\n    \r\n    imgFoto:{\r\n        color:\"#21cbce\",\r\n        position:\"absolute\",\r\n        margin:\"auto\",\r\n        top:\"0\",\r\n        bottom:\"0\",\r\n        left:\"0\",\r\n        right:\"0\",\r\n        fontSize:\"3rem\"\r\n    },\r\n    divCircular:{\r\n        marginTop:\"100px\"\r\n\r\n    },botonLikes:{\r\n        color:\"#35b37c\",\r\n        margin:\"8px 0px 0x 0px\",\r\n        border:\"1px solid\"\r\n\r\n    },\r\n    margenChip:{\r\n\r\n        margin:\"0px 3px\",\r\n\r\n        [theme.breakpoints.down(\"sm\")]:{\r\n\r\n                margin:\"0px 4px\"\r\n        }\r\n       \r\n\r\n    },\r\n    circular:{\r\n        height:\"72px !important\",\r\n        width:\"72px !important\",\r\n        display:\"block\",\r\n        margin:\"auto\"\r\n        },\r\n        divTexto:{\r\n                [theme.breakpoints.down(\"md\")]:{\r\n\r\n                        margin:\"0vw 5vw 0\"\r\n                },\r\n\r\n\r\n\r\n                [theme.breakpoints.down(\"sm\")]:{\r\n\r\n                        margin:\"5vw 5vw 0\"\r\n                }\r\n        },\r\n        textNoDisponible:{\r\n\r\n\r\n                fontFamily:\"Nunito\",\r\n                color:\"#808080\"\r\n    \r\n    \r\n    \r\n    \r\n        }\r\n\r\n        ,\r\n        centrarComponente:{\r\n                textAlign:\"end\",\r\n                marginRight:\"10px\",\r\n                [theme.breakpoints.down(\"md\")]:{\r\n\r\n                        textAlign:\"center\",\r\n                }\r\n\r\n        }\r\n    \r\n\r\n\r\n\r\n\r\n }))\r\n\r\n\r\n\r\n\r\nconst Caja = (props) => {\r\n    \r\n    const history = useHistory();\r\n    const clases =estilos()\r\n    const usuario =useContext(UsuarioContext)\r\n    const [listapaper,setlistapaper]=useState([])\r\n    const [cargando, setcargando] = useState(false)\r\n    const [cargandodos, setcargandodos] = useState(false)\r\n    const [paper, setpaper] = useState({})\r\n    const [ultimoDocumento, setultimoDocumento] = useState(0)\r\n   const [vacio, setvacio] = useState(false)    \r\n  const [tituloGeneral,setTituloGeneral]=useState() \r\n\r\n\r\n  \r\n\r\n const listadepaper=async(recientes,valorados)=>{\r\n\r\n          \r\n        try {\r\n           \r\n        if(recientes){\r\n                setlistapaper([])\r\n                await firebase.db.collection(\"paper\").orderBy(\"subida\",\"desc\").limit\r\n                (5).get().then((coleccion)=>\r\n                {\r\n\r\n                            if(coleccion.size!=0){            \r\n                                        console.log(\"paso por aca \")\r\n                                        const lista =coleccion.docs.map((paperObje)=>paperObje.data())\r\n                                        setultimoDocumento(lista[lista.length-1].id)\r\n                                        setlistapaper((listapaper)=>[...listapaper,...lista])\r\n                                        setcargando(false)\r\n                                      \r\n                                }\r\n                                if(coleccion.length==5){\r\n                                        setvacio(true)\r\n                                }else{\r\n                                        setvacio(false)\r\n                                }\r\n\r\n                }\r\n                \r\n                )\r\n        }else{\r\n                if(valorados){\r\n                        setlistapaper([])\r\n                       await  firebase.db.collection(\"paper\").orderBy(\"likes\",\"desc\").limit(5).get().then((coleccion)=>\r\n                        {\r\n\r\n                                    if(coleccion.size!=0){            \r\n\r\n                                                const lista =coleccion.docs.map((paperObje)=>paperObje.data())\r\n                                                setultimoDocumento(lista[lista.length-1].id)\r\n                                                setlistapaper((listapaper)=>[...listapaper,...lista])\r\n                                                setcargando(false)\r\n                                                \r\n                                        }\r\n                                        if(coleccion.length==5){\r\n                                                setvacio(true)\r\n                                        }else{\r\n                                                setvacio(false)\r\n                                        }\r\n\r\n                        }\r\n                        \r\n                        )               \r\n                }else{\r\n                   \r\n                         let nuevalista=[]\r\n                            await firebase.db.collection(\"paper\").orderBy(\"id\",\"desc\").limit(5).get().then(valor=>{\r\n                                \r\n                               \r\n                                nuevalista=valor.docs.map(doc=>{\r\n                                       \r\n                                                          return{\r\n                                                                id:doc.id,\r\n                                                                ...doc.data()\r\n                                                            }\r\n                                        \r\n                                })\r\n                               \r\n                                if(nuevalista.length==5){\r\n                                        setvacio(true)\r\n                                }else{\r\n                                        setvacio(false)\r\n                                }\r\n\r\n                                if(nuevalista.length==0){\r\n                                        setultimoDocumento(0)\r\n                                }else{\r\n                                setultimoDocumento(nuevalista[nuevalista.length-1].id)\r\n                                 }\r\n                       \r\n\r\n                           })\r\n\r\n\r\n                           \r\n                       \r\n                           console.log(\"paso por aca \")\r\n                        setlistapaper(nuevalista)   \r\n\r\n\r\n\r\n\r\n\r\n              \r\n                }\r\n               \r\n               \r\n        }\r\n\r\n        } catch (error) {\r\n                console.log(error)\r\n        }\r\n        setcargando(false)\r\n }\r\n\r\n//  const  manejarSnapshot=(snapshot)=>{\r\n\r\n       \r\n       \r\n//         console.log(listapaper) \r\n//         const  lista =snapshot.docs.map(doc=>{\r\n//             return{\r\n//                 id:doc.id,\r\n//                 ...doc.data()\r\n//             }\r\n//         })\r\n//         console.log(lista)\r\n//         setcargando(false)\r\n\r\n//                 if(lista.length!=0){\r\n//                         setvacio(false) \r\n//                         setultimoDocumento(lista[lista.length-1].id)\r\n                        \r\n//                 }else{\r\n                       \r\n//                         setvacio(true)\r\n\r\n//                 }        \r\n//         setlistapaper(lista)\r\n//     } \r\n\r\n    \r\n\r\n\r\n\r\n//nueva funcion de busqueda \r\n\r\nconst buscarTexto=async(texto_busqueda,recientes,valorados)=>{\r\n\r\n         let pruebatexto=texto_busqueda       \r\n        setcargando(true)\r\n        setTituloGeneral(`Search results : \"${pruebatexto}\" `)\r\n       \r\n        try {   \r\n           \r\n                // if(recientes){\r\n                        console.log(pruebatexto)\r\n                        setlistapaper([])\r\n                        \r\n                        // ver la data que esta llegando  \r\n \r\n                          const query=await firebase.db.collection(\"paper\").orderBy (\"busqueda\")\r\n                        .startAt(pruebatexto).endAt(pruebatexto+'\\uf8ff').limit(5).get()\r\n\r\n                        const resultado=query.docs.map((paperObje)=>{\r\n                        console.log(pruebatexto)        \r\n                        return {...paperObje.data(),\r\n                        click:false\r\n                        }})\r\n                        console.log(resultado)\r\n                        setlistapaper(resultado)\r\n                        // .then((coleccion)=>\r\n                        // {                        \r\n                        //         console.log(pruebatexto)\r\n\r\n                                \r\n                        //             if(coleccion.size!=0){            \r\n                                           \r\n                        //                         const lista =coleccion.docs.map((paperObje)=>paperObje.data())\r\n                        //                         console.log(lista)              \r\n                        //                         console.log(listapaper)              \r\n\r\n\r\n                        //                         setultimoDocumento(lista[lista.length-1].id)\r\n                        //                         setlistapaper((listapaper)=>[...listapaper,...lista])\r\n                        //                         setcargando(false)\r\n                                              \r\n                        //                 }\r\n                        //                 if(coleccion.length==5){\r\n                        //                         setvacio(true)\r\n                        //                 }else{\r\n                        //                         setvacio(false)\r\n                        //                 }\r\n        \r\n                        // }\r\n                        \r\n                                \r\n                // }else{\r\n                        // if(valorados){\r\n                        //         setlistapaper([])\r\n                        //        await  firebase.db.collection(\"paper\").orderBy(\"likes\",\"desc\").limit(5).get().then((coleccion)=>\r\n                        //         {\r\n        \r\n                        //                     if(coleccion.size!=0){            \r\n        \r\n                        //                                 const lista =coleccion.docs.map((paperObje)=>paperObje.data())\r\n                        //                                 setultimoDocumento(lista[lista.length-1].id)\r\n                        //                                 setlistapaper((listapaper)=>[...listapaper,...lista])\r\n                        //                                 setcargando(false)\r\n                                                        \r\n                        //                         }\r\n                        //                         if(coleccion.length==5){\r\n                        //                                 setvacio(true)\r\n                        //                         }else{\r\n                        //                                 setvacio(false)\r\n                        //                         }\r\n        \r\n                        //         }\r\n                                \r\n                        //         )               \r\n                        // }else{\r\n                           \r\n                        //          let nuevalista=[]\r\n                        //             await firebase.db.collection(\"paper\").orderBy(\"id\",\"desc\").limit(5).get().then(valor=>{\r\n                                        \r\n                                       \r\n                        //                 nuevalista=valor.docs.map(doc=>{\r\n                                               \r\n                        //                                           return{\r\n                        //                                                 id:doc.id,\r\n                        //                                                 ...doc.data()\r\n                        //                                             }\r\n                                                \r\n                        //                 })\r\n                                       \r\n                        //                 if(nuevalista.length==5){\r\n                        //                         setvacio(true)\r\n                        //                 }else{\r\n                        //                         setvacio(false)\r\n                        //                 }\r\n        \r\n                        //                 if(nuevalista.length==0){\r\n                        //                         setultimoDocumento(0)\r\n                        //                 }else{\r\n                        //                 setultimoDocumento(nuevalista[nuevalista.length-1].id)\r\n                        //                  }\r\n                               \r\n        \r\n                        //            })\r\n        \r\n        \r\n                                   \r\n                               \r\n                        //            console.log(\"paso por aca \")\r\n                        //         setlistapaper(nuevalista)   \r\n        \r\n        \r\n        \r\n        \r\n        \r\n                      \r\n                        // }\r\n                       \r\n                       \r\n                \r\n        \r\n                } catch (error) {\r\n                        console.log(error)\r\n                }\r\n\r\n\r\n                \r\n                setcargando(false)\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\nconst funcionCorazondos=(valor)=>{\r\n\r\n        if(valor.likes>0){\r\n            return true       \r\n        }else{\r\n           return false\r\n        }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nconst pedirpaper=()=>{\r\n\r\n//buscar si  ahi un paper en especifico \r\n//\r\nsetcargando(true)\r\n\r\nconst {papermatch}=props.paperid\r\n\r\nif(papermatch){\r\n\r\n        buscarPorId(papermatch)\r\n\r\n}else{\r\n\r\n  // LLAMAR A LOS PAPER\r\n\r\n  \r\n   \r\n  listadepaper(props.recientes,props.valorados)\r\n\r\n}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n    \r\n\r\n\r\nconst borrar=(e)=>{\r\n\r\n\r\n      \r\n\r\n        Swal.fire({\r\n                title: '¿Esta seguro que desea borrar el siguiente registro?',\r\n                text:`${e.titulo}`,\r\n                showDenyButton: true,\r\n                confirmButtonColor: '#21cbce',                    \r\n                confirmButtonText: `Borrar`,\r\n                denyButtonText: `Cancelar`,\r\n              }).then((result) => {\r\n                /* Read more about isConfirmed, isDenied below */\r\n\r\n\r\n                console.log(e.id)\r\n                if (result.isConfirmed) {\r\n\r\n                                        \r\n                                firebase.db.collection(\"paper\").doc(e.id).delete().then(() => {\r\n                                        \r\n                                     \r\n\r\n\r\n                                        let nuevaLista=[]\r\n                                        \r\n                                        listapaper.map((valor)=>{\r\n                                                      \r\n                                                      \r\n                                                        if(valor.id!=e.id){\r\n                                                                console.log(valor)\r\n                                                                nuevaLista.push(valor)\r\n                                                        }\r\n\r\n                                        })\r\n                                       \r\n                                     \r\n                                        //pedirpaper()\r\n                                    \r\n                                       \r\n\r\n                                }).catch((error) => {\r\n                                        console.error(\"Error removing document: \", error);\r\n                                });\r\n\r\n\r\n                                e.etiquetas.map( valor=>{\r\n \r\n                                        firebase.db.collection(\"etiquetas\").doc(valor.id).collection(\"paper\").doc(e.id).delete().then(async() => {\r\n                                             //  console.log(\"Document successfully deleted!\");\r\n\r\n\r\n\r\n                                              let soloTag=await firebase.db.collection(\"etiquetas\").doc(valor.id).get().then((doc)=>{\r\n\r\n\r\n                                                        return{...doc.data()}\r\n                                              \r\n                                              })\r\n\r\n                                                console.log(soloTag)\r\n                                                let nuevoObjeto={  ...soloTag,\r\n                                                        contar:soloTag.contar-1}\r\n\r\n                                                  console.log(nuevoObjeto)      \r\n\r\n                                                firebase.db.collection(\"etiquetas\").doc(valor.id).set(nuevoObjeto)\r\n\r\n\r\n                                        }).catch((error) => {\r\n                                            console.error(\"Error removing document: \", error);\r\n                                        });\r\n                                       \r\n        \r\n                                    })\r\n\r\n                              var  borrarArchivo= firebase.storage.ref().child(\"PDF\").child(e.id)    \r\n\r\n\r\n                              var  borrarImagen= firebase.storage.ref().child(\"IMAGEN\").child(e.id)    \r\n\r\n                              borrarArchivo.delete().then(function() {\r\n                                      //console.log(\"borrado\")\r\n                                // File deleted successfully\r\n                              }).catch(function(error) {\r\n                                      //console.log(error)\r\n                                // Uh-oh, an error occurred!\r\n                              });          \r\n\r\n                                        if(e.imagen!=null){ borrarImagen.delete().then(function() {\r\n                                                        //console.log(\"borrado\")\r\n                                                // File deleted successfully\r\n                                                }).catch(function(error) {\r\n                                                        console.log(error)\r\n                                                // Uh-oh, an error occurred!\r\n                                                }); }  \r\n\r\n\r\n                  Swal.fire({title:'Borrado!', confirmButtonColor:'#21cbce',icon: 'success'}).then(()=>{\r\n                          pedirpaper()\r\n                  })\r\n                } else if (result.isDenied) {\r\n                \r\n                }\r\n              })\r\n\r\n            \r\n}\r\n\r\n\r\n\r\n\r\n useEffect(() => {\r\n\r\n// //buscar si  ahi un paper en especifico \r\n// //\r\n setcargando(true)\r\n\r\n// const {papermatch}=props.paperid\r\n\r\n// if(papermatch){\r\n\r\n//         buscarPorId(papermatch)\r\n\r\n// }else{\r\n\r\n//   // LLAMAR A LOS PAPER\r\n\r\n  \r\n        \r\n//   listadepaper(props.recientes,props.valorados)\r\n\r\n// }\r\n\r\n                if(props.busqueda!=undefined){\r\n                        const texto_busqueda=props.busqueda.buscado\r\n                        buscarTexto(texto_busqueda,props.recientes,props.valorados)        \r\n                }\r\n                // else{\r\n                        //  pedirpaper()\r\n                        //  }\r\n\r\n                //     console.log(listapaper)\r\n                //     setlistapaper([])\r\n\r\n }, [props.recientes,props.paperid,props.busqueda])\r\n\r\n\r\n\r\n\r\n const funcionCorazon=(valor)=>{\r\n       \r\n        let votos_usuarios=[]\r\n\r\n        if(valor.haVotado==undefined){\r\n                console.log(\"paso por aca dodo\")\r\n                return false\r\n        }else{\r\n\r\n        votos_usuarios=valor.haVotado\r\n        if(votos_usuarios.length==0){\r\n                console.log(\"paso por aca dodo\")\r\n                return false\r\n        }else{\r\n                \r\n                if(usuario!=undefined){\r\n                if(votos_usuarios.includes(usuario.uid)){\r\n                        return true\r\n                }else{\r\n                        return false\r\n                }}\r\n\r\n        }\r\n}\r\n\r\n       \r\n\r\n }\r\n\r\n\r\n\r\n  const pedirMas=async()=>{\r\n                setcargandodos(true)\r\n                const recientes=props.recientes\r\n                const valorados=props.valorados\r\n                const paperRef=firebase.db.collection(\"paper\")\r\n\r\n\r\n        try {\r\n           \r\n                if(recientes){\r\n\r\n\r\n\r\n                               \r\n                        return paperRef.doc(ultimoDocumento).get().then(async(doc)=>\r\n                        {\r\n                           //     console.log(doc)\r\n                          var valoradosOrdenados = await paperRef.orderBy(\"subida\",\"desc\").startAfter(doc).limit(5).get()\r\n\r\n                                if(valoradosOrdenados.size!=0){            \r\n                                        \r\n                             //      console.log(valoradosOrdenados)     \r\n                                 const lista =valoradosOrdenados.docs.map((paperObje)=>paperObje.data())\r\n                                 setultimoDocumento(lista[lista.length-1].id)\r\n                                 setlistapaper((listapaper)=>[...listapaper,...lista])       \r\n                                 setcargandodos(false)\r\n                        }else{\r\n                                                \r\n                                setvacio(false)  \r\n                                setcargandodos(false)\r\n                          }\r\n\r\n                        }\r\n                        )\r\n\r\n\r\n\r\n                      \r\n                 \r\n        \r\n                }else{ \r\n                      \r\n        \r\n                        if(valorados){\r\n                            \r\n\r\n\r\n                                // const valoradosRef=firebase.db.collection(\"paper\")\r\n\r\n                                return paperRef.doc(ultimoDocumento).get().then(async(doc)=>\r\n                                {\r\n                                        console.log(doc)\r\n                                  var valoradosOrdenados = await paperRef.orderBy(\"likes\",\"desc\").startAfter(doc).limit(5).get()\r\n\r\n                                        if(valoradosOrdenados.size!=0){            \r\n                                                \r\n                                           console.log(valoradosOrdenados)     \r\n                                         const lista =valoradosOrdenados.docs.map((paperObje)=>paperObje.data())\r\n                                         setultimoDocumento(lista[lista.length-1].id)\r\n                                         setlistapaper((listapaper)=>[...listapaper,...lista]) \r\n                                         setcargandodos(false)      \r\n\r\n                                }else{\r\n                                                        \r\n                                        setvacio(false)  \r\n                                        setcargandodos(false)\r\n                                  }\r\n\r\n                                }\r\n                                )\r\n\r\n                                \r\n                                // firebase.db.collection(\"paper\").orderBy(\"likes\",\"desc\").startAfter(ultimoDocumento).limit(5).get().then((coleccion)=>\r\n                                // {\r\n\r\n\r\n                                //                 console.log(\"dentro de la coleccion \")\r\n\r\n                                //             if(coleccion.size!=0){            \r\n                                                        \r\n                                //                         const lista =coleccion.docs.map((paperObje)=>paperObje.data())\r\n                                //                         setultimoDocumento(lista[lista.length-1].likes)\r\n                                //                         setlistapaper((listapaper)=>[...listapaper,...lista])\r\n                                                        \r\n                                //                 }else{\r\n                                                        \r\n                                //                       setvacio(true)  \r\n                                //                 }\r\n                                // }\r\n                                \r\n                                // )\r\n                        }else{\r\n\r\n\r\n                                return paperRef.doc(ultimoDocumento).get().then(async(doc)=>\r\n                                {\r\n                                        //console.log(doc)\r\n                                  var valoradosOrdenados = await paperRef.orderBy(\"id\",\"desc\").startAfter(doc).limit(5).get()\r\n\r\n                                        if(valoradosOrdenados.size!=0){            \r\n                                                \r\n                                          // console.log(valoradosOrdenados)     \r\n                                         const lista =valoradosOrdenados.docs.map((paperObje)=>paperObje.data())\r\n                                         setultimoDocumento(lista[lista.length-1].id)\r\n                                         setlistapaper((listapaper)=>[...listapaper,...lista])    \r\n                                         setcargandodos(false)   \r\n\r\n                                }else{\r\n                                                        \r\n                                        setvacio(false)  \r\n                                        setcargandodos(false)\r\n                                  }\r\n\r\n                                }\r\n                                )\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                // comentar \r\n                        //       firebase.db.collection(\"paper\").orderBy(\"id\",\"desc\").startAfter(ultimoDocumento).limit(1).get().then((coleccion)=>\r\n                        //         {\r\n\r\n                        //                     if(coleccion.size!=0){            \r\n\r\n                        //                                 const lista =coleccion.docs.map((paperObje)=>paperObje.data())\r\n                        //                                 setultimoDocumento(lista[lista.length-1])\r\n                        //                                 setlistapaper((listapaper)=>[...listapaper,...lista])\r\n                                                        \r\n                        //                         }else{\r\n                                                        \r\n                        //                               setvacio(true)  \r\n                        //                         }\r\n                        //         }\r\n                                \r\n                        //         )\r\n                        }\r\n                       \r\n                       \r\n                }\r\n        \r\n                } catch (error) {\r\n                        console.log(error)\r\n                }\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n// actualizar etiquetas \r\n\r\n const updateTag=()=>\r\n {\r\n\r\n\r\n }\r\n\r\n\r\n // buscar por id del paper \r\n\r\n  const buscarPorId=async(id)=>{\r\n//  alert(id)\r\n  var variable=await firebase.db.collection(\"paper\").doc(id)\r\n //console.log(variable)\r\n \r\n    \r\n variable.get().then((doc) => {\r\n        // Document was found in the cache. If no cached document exists,\r\n        // an error will be returned to the 'catch' block below.\r\n       // console.log(\"Cached document data:\", doc.data());\r\n        setlistapaper([doc.data()])\r\n\r\n        setcargando(false)\r\n        setvacio(false)\r\n\r\n    }).catch((error) => {\r\n        console.log(\"Error getting cached document:\", error);\r\n    });\r\n    \r\n\r\n\r\n  }\r\n\r\n \r\n  const buscarChips=(valor)=>{\r\n\r\n\r\n        history.push(`/tag/${valor.id}`)\r\n      \r\n  }      \r\n\r\n\r\n\r\nconst megusta=(valor)=>{\r\n       \r\n      \r\n        if(usuario==null) {\r\n                return history.push(\"/login\")\r\n        }\r\n\r\n\r\n       \r\n          \r\n          console.log(valor.haVotado)\r\n\r\n        if(valor.haVotado==undefined){                    \r\n                var antiguoHaVotado=[]\r\n         }else{\r\n                var antiguoHaVotado=valor.haVotado\r\n         }\r\n\r\n\r\n     if(antiguoHaVotado.includes(usuario.uid)){ \r\n             console.log(antiguoHaVotado)\r\n\r\n        antiguoHaVotado=antiguoHaVotado.filter(function(obj){\r\n                return obj!==usuario.uid        \r\n        })\r\n        valor.likes=valor.likes-1\r\n\r\n        let  nuevoValor={\r\n                ...valor,\r\n                 likes:valor.likes,\r\n                haVotado:antiguoHaVotado\r\n        }\r\n\r\n\r\n        firebase.db.collection(\"paper\").doc(valor.id).update(nuevoValor)\r\n\r\n\r\n        // armar de nuevo el arreglo con el valor \r\n\r\n         armararreglo(nuevoValor)\r\n\r\n       // mapear etiquetas \r\n\r\n        valor.etiquetas.map(valordos=>{\r\n                firebase.db.collection(\"etiquetas\").doc(valordos.id).collection(\"paper\").doc(valor.id).update({\r\n                        ...valor,\r\n                        likes:valor.likes,\r\n                       haVotado:antiguoHaVotado     \r\n\r\n                })\r\n        })\r\n\r\n        \r\n         //setpaper({...valor,likes:valor.likes})\r\n        // actualizar la etiquetas\r\n        \r\n        \r\n\r\n\r\n\r\n              \r\n\r\n     }else{ \r\n    \r\n     const nuevoHaVotado = [...antiguoHaVotado, usuario.uid];\r\n     valor.likes=valor.likes+1   \r\n\r\n\r\n     let  nuevoValor={\r\n        ...valor,\r\n         likes:valor.likes,\r\n        haVotado:nuevoHaVotado\r\n        }\r\nfirebase.db.collection(\"paper\").doc(valor.id).update(nuevoValor)\r\n\r\n      // mapear etiquetas \r\n\r\n      valor.etiquetas.map(valordos=>{\r\n        firebase.db.collection(\"etiquetas\").doc(valordos.id).collection(\"paper\").doc(valor.id).update({\r\n                ...valor,\r\n                likes:valor.likes,\r\n                haVotado:nuevoHaVotado  \r\n\r\n        })\r\n})          \r\n\r\narmararreglo(nuevoValor)\r\n     //setpaper({...valor,likes:valor.likes})\r\n   \r\n      }\r\n      console.log(\"final\")\r\n}\r\n\r\nconst armararreglo=(nuevoValor)=>{\r\n\r\n\r\n                 let   nuevalista=listapaper.map(valor=>{\r\n                                 \r\n                                if (nuevoValor.id==valor.id){\r\n                                        \r\n                                        return{\r\n                                                ...nuevoValor\r\n                                        }                   \r\n                                }else{\r\n\r\n                                        return{ ...valor}\r\n                                }\r\n\r\n\r\n\r\n                 })\r\n\r\n\r\n                 console.log(nuevalista)\r\n                 setlistapaper(nuevalista)\r\n\r\n\r\n}\r\n\r\n\r\nconst megustaSinValidarUsuario=(valor)=>{\r\n    \r\n\r\n        if(valor.click){    \r\n          valor.likes=valor.likes-1\r\n          valor.click=false\r\n     }else{\r\n          valor.likes=valor.likes+1\r\n          valor.click=true\r\n     }\r\n     \r\n          const nuevoHaVotado = [];\r\n          let  nuevoValor={\r\n             ...valor,\r\n              likes:valor.likes,\r\n             haVotado:nuevoHaVotado\r\n             }\r\n     \r\n     \r\n     \r\n            //guarda datos en el paper\r\n            firebase.db.collection(\"paper\").doc(valor.id).update({\r\n             ...valor,\r\n             likes:valor.likes,\r\n             haVotado:nuevoHaVotado\r\n     \r\n     })\r\n     \r\n           // mapear etiquetas\r\n           valor.etiquetas.map(valordos=>{\r\n     \r\n             //guarda datos  en las etiquetas\r\n             firebase.db.collection(\"etiquetas\").doc(valordos.id).collection(\"paper\").doc(valor.id).update({\r\n                     ...valor,\r\n                     likes:valor.likes,\r\n                     haVotado:nuevoHaVotado\r\n     \r\n             })\r\n     })\r\n     \r\n     armararreglo(nuevoValor)\r\n          //setpaper({...valor,likes:valor.likes})\r\n     \r\n          // }\r\n           console.log(\"final\")\r\n     }\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n\r\n\r\n// <Button onClick={()=>{pedirMas()}} >\r\n//                             ver mas\r\n// </Button> \r\n\r\n\r\n\r\n\r\n\r\n        <div  className={clases.margen}>\r\n\r\n\r\n                <div className={clases.divTituloGeneral}>\r\n                         <Typography variant=\"h4\" className={clases.tituloGeneral}>\r\n                                {tituloGeneral}\r\n                        </Typography>\r\n                </div>\r\n\r\n\r\n                <Grid container>\r\n                    <Grid  xs={12}>\r\n                            {                            \r\n                            cargando?\r\n                            <div className={clases.divCircular} >\r\n                            <CircularProgress className={clases.circular}></CircularProgress>\r\n                        </div>\r\n                        :<div>\r\n                           { listapaper.length==0 ?\r\n                              <Typography className={clases.\r\n                              textNoDisponible\r\n                               } align=\"center\" variant=\"h4\">\r\n                                        No hay registros\r\n                              </Typography>          \r\n                           \r\n\r\n                           :\r\n                            listapaper.map((valor)=>(\r\n\r\n                                        <Paper key={valor.id} className={clases.caja} elevation={3}>\r\n                                        <Grid container  className={clases.contenedor}>\r\n                                                <Grid xs={12} sm={12} md={4} >\r\n                                                        <div  >\r\n\r\n                                                             {valor.imagen==null?\r\n\r\n                                                              <div className={clases.divFoto}>\r\n                                                                        < AddAPhotoIcon className={clases.imgFoto}></AddAPhotoIcon>  \r\n                                                                      \r\n                                                              </div> :         \r\n                                                           <div   className={clases.divImagen} style={{\r\n                                                          backgroundImage:`url(${valor.imagen})`,\r\n                                                         \r\n                                                        }} >\r\n\r\n                                                                \r\n                                                                </div>\r\n\r\n                                                             }   \r\n                                                        </div>\r\n                                                </Grid>\r\n\r\n\r\n                                                <Grid  xs={12} sm={12} md={6}>\r\n                                                   <div className={clases.divTexto}>             \r\n\r\n                                                <Typography variant=\"h5\" className={clases.titulo} >\r\n                                                                {valor.titulo}             \r\n                                                </Typography>\r\n                                              \r\n                                                        <Typography className={clases.fecha} variant=\"subtitle2\">\r\n                                                                {moment(new Date(valor.subida.seconds*1000)).format(\"D MMM YYYY\")}    \r\n                                                </Typography>\r\n\r\n\r\n                                                \r\n                                                \r\n\r\n                                                <Typography variant=\"body2\" className={clases.resumen}>\r\n                                                        {valor.resumen}\r\n                                                </Typography>\r\n\r\n                                                <Typography variant=\"subtitle1\">\r\n\r\n                                                        {valor.etiquetas.map((valor)=>(\r\n                                                //      <Link style={{textDecoration:\"none\"}} to={`/etiquetas/${valor}`}>   \r\n                                                        <Chip variant=\"outlined\"  className={clases.margenChip} onClick={()=>buscarChips(valor)} color=\"primary\" size=\"small\" label={valor.descripcion} />\r\n                                                //    </Link>     \r\n                                                                        ))}\r\n\r\n\r\n                                                </Typography>\r\n\r\n                                                </div>             \r\n\r\n                                                </Grid>\r\n                                        \r\n                                                <Grid xs={12} sm={12} md={2}>\r\n\r\n                                                 <div className={clases.cajaMeGusta}>\r\n                                                                 <Typography className={clases.centrarComponente} variant=\"subtitle1\" >\r\n\r\n                                                                <Button onClick={()=>megustaSinValidarUsuario(valor)}\r\n                                                                className={clases.botonLikes}\r\n                                                                startIcon={\r\n\r\n                                                                funcionCorazondos(valor)?\r\n                                                                // <CorazonLleno></CorazonLleno>\r\n                                                                <>\r\n                                                                <img height=\"25\" src={CorazonLleno}></img>\r\n                                                                \r\n                                                                </>\r\n                                                                :\r\n\r\n                                                                //  <Corazon></Corazon>\r\n                                                                <>\r\n                                                                <img  height=\"25\"  src={Corazon}></img>\r\n                                                               \r\n                                                                </>\r\n\r\n                                                               }\r\n                                                                >\r\n\r\n                                                                        {valor.likes}\r\n                                                                </Button>\r\n\r\n                                                                <Typography className={clases.textUpVote} variant='subtitle2' >\r\n                                                                 upvote\r\n                                                                 </Typography>\r\n                                                                \r\n\r\n                                                </Typography>\r\n                                                </div>\r\n                                               \r\n                                               \r\n                                               \r\n                                               <div className={clases.botonPdf}>\r\n                                                <Typography  className={clases.centrarComponente} variant=\"subtitle1\"\r\n                                                          >\r\n\r\n\r\n\r\n\r\n                                                <a href={valor.pdf==null?\r\n                                                    valor.link:valor.pdf\r\n                                                }  style={{textDecoration:\"none\"}} target=\"_blank\">\r\n                                                <Button  className=\"botoneditar\" variant=\"contained\"\r\n\r\n\r\n                                                >\r\n\r\n                                                        get it\r\n                                                </Button>\r\n\r\n                                                </a>\r\n\r\n                                                </Typography>\r\n                                                </div>        \r\n\r\n           \r\n\r\n                                              {usuario==null?\r\n\r\n\r\n                                                      \r\n                                                        <div></div>\r\n                                                        :\r\n                                        \r\n\r\n                                                        usuario.administrador?\r\n\r\n                                                        <div className={clases.diveditarborrar}>          \r\n\r\n                                                        <Grid container>\r\n                                                                \r\n                                                                 <Grid xs={6}>\r\n                                                                \r\n                                                                        <Typography variant=\"subtitle1\" align=\"center\">\r\n                                                                                <Link to={`/editarpaper/${valor.id}`}>\r\n                                                                                        <IconButton  variant=\"outlined\" color=\"primary\">\r\n                                                                                        <Lapiz></Lapiz>\r\n                                                                                        </IconButton>\r\n                                                                                </Link>\r\n        \r\n                                                                        </Typography>\r\n                                                                </Grid>\r\n                                                                <Grid  xs={6}>\r\n                                                                        <Typography variant=\"subtitle1\" align=\"center\">\r\n        \r\n                                                                        <IconButton  variant=\"contained\"  color=\"primary\"  onClick={()=>borrar(valor)}>\r\n                                                                                <Basurero></Basurero>    \r\n                                                                        </IconButton>\r\n        \r\n                                                                        </Typography>\r\n                                                                </Grid>\r\n                                                        </Grid>\r\n                                             </div>                              \r\n        \r\n                                                 :\r\n                                                 <div></div>\r\n\r\n                                                        }  \r\n       </Grid>\r\n\r\n\r\n\r\n                                        </Grid>\r\n\r\n                                        \r\n\r\n\r\n\r\n\r\n                                        </Paper>\r\n                            ))\r\n                         }\r\n\r\n                            {cargandodos?\r\n\r\n<div className={clases.divCircular} >\r\n<CircularProgress className={clases.circular}></CircularProgress>\r\n</div>\r\n\r\n\r\n\r\n:\r\n\r\nvacio==true &&\r\n\r\n        <Typography align=\"center\">\r\n        <Button \r\n                endIcon={<ExpandMoreIcon></ExpandMoreIcon>}\r\n                variant =\"contained\"\r\n                color=\"primary\"\r\n        \r\n        onClick={()=>{\r\n                pedirMas()\r\n        }} >\r\n        ver mas\r\n\r\n                </Button> \r\n</Typography>   }                     \r\n\r\n\r\n\r\n\r\n\r\n                          \r\n                            </div>\r\n                            }\r\n                               \r\n                              \r\n                      \r\n                        \r\n                     </Grid>             \r\n\r\n\r\n                </Grid>\r\n\r\n\r\n        </div>\r\n   \r\n )\r\n}\r\n\r\nexport default Caja\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\Comentario.jsx",["473","474","475","476"],"import React from 'react'\r\nimport { Grid,Typography, Avatar, makeStyles,CircularProgress,Paper } from '@material-ui/core'\r\nimport moment from \"moment\"\r\nconst estilos=makeStyles((theme=>({\r\n\r\n  \r\ntitulo:{\r\n\r\n    fontWeight:\"500\",\r\n    fontFamily:\"nunito\"\r\n},\r\nfecha:{\r\n    fontWeight:\"500\",\r\n    \r\n    fontFamily:\"nunito\",\r\n    paddingTop:\"5px\",\r\n    color:\"#717171\"\r\n},\r\ncomentario:{\r\n    fontWeight:\"500\",\r\n    fontFamily:\"nunito\",\r\n    paddingTop:\"5px\",\r\n    color:\"#717171\",\r\n    margin:\"11px\",\r\n    padding:\"11px\"\r\n},\r\n\r\n})))\r\n\r\nconst   Comentario = (props) => {\r\n    const clases=estilos()\r\n    const Comentario=props.Comentario\r\n    return (\r\n        <div style={{marginBottom:\"50px\"}} >\r\n            \r\n\r\n            <Grid container>\r\n                        <Grid xs={12} md={2}>\r\n\r\n\r\n                        <Avatar    src={`${Comentario.usuario.imagen}`}  style={{top:\"25%\",left:\"36%\"\r\n                                       }} ></Avatar>\r\n\r\n\r\n                        </Grid>\r\n                        <Grid xs={12} md={10}>\r\n\r\n                            <Grid xs=\"12\">\r\n                                <Typography variant=\"subtitle2\" className={clases.fecha}>\r\n                                    {moment(new Date(Comentario.fecha.seconds*1000)).format(\"D MMM YYYY\")}    \r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid xs=\"12\">\r\n                            <Typography variant=\"h5\" className={clases.titulo}>\r\n                                    {Comentario.logueado!=true?\r\n                                    Comentario.usuario:\r\n                                    Comentario.usuario.nombre}\r\n                                </Typography>\r\n\r\n                            </Grid>\r\n                            <Grid xs=\"12\">\r\n                            <Typography variant=\"subtitle2\" className={clases.fecha}>\r\n                            {Comentario.logueado==true&&\r\n                                    \r\n                                    Comentario.usuario.email}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid xs={12}>\r\n                                \r\n                            <Typography variant=\"subtitle2\" className={clases.fecha}>\r\n                            {Comentario.website!==undefined&&\r\n                                    <a href={Comentario.website} target='_blank'>\r\n                                    {Comentario.website}\r\n                                    </a>}\r\n                                </Typography>\r\n                            </Grid>\r\n                          \r\n                        </Grid>\r\n\r\n                        <Grid xs=\"12\">\r\n                                <Paper elevation={1}>\r\n                                <Typography variant=\"subtitle1\" className={clases.comentario}>\r\n                                {Comentario.comentario}\r\n                                \r\n                                </Typography>\r\n\r\n                                </Paper>\r\n\r\n                            </Grid>\r\n\r\n                    </Grid>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Comentario\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\TextoEditor.jsx",["477","478","479","480","481","482"],"import React ,{useState,useEffect}from 'react'\r\nimport { convertToRaw } from 'draft-js';\r\nimport { Editor } from 'react-draft-wysiwyg';\r\nimport draftToHtml from 'draftjs-to-html';\r\nimport htmlToDraft from 'html-to-draftjs';\r\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\r\nimport {makeStyles} from '@material-ui/core'\r\n\r\n\r\n\r\n\r\nconst estilo=makeStyles((theme)=>({\r\n\r\neditor:{\r\n  minHeight:'150px'\r\n}\r\n\r\n}))\r\n\r\n\r\n\r\nconst TextoEditor = (props) => {\r\n\r\n  const clases=estilo()\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n      <Editor\r\n         editorState={props.editorState}\r\n          wrapperClassName=\"demo-wrapper\"\r\n          editorClassName=\"demo-editor\"\r\n          onEditorStateChange={props.onEditorStateChange}\r\n          localization={{\r\n            locale: 'es',\r\n          }}\r\n          toolbar={{fontFamily:{\r\n            options: ['Arial', 'Georgia', 'Impact', 'Tahoma', 'Times New Roman','Verdana','Lato'],\r\n          }}}\r\n        />\r\n        {/* <textarea\r\n          disabled\r\n          value={draftToHtml(convertToRaw(props.editorState.getCurrentContent()))}\r\n        />\r\n          */}\r\n      \r\n         \r\n      \r\n      </div>\r\n    )\r\n}\r\n\r\nexport default TextoEditor\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\Verinfo.jsx",["483","484","485","486"],"import React, { useState,useEffect } from 'react'\r\nimport Firebase from '../Funciones/FuncionesFirebase'\r\nimport { Grid,Typography } from '@material-ui/core'\r\nimport Cargando from '../Componetes/Cargando'\r\nimport Estructura from '../Componetes/VerInfo/Estructura'\r\n\r\n\r\nconst registroVacio =()=>(\r\n    <>\r\n    <Typography variant=\"h5\" align=\"center\">\r\n    the record does not exist\r\n  </Typography>\r\n  <Typography variant=\"h5\" align=\"center\">\r\n      <a href='/'>\r\n               \r\n               Come back\r\n\r\n      </a>\r\n  </Typography>\r\n    </>\r\n)\r\n\r\n\r\n\r\n\r\n\r\nconst Verinfo = (props) => {\r\n\r\n            const [informacion, setinformacion] = useState({})\r\n            const registroVa=registroVacio()\r\n            const [cargando, setcargando] = useState(true)\r\n\r\n\r\n    useEffect(async () => {\r\n\r\n       setcargando(true)\r\n        const {id}=props.match.params\r\n        const retornarInfo=await Firebase.retornarInformacion(id)\r\n        if(retornarInfo!=undefined){\r\n\r\n                setinformacion(retornarInfo, setcargando(false))\r\n        }\r\n       \r\n        \r\n    }, [])\r\n\r\n\r\n\r\n\r\n    \r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <Grid container>\r\n                    <Grid xs={1} /> \r\n\r\n                    <Grid xs={10} > \r\n\r\n                        {cargando?\r\n                        \r\n                        <Cargando/>\r\n                        :\r\n                        Object.keys(informacion).length == 0?\r\n                        \r\n                        registroVa\r\n\r\n                        :\r\n                      \r\n                            <Estructura informacion={informacion} ></Estructura>\r\n\r\n                        }\r\n\r\n                      </Grid>\r\n                        <Grid xs={1}></Grid>\r\n\r\n\r\n            </Grid>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Verinfo\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\Info.jsx",["487","488"],"import React,{ useEffect,useState} from 'react'\r\nimport {Typography,TextField,Grid, Button,makeStyles,IconButton,CircularProgress} from '@material-ui/core'\r\nimport Formulario from '../Componetes/Info/Formulario'\r\nimport Imagen from '../Componetes/Info/Imagen'\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport Firebase from '../Funciones/FuncionesFirebase'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Swal from \"sweetalert2\"\r\n\r\n\r\n\r\nconst estilos=makeStyles((theme)=>({\r\n    boton: {\r\n       \r\n            backgroundColor: '#21cbce',\r\n            marginTop:'40px',\r\n            color:'#FFFFFF', \r\n            '&:hover': {\r\n                backgroundColor:'#FFFFFF' ,\r\n                color:'#21cbce', \r\n\r\n              },\r\n\r\n    },\r\n    botonBasurero: {\r\n       \r\n        backgroundColor: '#e83f33',\r\n        marginTop:'40px',\r\n        marginBottom:'40px',\r\n        color:'#FFFFFF', \r\n        '&:hover': {\r\n            backgroundColor:'#FFFFFF' ,\r\n            color:'#e83f33', \r\n\r\n          },\r\n\r\n},\r\n    alerta:{\r\n\r\n        margin:'30px 0px 0px'\r\n    },\r\n    circular:{\r\n        height:\"72px !important\",\r\n        width:\"72px !important\",\r\n        display:\"block\",\r\n        margin:\"auto\"\r\n        },\r\n        \r\n        divCircular:{\r\n            marginTop:\"100px\"\r\n    \r\n        },\r\n\r\n}))\r\n\r\n\r\nfunction Alert(props) {\r\n    const clases = estilos();\r\n    return <MuiAlert className={clases.alerta} elevation={6} variant=\"filled\" {...props} />;\r\n  }\r\n\r\n\r\n\r\nconst Info = (props) => {\r\n\r\n\r\n    const history = useHistory()\r\n    const [link,setlink] = useState([])\r\n    const [paper, setpaper] = useState({})\r\n    const [imagen, setimagen] = useState({file:null,imagen:null})\r\n    const [info, setinfo] = useState({\r\n        id:'',\r\n        titulo:'',\r\n        resumen:'',\r\n        imagen:'',\r\n        link:[]\r\n    })\r\n    const [errores, seterrores] = useState({\r\n        titulo:null,\r\n        resumen:null,\r\n        imagen:null,\r\n        \r\n    })\r\n    const [errorUrl, seterrorUrl] = useState(false)\r\n    const [cargando, setcargando] = useState(false)\r\n    const clases=estilos()\r\n    const actualizarState=(e)=>{\r\n        e.preventDefault()\r\n        setinfo({...info,[e.target.name]:e.target.value})\r\n    }\r\n\r\n\r\n\r\nuseEffect(async() => {\r\n    setcargando(true)\r\n    const {id}=props.match.params\r\n    //buscar  ver si el informacion  \r\n    let retornar_paper=await Firebase.retornarPaper(id)\r\n    \r\n\r\n    console.log(retornar_paper)    \r\n    if (retornar_paper!=undefined){\r\n\r\n    setpaper(retornar_paper)   \r\n    const retornarInfo =await Firebase.retornarInformacion(id) \r\n    console.log(retornarInfo)    \r\n\r\n    if(retornarInfo!=undefined){    \r\n\r\n        console.log(retornarInfo)  \r\n\r\n    //agregar link \r\n    setlink(prevState=>[...retornarInfo.link])\r\n    // agregar imagen  \r\n\r\n    setimagen({file:retornarInfo.imagen})\r\n\r\n    setinfo({...retornarInfo,id:id})\r\n}else{\r\n\r\n    setinfo({...retornarInfo,id:id})\r\n\r\n}\r\n}else{\r\n    seterrorUrl(true)\r\n}\r\n\r\n    setcargando(false)\r\n\r\n}, [errores])\r\n\r\n\r\nconst crearInfo =async()=> {\r\n\r\n    \r\n    //validaciones \r\n     let errores=validando()\r\n    // armar parametro nuevo\r\n\r\n\r\n    try {\r\n        \r\n        if(Object.keys(errores).length){\r\n \r\n        }else{\r\n            const  imgInfo=await Firebase.subirImagen(info.id,imagen)\r\n            let newInfo={...info,link:link,imagen:imgInfo}\r\n            console.log(newInfo)\r\n            let respuesta=await Firebase.CrearInformacion(newInfo,paper)\r\n            console.log(respuesta)\r\n            props.history.push(\"/\")            \r\n        }\r\n    } catch (error) {\r\n        console.log(error)\r\n\r\n    }\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n//validaciones\r\n\r\nconst validando =()=> {\r\n    let  errores  = validacion()\r\n    seterrores(errores)\r\n    return errores\r\n\r\n}\r\n\r\n\r\nconst validacion=()=>{\r\n  \r\n    let prueba={}\r\n\r\n    //validar errores \r\n\r\n    if(info.titulo.trim()==\"\"){\r\n            prueba.titulo=\"el titulo es requerido\"\r\n    }\r\n\r\n\r\n    if(info.resumen.trim()==\"\"){\r\n            prueba.resumen=\"el resumen es requerido\"\r\n    }\r\n\r\n  \r\n    if(imagen.file==null){\r\n        prueba.imagen=\" debe subir una imagen\"\r\n}\r\n\r\n   \r\n  return prueba\r\n\r\n\r\n}\r\n\r\n\r\nconst borrarLink=(doc)=>{\r\n    var arr = link\r\n    var pos =arr.indexOf(doc)\r\n    arr.splice(pos, 1)\r\n    setlink([...arr])\r\n    }\r\n\r\n\r\n    const borrar=()=>{\r\n        Swal.fire({\r\n            title: '¿Esta seguro que desea borrar el siguiente registro?',\r\n            text:`${info.titulo}`,\r\n            showDenyButton: true,\r\n            confirmButtonColor: '#21cbce',\r\n            confirmButtonText: `Borrar`,\r\n            denyButtonText: `Cancelar`,\r\n          }).then((result) => {\r\n\r\n            if (result.isConfirmed) {\r\n                // Firebase.db.collection(\"paper\").doc(e.id).delete().then(() => {\r\n                     Firebase.BorrarInformacion(info,paper)\r\n                   //pedirpaper()\r\n                    history.push('/')\r\n                console.log(\"borrado\")\r\n\r\n                // }).catch((error) => {\r\n                //         console.error(\"Error removing document: \", error);\r\n                // });\r\n\r\n\r\n\r\n          }}\r\n          )}\r\n    \r\n       \r\n\r\n    return (\r\n        <Grid container>\r\n\r\n\r\n                    <Grid xs={12} md={2}>\r\n                     \r\n\r\n                     \r\n\r\n                     </Grid>      \r\n\r\n                     <Grid xs={12} md={8}>\r\n\r\n\r\n                    {cargando ?\r\n\r\n                    <div className={clases.divCircular} >\r\n                    <CircularProgress className={clases.circular}></CircularProgress>\r\n\r\n                    </div>\r\n\r\n                    :\r\n                    \r\n                \r\n                    errorUrl?\r\n\r\n                        <>\r\n                        <Typography align=\"center\" variant=\"h4\">\r\n                                El registro no existe\r\n                        </Typography>\r\n                            <Typography align=\"center\">\r\n                                <a href=\"/\">\r\n                                    volver\r\n                                </a>\r\n                            </Typography>\r\n\r\n                             </>\r\n                        :\r\n                \r\n                \r\n                <Grid container>\r\n                <Grid xs={12} md={6}>\r\n                    <Imagen imagen={imagen}  setimagen={setimagen}></Imagen>\r\n                </Grid>       \r\n                <Grid xs={12} md={6}>\r\n                    \r\n                    <Formulario info={info} errores={errores} actualizarState={actualizarState}  borrarLink={borrarLink}  link= {link} setlink={setlink}  ></Formulario>\r\n\r\n                </Grid>       \r\n\r\n                <Grid className=\"root\" xs={12}>\r\n                    \r\n\r\n\r\n                    {errores.imagen!=null&& \r\n                       <Alert\r\n                       action={\r\n                           <IconButton\r\n                             aria-label=\"close\"\r\n                             color=\"inherit\"\r\n                             size=\"small\"\r\n                             onClick={() => {\r\n                              seterrores({\r\n                                  ...errores,imagen:null\r\n                              })\r\n                             }}\r\n                           >\r\n                          <CloseIcon></CloseIcon>\r\n\r\n                           </IconButton>\r\n                         }\r\n                       \r\n                       severity=\"error\">{errores.imagen}</Alert>\r\n\r\n                    }\r\n\r\n                    <Button \r\n                    fullWidth\r\n                    className={clases.boton}\r\n                    variant='contained'\r\n                     onClick={()=>crearInfo()}\r\n                     >\r\n\r\n                         Agregar  Informacion\r\n                     </Button>\r\n\r\n                     <Button \r\n                    fullWidth\r\n                    className={clases.botonBasurero}\r\n                    variant='contained'\r\n                     onClick={()=>borrar()}\r\n                     >\r\n\r\n                         Borrar informacion\r\n                     </Button>\r\n\r\n                </Grid>    \r\n\r\n\r\n\r\n     </Grid>     \r\n\r\n     \r\n                \r\n                }\r\n\r\n                     </Grid>      \r\n                     <Grid xs={2}>\r\n                     \r\n                     </Grid>      \r\n\r\n\r\n                 \r\n\r\n\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Info\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\Populares.jsx",["489","490","491","492","493","494","495","496","497","498","499","500","501","502","503","504","505","506"],"import React, { useEffect, useState } from 'react'\r\nimport { Grid, makeStyles, Typography, Button, IconButton, CircularProgress, setRef } from \"@material-ui/core\"\r\nimport Paper from '@material-ui/core/Paper';\r\nimport firebase from '../firebase/firebase'\r\nimport moment from 'moment'\r\nimport Swal from 'sweetalert2'\r\nimport { Chip } from '@material-ui/core'\r\nimport \"moment/locale/es\"\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport Basurero from '@material-ui/icons/Delete';\r\nimport Lapiz from '@material-ui/icons/Create';\r\nimport AddAPhotoIcon from '@material-ui/icons/AddAPhoto';\r\nimport { UsuarioContext } from \"../Provedores/UsuarioContext\"\r\nimport { useContext } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport CorazonLleno from \"../imagen/iconos/arbolLleno.png\"\r\nimport Corazon from \"../imagen/iconos/arbolVacio.png\"\r\nimport BotonMenu from '../Componetes/Tarjeta/BotonMenu'\r\nimport BotonFlotante from '../Componetes/BotonFlotante';\r\nimport Titulo from '../Componetes/Titulo/Titulo';\r\nimport CardPaper from '../Componetes/CardPaper/CardPaper';\r\n\r\n\r\n\r\n\r\nconst estilos = makeStyles((theme) => ({\r\n        button: {\r\n                margin: '3px'\r\n        },\r\n\r\n        margen: {\r\n                margin: \"45px auto \",\r\n                \"& .botoneditar\": {\r\n                        background: \"#4a9341\",\r\n                        color: \"#ffffff\",\r\n\r\n                        \"&:hover\": {\r\n                                background: \"#ffffff\",\r\n                                color: \"#1ab37c !important\",\r\n                        },\r\n\r\n\r\n                },\r\n\r\n\r\n                \" & #mandarina .MuiSvgIcon-root\": {\r\n\r\n                        color: \"#EC6933\",\r\n\r\n                },\r\n                \" & #verde .MuiSvgIcon-root\": {\r\n\r\n                        color: \"#4B9965\",\r\n\r\n                },\r\n                \" & #morado .MuiSvgIcon-root\": {\r\n\r\n                        color: \"#9372B6\",\r\n\r\n                },\r\n                \" & #azul .MuiSvgIcon-root\": {\r\n\r\n                        color: \"#4CA9B2\",\r\n\r\n                },\r\n\r\n\r\n\r\n                \" & .MuiButton-containedPrimary\": {\r\n\r\n                        color: \"#434343\",\r\n                        backgroundColor: \"#ffffff\",\r\n                        boxShadow: \"none\"\r\n                },\r\n\r\n\r\n                \"& .botoneditar\": {\r\n                        background: \"#4a9341\",\r\n                        color: \"#ffffff\",\r\n                        marginTop: \"10px\",\r\n\r\n                        \"&:hover\": {\r\n                                background: \"#ffffff\",\r\n                                color: \"#1ab37c !important\",\r\n                        },\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        },\r\n        caja: {\r\n                position: \"relative\",\r\n                width: \"80vw\",\r\n                margin: \"20px auto\",\r\n                display: \"block\",\r\n                height: \"unset\",\r\n                borderRadius: \"10px\",\r\n                transition: \"background-color .25s,color .25s,box-shadow .25s\",\r\n                boxShadow: \"0 8px 42px -8px rgb(0 0 0 / 20%)\",\r\n                border: \"1px solid #f0f0f0\",\r\n\r\n                [theme.breakpoints.down(\"md\")]: {\r\n                        height: \"unset\"\r\n                }\r\n\r\n        }\r\n\r\n        ,\r\n        titulo: {\r\n\r\n                fontWeight: \"500\",\r\n                fontFamily: \"nunito\"\r\n        }\r\n        ,\r\n        tituloGeneral: {\r\n\r\n                fontWeight: \"700\",\r\n                fontFamily: \"Lato\",\r\n                fontSize: \"27px\"\r\n        }\r\n        ,\r\n        divTituloGeneral: {\r\n                margin: \"0px auto\",\r\n                width: \"85vw\"\r\n        },\r\n        fecha: {\r\n                fontWeight: \"500\",\r\n                fontFamily: \"nunito\",\r\n                paddingTop: \"5px\",\r\n                color: \"#717171\"\r\n        },\r\n        contenedor: {\r\n                margin: \"18px auto\"\r\n        },\r\n        resumen: {\r\n                fontFamily: \"nunito\",\r\n                margin: \"15px auto\"\r\n        },\r\n        diveditarborrar: {\r\n                position: \"absolute\",\r\n                bottom: \"0\",\r\n                right: \"9px\",\r\n                width: \"90px\"\r\n        },\r\n        divFoto: {\r\n\r\n                width: \"250px\",\r\n                height: \"160px\",\r\n                border: \"2px dashed #21cbce\",\r\n                display: \"block\",\r\n                margin: \"16px auto\",\r\n                position: \"relative\",\r\n                [theme.breakpoints.down(\"sm\")]: {\r\n                        margin: \"30px auto\"\r\n                }\r\n        },\r\n        divImagen: {\r\n\r\n                height: \"160px\",\r\n                width: \"260px\",\r\n                backgroundSize: \"260px auto\",\r\n                backgroundRepeat: \"no-repeat\",\r\n                backgroundPosition: \"50%\",\r\n                borderRadius: \"16px\",\r\n                display: \"block\",\r\n                margin: \"auto\",\r\n                marginTop: \"15px\",\r\n                [theme.breakpoints.down(\"sm\")]: {\r\n                        marginTop: \"30px\"\r\n                }\r\n\r\n\r\n\r\n        },\r\n\r\n        imgFoto: {\r\n                color: \"#21cbce\",\r\n                position: \"absolute\",\r\n                margin: \"auto\",\r\n                top: \"0\",\r\n                bottom: \"0\",\r\n                left: \"0\",\r\n                right: \"0\",\r\n                fontSize: \"3rem\"\r\n        },\r\n        cajaMeGusta: {\r\n                position: 'absolute',\r\n                top: '8px',\r\n                right: '12px',\r\n                [theme.breakpoints.down(\"sm\")]: {\r\n                        position: 'unset'\r\n                }\r\n\r\n\r\n        },\r\n        divCircular: {\r\n                marginTop: \"100px\"\r\n\r\n        }\r\n        , botonLikes: {\r\n                color: \"#35b37c\",\r\n                margin: \"8px 0px 0x 0px\",\r\n                border: \"1px solid\"\r\n\r\n\r\n        },\r\n        margenChip: {\r\n\r\n                margin: \"0px 3px\",\r\n                [theme.breakpoints.down(\"sm\")]: {\r\n\r\n                        margin: \"0px 4px\"\r\n                }\r\n\r\n\r\n        },\r\n        circular: {\r\n                height: \"72px !important\",\r\n                width: \"72px !important\",\r\n                display: \"block\",\r\n                margin: \"auto\"\r\n        },\r\n        divTexto: {\r\n                [theme.breakpoints.down(\"md\")]: {\r\n\r\n                        margin: \"0vw 5vw 0\"\r\n                },\r\n\r\n\r\n\r\n                [theme.breakpoints.down(\"sm\")]: {\r\n\r\n                        margin: \"5vw 5vw 0\"\r\n                }\r\n        },\r\n        textNoDisponible: {\r\n\r\n\r\n                fontFamily: \"Nunito\",\r\n                color: \"#808080\"\r\n\r\n\r\n\r\n\r\n        },\r\n        centrarComponente: {\r\n                textAlign: \"end\",\r\n                marginRight: \"10px\",\r\n                [theme.breakpoints.down(\"md\")]: {\r\n\r\n                        textAlign: \"center\",\r\n                }\r\n\r\n        },\r\n        botonPdf: {\r\n                position: \"absolute\",\r\n                bottom: \"55px\",\r\n                right: '0px',\r\n                [theme.breakpoints.down(\"sm\")]: {\r\n                        position: 'unset'\r\n                }\r\n        }\r\n        ,\r\n        textUpVote: {\r\n                fontFamily: \"nunito\",\r\n                textAlign: \"center\",\r\n                color: \"#808080\"\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n}))\r\n\r\nconst Populares = (props) => {\r\n\r\n        const history = useHistory();\r\n        const clases = estilos()\r\n        const recientes = false\r\n        const populares = true\r\n        const usuario = useContext(UsuarioContext)\r\n        const [listapaper, setlistapaper] = useState([])\r\n        const [cargando, setcargando] = useState(false)\r\n        const [cargandodos, setcargandodos] = useState(false)\r\n        const [paper, setpaper] = useState({})\r\n        const [ultimoDocumento, setultimoDocumento] = useState(0)\r\n        const [vacio, setvacio] = useState(false)\r\n        const [tituloGeneral, setTituloGeneral] = useState(\"The Lastest\")\r\n\r\n        const listadepaper = async (recientes, valorados) => {\r\n                console.log(\"inicio\")\r\n\r\n                try {\r\n\r\n                        if (recientes) {\r\n                                setlistapaper([])\r\n                                await firebase.db.collection(\"paper\").orderBy(\"subida\", \"desc\").limit\r\n                                        (5).get().then((coleccion) => {\r\n\r\n                                                if (coleccion.size != 0) {\r\n                                                        console.log(\"paso por aca \")\r\n                                                        const lista = coleccion.docs.map((paperObje) => {\r\n                                                                return {\r\n                                                                        ...paperObje.data(),\r\n                                                                        click: false\r\n                                                                }\r\n                                                        })\r\n                                                        setultimoDocumento(lista[lista.length - 1].id)\r\n                                                        setlistapaper((listapaper) => [...listapaper, ...lista])\r\n                                                        setcargando(false)\r\n\r\n                                                }\r\n                                                if (coleccion.length == 5) {\r\n                                                        setvacio(true)\r\n                                                } else {\r\n                                                        setvacio(false)\r\n                                                }\r\n\r\n                                        }\r\n\r\n                                        )\r\n                        } else {\r\n                                if (valorados) {\r\n                                        setlistapaper([])\r\n                                        await firebase.db.collection(\"paper\").orderBy(\"likes\", \"desc\").limit(5).get().then((coleccion) => {\r\n\r\n                                                if (coleccion.size != 0) {\r\n\r\n                                                        const lista = coleccion.docs.map((paperObje) => ({...paperObje.data(),click:false }))\r\n                                                        setultimoDocumento(lista[lista.length - 1].id)\r\n                                                        setlistapaper((listapaper) => [...listapaper, ...lista])\r\n                                                        setcargando(false)\r\n\r\n                                                }\r\n                                                if (coleccion.length == 5) {\r\n                                                        setvacio(true)\r\n                                                } else {\r\n                                                        setvacio(false)\r\n                                                }\r\n\r\n                                        }\r\n\r\n                                        )\r\n                                } else {\r\n\r\n                                        let nuevalista = []\r\n                                        await firebase.db.collection(\"paper\").orderBy(\"id\", \"desc\").limit(5).get().then(valor => {\r\n\r\n\r\n                                                nuevalista = valor.docs.map(doc => {\r\n\r\n                                                        return {\r\n                                                                id: doc.id,\r\n                                                                ...doc.data(),\r\n                                                                click: false,\r\n                                                        }\r\n\r\n                                                })\r\n\r\n                                                if (nuevalista.length == 5) {\r\n                                                        setvacio(true)\r\n                                                } else {\r\n                                                        setvacio(false)\r\n                                                }\r\n\r\n                                                if (nuevalista.length == 0) {\r\n                                                        setultimoDocumento(0)\r\n                                                } else {\r\n                                                        setultimoDocumento(nuevalista[nuevalista.length - 1].id)\r\n                                                }\r\n\r\n\r\n                                        })\r\n\r\n\r\n\r\n\r\n                                        console.log(\"paso por aca \")\r\n                                        setlistapaper(nuevalista)\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                }\r\n\r\n\r\n                        }\r\n\r\n                } catch (error) {\r\n                        console.log(error)\r\n                }\r\n                console.log(\"final\")\r\n\r\n                setcargando(false)\r\n        }\r\n\r\n        const pedirpaper = () => {\r\n                //buscar si  ahi un paper en especifico\r\n                //\r\n                setcargando(true)\r\n                // LLAMAR A LOS PAPER\r\n\r\n                listadepaper(props.recientes, props.valorados)\r\n        }\r\n\r\n\r\n        const borrar = (e) => {\r\n\r\n                Swal.fire({\r\n                        title: '¿Esta seguro que desea borrar el siguiente registro?',\r\n                        text: `${e.titulo}`,\r\n                        showDenyButton: true,\r\n                        confirmButtonColor: '#21cbce',\r\n                        confirmButtonText: `Borrar`,\r\n                        denyButtonText: `Cancelar`,\r\n                }).then((result) => {\r\n                        /* Read more about isConfirmed, isDenied below */\r\n\r\n                        if (result.isConfirmed) {\r\n                                firebase.db.collection(\"paper\").doc(e.id).delete().then(() => {\r\n                                        let nuevaLista = []\r\n                                        listapaper.map((valor) => {\r\n                                                if (valor.id != e.id) {\r\n                                                        console.log(valor)\r\n                                                        nuevaLista.push(valor)\r\n                                                }\r\n\r\n                                        })\r\n\r\n\r\n                                        //pedirpaper()\r\n\r\n                                        console.log(\"borrado\")\r\n\r\n                                }).catch((error) => {\r\n                                        console.error(\"Error removing document: \", error);\r\n                                });\r\n\r\n\r\n                                e.etiquetas.map(valor => {\r\n\r\n                                        firebase.db.collection(\"etiquetas\").doc(valor.id).collection(\"paper\").doc(e.id).delete().then(async () => {\r\n                                                //  console.log(\"Document successfully deleted!\");\r\n\r\n\r\n\r\n                                                let soloTag = await firebase.db.collection(\"etiquetas\").doc(valor.id).get().then((doc) => {\r\n\r\n\r\n                                                        return { ...doc.data() }\r\n\r\n                                                })\r\n\r\n                                                console.log(soloTag)\r\n                                                let nuevoObjeto = {\r\n                                                        ...soloTag,\r\n                                                        contar: soloTag.contar - 1\r\n                                                }\r\n\r\n                                                console.log(nuevoObjeto)\r\n\r\n                                                firebase.db.collection(\"etiquetas\").doc(valor.id).set(nuevoObjeto)\r\n\r\n\r\n                                        }).catch((error) => {\r\n                                                console.error(\"Error removing document: \", error);\r\n                                        });\r\n\r\n\r\n                                })\r\n\r\n                                try {\r\n                                        var borrarArchivo = firebase.storage.ref().child(\"PDF\").child(e.id)\r\n                                        var borrarImagen = firebase.storage.ref().child(\"IMAGEN\").child(e.id)\r\n\r\n\r\n                                } catch (error) {\r\n                                        console.log(error)\r\n                                }\r\n\r\n                                if (borrarArchivo != undefined) {\r\n                                        borrarArchivo.delete().then(function () {\r\n                                                //console.log(\"borrado\")\r\n                                                // File deleted successfully\r\n                                        }).catch(function (error) {\r\n\r\n                                                console.log(error)\r\n                                                //console.log(error)\r\n                                                // Uh-oh, an error occurred!m\r\n                                        });\r\n\r\n                                }\r\n                                if (borrarImagen != undefined) {\r\n\r\n\r\n                                        if (e.imagen != null) {\r\n                                                borrarImagen.delete().then(function () {\r\n                                                        //console.log(\"borrado\")\r\n                                                        // File deleted successfully\r\n                                                }).catch(function (error) {\r\n                                                        console.log(error)\r\n                                                        // Uh-oh, an error occurred!\r\n                                                });\r\n                                        }\r\n                                }\r\n\r\n\r\n                                Swal.fire({ title: 'Borrado!', confirmButtonColor: '#21cbce', icon: 'success' }).then(() => {\r\n                                        pedirpaper()\r\n                                })\r\n                        } else if (result.isDenied) {\r\n\r\n                        }\r\n                })\r\n\r\n\r\n        }\r\n\r\n\r\n        useEffect(() => {\r\n\r\n                setcargando(true)\r\n                listadepaper(recientes, populares)\r\n\r\n        }, [props.recientes, props.paperid, props.busqueda])\r\n\r\n\r\n        const funcionCorazon = (valor) => {\r\n                if (valor.likes > 0) {\r\n                        return true\r\n                } else {\r\n                        return false\r\n                }\r\n        }\r\n\r\n        const pedirMas = async () => {\r\n                setcargandodos(true)\r\n                const recientes = props.recientes\r\n                const valorados = props.valorados\r\n                const paperRef = firebase.db.collection(\"paper\")\r\n\r\n\r\n                try {\r\n\r\n                        if (recientes) {\r\n\r\n\r\n\r\n\r\n                                return paperRef.doc(ultimoDocumento).get().then(async (doc) => {\r\n                                        //     console.log(doc)\r\n                                        var valoradosOrdenados = await paperRef.orderBy(\"likes\", \"desc\").startAfter(doc).limit(5).get()\r\n\r\n                                        if (valoradosOrdenados.size != 0) {\r\n\r\n                                                //      console.log(valoradosOrdenados)\r\n                                                const lista = valoradosOrdenados.docs.map((paperObje) => ({ ...paperObje.data(), click: false }));\r\n                                                setultimoDocumento(lista[lista.length - 1].id)\r\n                                                setlistapaper((listapaper) => [...listapaper, ...lista])\r\n                                                setcargandodos(false)\r\n                                        } else {\r\n\r\n                                                setvacio(false)\r\n                                                setcargandodos(false)\r\n                                        }\r\n\r\n                                }\r\n                                )\r\n\r\n\r\n\r\n\r\n\r\n\r\n                        } else {\r\n\r\n\r\n                                if (valorados) {\r\n\r\n\r\n\r\n                                        // const valoradosRef=firebase.db.collection(\"paper\")\r\n\r\n                                        return paperRef.doc(ultimoDocumento).get().then(async (doc) => {\r\n                                                console.log(doc)\r\n                                                var valoradosOrdenados = await paperRef.orderBy(\"likes\", \"desc\").startAfter(doc).limit(5).get()\r\n\r\n                                                if (valoradosOrdenados.size != 0) {\r\n\r\n                                                        console.log(valoradosOrdenados)\r\n                                                        const lista = valoradosOrdenados.docs.map((paperObje) => paperObje.data())\r\n                                                        setultimoDocumento(lista[lista.length - 1].id)\r\n                                                        setlistapaper((listapaper) => [...listapaper, ...lista])\r\n                                                        setcargandodos(false)\r\n\r\n                                                } else {\r\n\r\n                                                        setvacio(false)\r\n                                                        setcargandodos(false)\r\n                                                }\r\n\r\n                                        }\r\n                                        )\r\n\r\n                                } else {\r\n\r\n\r\n                                        return paperRef.doc(ultimoDocumento).get().then(async (doc) => {\r\n                                                //console.log(doc)\r\n                                                var valoradosOrdenados = await paperRef.orderBy(\"id\", \"desc\").startAfter(doc).limit(5).get()\r\n\r\n                                                if (valoradosOrdenados.size != 0) {\r\n\r\n                                                        // console.log(valoradosOrdenados)\r\n                                                        const lista = valoradosOrdenados.docs.map((paperObje) => paperObje.data())\r\n                                                        setultimoDocumento(lista[lista.length - 1].id)\r\n                                                        setlistapaper((listapaper) => [...listapaper, ...lista])\r\n                                                        setcargandodos(false)\r\n\r\n                                                } else {\r\n\r\n                                                        setvacio(false)\r\n                                                        setcargandodos(false)\r\n                                                }\r\n\r\n                                        }\r\n                                        )\r\n                                }\r\n\r\n\r\n                        }\r\n\r\n                } catch (error) {\r\n                        console.log(error)\r\n                }\r\n        }\r\n\r\n\r\n        // buscar por id del paper\r\n\r\n        const buscarPorId = async (id) => {\r\n                //  alert(id)\r\n                var variable = await firebase.db.collection(\"paper\").doc(id)\r\n                //console.log(variable)\r\n\r\n\r\n                variable.get().then((doc) => {\r\n                        // Document was found in the cache. If no cached document exists,\r\n                        // an error will be returned to the 'catch' block below.\r\n                        // console.log(\"Cached document data:\", doc.data());\r\n                        setlistapaper([doc.data()])\r\n\r\n                        setcargando(false)\r\n                        setvacio(false)\r\n\r\n                }).catch((error) => {\r\n                        console.log(\"Error getting cached document:\", error);\r\n                });\r\n\r\n        }\r\n\r\n\r\n        const buscarChips = (valor) => {\r\n                history.push(`/tag/${valor.id}`)\r\n        }\r\n\r\n        const megustaSinValidarUsuario = (valor) => {\r\n\r\n               \r\n                if (valor.click) {\r\n                        valor.likes = valor.likes - 1\r\n                        valor.click = false\r\n                } else {\r\n                        valor.likes = valor.likes + 1\r\n                        valor.click = true\r\n                }\r\n\r\n                const nuevoHaVotado = [];\r\n                let nuevoValor = {\r\n                        ...valor,\r\n                        likes: valor.likes,\r\n                        haVotado: nuevoHaVotado\r\n                }\r\n\r\n\r\n\r\n                //guarda datos en el paper\r\n                firebase.db.collection(\"paper\").doc(valor.id).update({\r\n                        ...valor,\r\n                        likes: valor.likes,\r\n                        haVotado: nuevoHaVotado\r\n\r\n                })\r\n\r\n                // mapear etiquetas\r\n                valor.etiquetas.map(valordos => {\r\n\r\n                        //guarda datos  en las etiquetas\r\n                        firebase.db.collection(\"etiquetas\").doc(valordos.id).collection(\"paper\").doc(valor.id).update({\r\n                                ...valor,\r\n                                likes: valor.likes,\r\n                                haVotado: nuevoHaVotado\r\n\r\n                        })\r\n                })\r\n\r\n                armararreglo(nuevoValor)\r\n                //setpaper({...valor,likes:valor.likes})\r\n\r\n                // }\r\n                console.log(\"final\")\r\n        }\r\n\r\n        const armararreglo = (nuevoValor) => {\r\n\r\n                let nuevalista = listapaper.map(valor => {\r\n\r\n                        if (nuevoValor.id == valor.id) {\r\n\r\n                                return {\r\n                                        ...nuevoValor\r\n                                }\r\n                        } else {\r\n\r\n                                return { ...valor }\r\n                        }\r\n                })\r\n\r\n                setlistapaper(nuevalista)\r\n        }\r\n\r\n\r\n\r\n        return (\r\n                <div className={clases.margen}>\r\n                        {usuario ?\r\n                                <div>\r\n                                        {usuario.administrador ? <div>\r\n                                                <BotonFlotante>\r\n\r\n                                                </BotonFlotante>\r\n                                        </div> :\r\n                                                <div></div>\r\n                                        }\r\n\r\n                                </div> :\r\n                                <></>\r\n                        }\r\n\r\n\r\n                        <div className={clases.divTituloGeneral}>\r\n\r\n\r\n                                <Grid container>\r\n                                        <Grid xs={12} md={3} lg={6}>\r\n                                                <Typography variant=\"h4\" className={clases.tituloGeneral}>\r\n                                                        {tituloGeneral}\r\n                                                </Typography>\r\n                                        </Grid>\r\n                                </Grid>\r\n                        </div>\r\n\r\n                        <Grid container>\r\n                                <Grid xs={12}>\r\n                         {\r\n                                cargando ?\r\n                                        <div className={clases.divCircular} >\r\n                                                <CircularProgress className={clases.circular}></CircularProgress>\r\n                                        </div>\r\n                                        : <div>\r\n                                        {listapaper.length == 0 ?\r\n                                                <Typography className={clases.\r\n                                                        textNoDisponible\r\n                                                } align=\"center\" variant=\"h4\">\r\n                                                        No hay registros\r\n                                                </Typography>\r\n\r\n\r\n                                                :\r\n\r\n                                                <div>\r\n                                                {\r\n\r\n                                                listapaper.map((valor,key) => (\r\n                                                          <CardPaper key={key} \r\n                                                          valor={valor} \r\n                                                          megustaSinValidarUsuario={megustaSinValidarUsuario} \r\n                                                          buscarChips={buscarChips} \r\n                                                          usuario={usuario} \r\n                                                          funcionCorazon={funcionCorazon}\r\n                                                          setlistapaper={setlistapaper}\r\n                                                          borrar={borrar}\r\n                                                          />  \r\n                               \r\n                                                ))\r\n                                                }\r\n\r\n                                                </div>\r\n                                        }\r\n\r\n                                        {cargandodos ?\r\n\r\n                                                <div className={clases.divCircular} >\r\n                                                        <CircularProgress className={clases.circular}></CircularProgress>\r\n                                                </div>\r\n\r\n\r\n\r\n                                                :\r\n\r\n                                                // vacio==true &&\r\n\r\n                                                <Typography align=\"center\">\r\n                                                        <Button\r\n\r\n                                                                endIcon={<ExpandMoreIcon></ExpandMoreIcon>}\r\n                                                                variant=\"contained\"\r\n                                                                className=\"botonVerMas\"\r\n\r\n                                                                onClick={() => {\r\n                                                                        pedirMas()\r\n                                                                }} >\r\n                                                                See More\r\n\r\n                                                        </Button>\r\n                                                </Typography>}\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                        </div>\r\n                                        }\r\n\r\n\r\n\r\n\r\n                                </Grid>\r\n\r\n\r\n                        </Grid>\r\n\r\n\r\n                </div>\r\n\r\n        )\r\n}\r\n\r\nexport default Populares\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\WhyPag.jsx",[],"C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\Recientes.jsx",["507","508","509","510","511","512","513","514","515","516","517","518","519","520","521","522","523","524","525"],"import React, { useEffect, useState } from 'react'\r\nimport { Grid, makeStyles, Typography, Button, IconButton, CircularProgress, setRef } from \"@material-ui/core\"\r\nimport Paper from '@material-ui/core/Paper';\r\nimport firebase from '../firebase/firebase'\r\nimport moment from 'moment'\r\nimport Swal from 'sweetalert2'\r\nimport { Chip } from '@material-ui/core'\r\nimport \"moment/locale/es\"\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport Basurero from '@material-ui/icons/Delete';\r\nimport Lapiz from '@material-ui/icons/Create';\r\nimport AddAPhotoIcon from '@material-ui/icons/AddAPhoto';\r\nimport { UsuarioContext } from \"../Provedores/UsuarioContext\"\r\nimport { useContext } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport CorazonLleno from \"../imagen/iconos/arbolLleno.png\"\r\nimport Corazon from \"../imagen/iconos/arbolVacio.png\"\r\nimport BotonMenu from '../Componetes/Tarjeta/BotonMenu'\r\nimport BotonFlotante from '../Componetes/BotonFlotante';\r\nimport Titulo from '../Componetes/Titulo/Titulo';\r\nimport CardPaper from '../Componetes/CardPaper/CardPaper';\r\n\r\n\r\n\r\n\r\nconst estilos = makeStyles((theme) => ({\r\n        button: {\r\n                margin: '3px'\r\n        },\r\n\r\n        margen: {\r\n                margin: \"45px auto \",\r\n                \"& .botoneditar\": {\r\n                        background: \"#4a9341\",\r\n                        color: \"#ffffff\",\r\n\r\n                        \"&:hover\": {\r\n                                background: \"#ffffff\",\r\n                                color: \"#1ab37c !important\",\r\n                        },\r\n\r\n\r\n                },\r\n\r\n\r\n                \" & #mandarina .MuiSvgIcon-root\": {\r\n\r\n                        color: \"#EC6933\",\r\n\r\n                },\r\n                \" & #verde .MuiSvgIcon-root\": {\r\n\r\n                        color: \"#4B9965\",\r\n\r\n                },\r\n                \" & #morado .MuiSvgIcon-root\": {\r\n\r\n                        color: \"#9372B6\",\r\n\r\n                },\r\n                \" & #azul .MuiSvgIcon-root\": {\r\n\r\n                        color: \"#4CA9B2\",\r\n\r\n                },\r\n\r\n\r\n\r\n                \" & .MuiButton-containedPrimary\": {\r\n\r\n                        color: \"#434343\",\r\n                        backgroundColor: \"#ffffff\",\r\n                        boxShadow: \"none\"\r\n                },\r\n\r\n\r\n                \"& .botoneditar\": {\r\n                        background: \"#4a9341\",\r\n                        color: \"#ffffff\",\r\n                        marginTop: \"10px\",\r\n\r\n                        \"&:hover\": {\r\n                                background: \"#ffffff\",\r\n                                color: \"#1ab37c !important\",\r\n                        },\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        },\r\n        caja: {\r\n                position: \"relative\",\r\n                width: \"80vw\",\r\n                margin: \"20px auto\",\r\n                display: \"block\",\r\n                height: \"unset\",\r\n                borderRadius: \"10px\",\r\n                transition: \"background-color .25s,color .25s,box-shadow .25s\",\r\n                boxShadow: \"0 8px 42px -8px rgb(0 0 0 / 20%)\",\r\n                border: \"1px solid #f0f0f0\",\r\n\r\n                [theme.breakpoints.down(\"md\")]: {\r\n                        height: \"unset\"\r\n                }\r\n\r\n        }\r\n\r\n        ,\r\n        titulo: {\r\n\r\n                fontWeight: \"500\",\r\n                fontFamily: \"nunito\"\r\n        }\r\n        ,\r\n        tituloGeneral: {\r\n\r\n                fontWeight: \"700\",\r\n                fontFamily: \"Lato\",\r\n                fontSize: \"27px\"\r\n        }\r\n        ,\r\n        spanGeneral:{\r\n                color:theme.palette.error.main\r\n        },\r\n        divTituloGeneral: {\r\n                margin: \"0px auto\",\r\n                width: \"85vw\"\r\n        },\r\n        fecha: {\r\n                fontWeight: \"500\",\r\n                fontFamily: \"nunito\",\r\n                paddingTop: \"5px\",\r\n                color: \"#717171\"\r\n        },\r\n        contenedor: {\r\n                margin: \"18px auto\"\r\n        },\r\n        resumen: {\r\n                fontFamily: \"nunito\",\r\n                margin: \"15px auto\"\r\n        },\r\n        diveditarborrar: {\r\n                position: \"absolute\",\r\n                bottom: \"0\",\r\n                right: \"9px\",\r\n                width: \"90px\"\r\n        },\r\n        divFoto: {\r\n\r\n                width: \"250px\",\r\n                height: \"160px\",\r\n                border: \"2px dashed #21cbce\",\r\n                display: \"block\",\r\n                margin: \"16px auto\",\r\n                position: \"relative\",\r\n                [theme.breakpoints.down(\"sm\")]: {\r\n                        margin: \"30px auto\"\r\n                }\r\n        },\r\n        divImagen: {\r\n\r\n                height: \"160px\",\r\n                width: \"260px\",\r\n                backgroundSize: \"260px auto\",\r\n                backgroundRepeat: \"no-repeat\",\r\n                backgroundPosition: \"50%\",\r\n                borderRadius: \"16px\",\r\n                display: \"block\",\r\n                margin: \"auto\",\r\n                marginTop: \"15px\",\r\n                [theme.breakpoints.down(\"sm\")]: {\r\n                        marginTop: \"30px\"\r\n                }\r\n\r\n\r\n\r\n        },\r\n\r\n        imgFoto: {\r\n                color: \"#21cbce\",\r\n                position: \"absolute\",\r\n                margin: \"auto\",\r\n                top: \"0\",\r\n                bottom: \"0\",\r\n                left: \"0\",\r\n                right: \"0\",\r\n                fontSize: \"3rem\"\r\n        },\r\n        cajaMeGusta: {\r\n                position: 'absolute',\r\n                top: '8px',\r\n                right: '12px',\r\n                [theme.breakpoints.down(\"sm\")]: {\r\n                        position: 'unset'\r\n                }\r\n\r\n\r\n        },\r\n        divCircular: {\r\n                marginTop: \"100px\"\r\n\r\n        }\r\n        , botonLikes: {\r\n                color: \"#35b37c\",\r\n                margin: \"8px 0px 0x 0px\",\r\n                border: \"1px solid\"\r\n\r\n\r\n        },\r\n        margenChip: {\r\n\r\n                margin: \"0px 3px\",\r\n                [theme.breakpoints.down(\"sm\")]: {\r\n\r\n                        margin: \"0px 4px\"\r\n                }\r\n\r\n\r\n        },\r\n        circular: {\r\n                height: \"72px !important\",\r\n                width: \"72px !important\",\r\n                display: \"block\",\r\n                margin: \"auto\"\r\n        },\r\n        divTexto: {\r\n                [theme.breakpoints.down(\"md\")]: {\r\n\r\n                        margin: \"0vw 5vw 0\"\r\n                },\r\n\r\n\r\n\r\n                [theme.breakpoints.down(\"sm\")]: {\r\n\r\n                        margin: \"5vw 5vw 0\"\r\n                }\r\n        },\r\n        textNoDisponible: {\r\n\r\n\r\n                fontFamily: \"Nunito\",\r\n                color: \"#808080\"\r\n\r\n\r\n\r\n\r\n        },\r\n        centrarComponente: {\r\n                textAlign: \"end\",\r\n                marginRight: \"10px\",\r\n                [theme.breakpoints.down(\"md\")]: {\r\n\r\n                        textAlign: \"center\",\r\n                }\r\n\r\n        },\r\n        botonPdf: {\r\n                position: \"absolute\",\r\n                bottom: \"55px\",\r\n                right: '0px',\r\n                [theme.breakpoints.down(\"sm\")]: {\r\n                        position: 'unset'\r\n                }\r\n        }\r\n        ,\r\n        textUpVote: {\r\n                fontFamily: \"nunito\",\r\n                textAlign: \"center\",\r\n                color: \"#808080\"\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n}))\r\n\r\nconst Populares = (props) => {\r\n\r\n        const history = useHistory();\r\n        const clases = estilos()\r\n        const recientes = true\r\n        const populares = false\r\n        const usuario = useContext(UsuarioContext)\r\n        const [listapaper, setlistapaper] = useState([])\r\n        const [cargando, setcargando] = useState(false)\r\n        const [cargandodos, setcargandodos] = useState(false)\r\n        const [paper, setpaper] = useState({})\r\n        const [ultimoDocumento, setultimoDocumento] = useState(0)\r\n        const [vacio, setvacio] = useState(false)\r\n        const [tituloGeneral, setTituloGeneral] = useState(\"The Lastest\")\r\n\r\n        const listadepaper = async (recientes, valorados) => {\r\n                console.log(\"inicio\")\r\n\r\n                try {\r\n\r\n                        if (recientes) {\r\n                                setlistapaper([])\r\n                                await firebase.db.collection(\"paper\").orderBy(\"subida\", \"desc\").limit\r\n                                        (5).get().then((coleccion) => {\r\n\r\n                                                if (coleccion.size != 0) {\r\n                                                        console.log(\"paso por aca \")\r\n                                                        const lista = coleccion.docs.map((paperObje) => {\r\n                                                                return {\r\n                                                                        ...paperObje.data(),\r\n                                                                        click: false\r\n                                                                }\r\n                                                        })\r\n                                                        setultimoDocumento(lista[lista.length - 1].id)\r\n                                                        setlistapaper((listapaper) => [...listapaper, ...lista])\r\n                                                        setcargando(false)\r\n\r\n                                                }\r\n                                                if (coleccion.length == 5) {\r\n                                                        setvacio(true)\r\n                                                } else {\r\n                                                        setvacio(false)\r\n                                                }\r\n\r\n                                        }\r\n\r\n                                        )\r\n                        } else {\r\n                                if (valorados) {\r\n                                        setlistapaper([])\r\n                                        await firebase.db.collection(\"paper\").orderBy(\"likes\", \"desc\").limit(5).get().then((coleccion) => {\r\n\r\n                                                if (coleccion.size != 0) {\r\n\r\n                                                        const lista = coleccion.docs.map((paperObje) => paperObje.data())\r\n                                                        setultimoDocumento(lista[lista.length - 1].id)\r\n                                                        setlistapaper((listapaper) => [...listapaper, ...lista])\r\n                                                        setcargando(false)\r\n\r\n                                                }\r\n                                                if (coleccion.length == 5) {\r\n                                                        setvacio(true)\r\n                                                } else {\r\n                                                        setvacio(false)\r\n                                                }\r\n\r\n                                        }\r\n\r\n                                        )\r\n                                } else {\r\n\r\n                                        let nuevalista = []\r\n                                        await firebase.db.collection(\"paper\").orderBy(\"id\", \"desc\").limit(5).get().then(valor => {\r\n\r\n\r\n                                                nuevalista = valor.docs.map(doc => {\r\n\r\n                                                        return {\r\n                                                                id: doc.id,\r\n                                                                ...doc.data()\r\n                                                        }\r\n\r\n                                                })\r\n\r\n                                                if (nuevalista.length == 5) {\r\n                                                        setvacio(true)\r\n                                                } else {\r\n                                                        setvacio(false)\r\n                                                }\r\n\r\n                                                if (nuevalista.length == 0) {\r\n                                                        setultimoDocumento(0)\r\n                                                } else {\r\n                                                        setultimoDocumento(nuevalista[nuevalista.length - 1].id)\r\n                                                }\r\n\r\n\r\n                                        })\r\n\r\n\r\n\r\n\r\n                                        console.log(\"paso por aca \")\r\n                                        setlistapaper(nuevalista)\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                }\r\n\r\n\r\n                        }\r\n\r\n                } catch (error) {\r\n                        console.log(error)\r\n                }\r\n                console.log(\"final\")\r\n\r\n                setcargando(false)\r\n        }\r\n\r\n        const pedirpaper = () => {\r\n                //buscar si  ahi un paper en especifico\r\n                //\r\n                setcargando(true)\r\n                // LLAMAR A LOS PAPER\r\n\r\n                listadepaper(props.recientes, props.valorados)\r\n        }\r\n\r\n\r\n        const borrar = (e) => {\r\n\r\n                Swal.fire({\r\n                        title: '¿Esta seguro que desea borrar el siguiente registro?',\r\n                        text: `${e.titulo}`,\r\n                        showDenyButton: true,\r\n                        confirmButtonColor: '#21cbce',\r\n                        confirmButtonText: `Borrar`,\r\n                        denyButtonText: `Cancelar`,\r\n                }).then((result) => {\r\n                        /* Read more about isConfirmed, isDenied below */\r\n\r\n                        if (result.isConfirmed) {\r\n                                firebase.db.collection(\"paper\").doc(e.id).delete().then(() => {\r\n                                        let nuevaLista = []\r\n                                        listapaper.map((valor) => {\r\n                                                if (valor.id != e.id) {\r\n                                                        console.log(valor)\r\n                                                        nuevaLista.push(valor)\r\n                                                }\r\n\r\n                                        })\r\n\r\n\r\n                                        //pedirpaper()\r\n\r\n                                        console.log(\"borrado\")\r\n\r\n                                }).catch((error) => {\r\n                                        console.error(\"Error removing document: \", error);\r\n                                });\r\n\r\n\r\n                                e.etiquetas.map(valor => {\r\n\r\n                                        firebase.db.collection(\"etiquetas\").doc(valor.id).collection(\"paper\").doc(e.id).delete().then(async () => {\r\n                                                //  console.log(\"Document successfully deleted!\");\r\n\r\n\r\n\r\n                                                let soloTag = await firebase.db.collection(\"etiquetas\").doc(valor.id).get().then((doc) => {\r\n\r\n\r\n                                                        return { ...doc.data() }\r\n\r\n                                                })\r\n\r\n                                                console.log(soloTag)\r\n                                                let nuevoObjeto = {\r\n                                                        ...soloTag,\r\n                                                        contar: soloTag.contar - 1\r\n                                                }\r\n\r\n                                                console.log(nuevoObjeto)\r\n\r\n                                                firebase.db.collection(\"etiquetas\").doc(valor.id).set(nuevoObjeto)\r\n\r\n\r\n                                        }).catch((error) => {\r\n                                                console.error(\"Error removing document: \", error);\r\n                                        });\r\n\r\n\r\n                                })\r\n\r\n                                try {\r\n                                        var borrarArchivo = firebase.storage.ref().child(\"PDF\").child(e.id)\r\n                                        var borrarImagen = firebase.storage.ref().child(\"IMAGEN\").child(e.id)\r\n\r\n\r\n                                } catch (error) {\r\n                                        console.log(error)\r\n                                }\r\n\r\n                                if (borrarArchivo != undefined) {\r\n                                        borrarArchivo.delete().then(function () {\r\n                                                //console.log(\"borrado\")\r\n                                                // File deleted successfully\r\n                                        }).catch(function (error) {\r\n\r\n                                                console.log(error)\r\n                                                //console.log(error)\r\n                                                // Uh-oh, an error occurred!m\r\n                                        });\r\n\r\n                                }\r\n                                if (borrarImagen != undefined) {\r\n\r\n\r\n                                        if (e.imagen != null) {\r\n                                                borrarImagen.delete().then(function () {\r\n                                                        //console.log(\"borrado\")\r\n                                                        // File deleted successfully\r\n                                                }).catch(function (error) {\r\n                                                        console.log(error)\r\n                                                        // Uh-oh, an error occurred!\r\n                                                });\r\n                                        }\r\n                                }\r\n\r\n\r\n                                Swal.fire({ title: 'Borrado!', confirmButtonColor: '#21cbce', icon: 'success' }).then(() => {\r\n                                        pedirpaper()\r\n                                })\r\n                        } else if (result.isDenied) {\r\n\r\n                        }\r\n                })\r\n\r\n\r\n        }\r\n\r\n\r\n        useEffect(() => {\r\n\r\n                setcargando(true)\r\n                listadepaper(recientes, populares)\r\n\r\n        }, [props.recientes, props.paperid, props.busqueda])\r\n\r\n\r\n        const funcionCorazon = (valor) => {\r\n                if (valor.likes > 0) {\r\n                        return true\r\n                } else {\r\n                        return false\r\n                }\r\n        }\r\n\r\n        const pedirMas = async () => {\r\n                setcargandodos(true)\r\n                const recientes = props.recientes\r\n                const valorados = props.valorados\r\n                const paperRef = firebase.db.collection(\"paper\")\r\n\r\n\r\n                try {\r\n\r\n                        if (recientes) {\r\n\r\n\r\n\r\n\r\n                                return paperRef.doc(ultimoDocumento).get().then(async (doc) => {\r\n                                        //     console.log(doc)\r\n                                        var valoradosOrdenados = await paperRef.orderBy(\"subida\", \"desc\").startAfter(doc).limit(5).get()\r\n\r\n                                        if (valoradosOrdenados.size != 0) {\r\n\r\n                                                //      console.log(valoradosOrdenados)\r\n                                                const lista = valoradosOrdenados.docs.map((paperObje) => ({ ...paperObje.data(), click: false }));\r\n                                                setultimoDocumento(lista[lista.length - 1].id)\r\n                                                setlistapaper((listapaper) => [...listapaper, ...lista])\r\n                                                setcargandodos(false)\r\n                                        } else {\r\n\r\n                                                setvacio(false)\r\n                                                setcargandodos(false)\r\n                                        }\r\n\r\n                                }\r\n                                )\r\n\r\n\r\n\r\n\r\n\r\n\r\n                        } else {\r\n\r\n\r\n                                if (valorados) {\r\n\r\n\r\n\r\n                                        // const valoradosRef=firebase.db.collection(\"paper\")\r\n\r\n                                        return paperRef.doc(ultimoDocumento).get().then(async (doc) => {\r\n                                                console.log(doc)\r\n                                                var valoradosOrdenados = await paperRef.orderBy(\"likes\", \"desc\").startAfter(doc).limit(5).get()\r\n\r\n                                                if (valoradosOrdenados.size != 0) {\r\n\r\n                                                        console.log(valoradosOrdenados)\r\n                                                        const lista = valoradosOrdenados.docs.map((paperObje) => paperObje.data())\r\n                                                        setultimoDocumento(lista[lista.length - 1].id)\r\n                                                        setlistapaper((listapaper) => [...listapaper, ...lista])\r\n                                                        setcargandodos(false)\r\n\r\n                                                } else {\r\n\r\n                                                        setvacio(false)\r\n                                                        setcargandodos(false)\r\n                                                }\r\n\r\n                                        }\r\n                                        )\r\n\r\n                                } else {\r\n\r\n\r\n                                        return paperRef.doc(ultimoDocumento).get().then(async (doc) => {\r\n                                                //console.log(doc)\r\n                                                var valoradosOrdenados = await paperRef.orderBy(\"id\", \"desc\").startAfter(doc).limit(5).get()\r\n\r\n                                                if (valoradosOrdenados.size != 0) {\r\n\r\n                                                        // console.log(valoradosOrdenados)\r\n                                                        const lista = valoradosOrdenados.docs.map((paperObje) => paperObje.data())\r\n                                                        setultimoDocumento(lista[lista.length - 1].id)\r\n                                                        setlistapaper((listapaper) => [...listapaper, ...lista])\r\n                                                        setcargandodos(false)\r\n\r\n                                                } else {\r\n\r\n                                                        setvacio(false)\r\n                                                        setcargandodos(false)\r\n                                                }\r\n\r\n                                        }\r\n                                        )\r\n                                }\r\n\r\n\r\n                        }\r\n\r\n                } catch (error) {\r\n                        console.log(error)\r\n                }\r\n        }\r\n\r\n\r\n        // buscar por id del paper\r\n\r\n        const buscarPorId = async (id) => {\r\n                //  alert(id)\r\n                var variable = await firebase.db.collection(\"paper\").doc(id)\r\n                //console.log(variable)\r\n\r\n\r\n                variable.get().then((doc) => {\r\n                        // Document was found in the cache. If no cached document exists,\r\n                        // an error will be returned to the 'catch' block below.\r\n                        // console.log(\"Cached document data:\", doc.data());\r\n                        setlistapaper([doc.data()])\r\n\r\n                        setcargando(false)\r\n                        setvacio(false)\r\n\r\n                }).catch((error) => {\r\n                        console.log(\"Error getting cached document:\", error);\r\n                });\r\n\r\n        }\r\n\r\n\r\n        const buscarChips = (valor) => {\r\n                history.push(`/tag/${valor.id}`)\r\n        }\r\n\r\n        const megustaSinValidarUsuario = (valor) => {\r\n\r\n               \r\n                if (valor.click) {\r\n                        valor.likes = valor.likes - 1\r\n                        valor.click = false\r\n                } else {\r\n                        valor.likes = valor.likes + 1\r\n                        valor.click = true\r\n                }\r\n\r\n                const nuevoHaVotado = [];\r\n                let nuevoValor = {\r\n                        ...valor,\r\n                        likes: valor.likes,\r\n                        haVotado: nuevoHaVotado\r\n                }\r\n\r\n\r\n\r\n                //guarda datos en el paper\r\n                firebase.db.collection(\"paper\").doc(valor.id).update({\r\n                        ...valor,\r\n                        likes: valor.likes,\r\n                        haVotado: nuevoHaVotado\r\n\r\n                })\r\n\r\n                // mapear etiquetas\r\n                valor.etiquetas.map(valordos => {\r\n\r\n                        //guarda datos  en las etiquetas\r\n                        firebase.db.collection(\"etiquetas\").doc(valordos.id).collection(\"paper\").doc(valor.id).update({\r\n                                ...valor,\r\n                                likes: valor.likes,\r\n                                haVotado: nuevoHaVotado\r\n\r\n                        })\r\n                })\r\n\r\n                armararreglo(nuevoValor)\r\n                //setpaper({...valor,likes:valor.likes})\r\n\r\n                // }\r\n                console.log(\"final\")\r\n        }\r\n\r\n        const armararreglo = (nuevoValor) => {\r\n\r\n                let nuevalista = listapaper.map(valor => {\r\n\r\n                        if (nuevoValor.id == valor.id) {\r\n\r\n                                return {\r\n                                        ...nuevoValor\r\n                                }\r\n                        } else {\r\n\r\n                                return { ...valor }\r\n                        }\r\n                })\r\n\r\n                setlistapaper(nuevalista)\r\n        }\r\n\r\n\r\n\r\n        return (\r\n                <div className={clases.margen}>\r\n                        {usuario ?\r\n                                <div>\r\n                                        {usuario.administrador ? <div>\r\n                                                <BotonFlotante>\r\n\r\n                                                </BotonFlotante>\r\n                                        </div> :\r\n                                                <div></div>\r\n                                        }\r\n\r\n                                </div> :\r\n                                <></>\r\n                        }\r\n\r\n\r\n                        <div className={clases.divTituloGeneral}>\r\n\r\n\r\n                                <Grid container>\r\n                                        <Grid xs={12} md={3} lg={6}>\r\n                                                <Typography variant=\"h4\" className={clases.tituloGeneral}>\r\n                                                        Informacion ambiental de <span className={clases.spanGeneral}> calidad  confiable</span> \r\n                                                </Typography>\r\n                                        </Grid>\r\n                                </Grid>\r\n                        </div>\r\n\r\n                        <Grid container>\r\n                                <Grid xs={12}>\r\n                         {\r\n                                cargando ?\r\n                                        <div className={clases.divCircular} >\r\n                                                <CircularProgress className={clases.circular}></CircularProgress>\r\n                                        </div>\r\n                                        : <div>\r\n                                        {listapaper.length == 0 ?\r\n                                                <Typography className={clases.\r\n                                                        textNoDisponible\r\n                                                } align=\"center\" variant=\"h4\">\r\n                                                        No hay registros\r\n                                                </Typography>\r\n\r\n\r\n                                                :\r\n\r\n                                                <div>\r\n                                                {\r\n\r\n                                                listapaper.map((valor,key) => (\r\n                                                          <CardPaper key={key} \r\n                                                          valor={valor} \r\n                                                          megustaSinValidarUsuario={megustaSinValidarUsuario} \r\n                                                          buscarChips={buscarChips} \r\n                                                          usuario={usuario} \r\n                                                          funcionCorazon={funcionCorazon}\r\n                                                          setlistapaper={setlistapaper}\r\n                                                          borrar={borrar}\r\n                                                          />  \r\n                               \r\n                                                ))\r\n                                                }\r\n\r\n                                                </div>\r\n                                        }\r\n\r\n                                        {cargandodos ?\r\n\r\n                                                <div className={clases.divCircular} >\r\n                                                        <CircularProgress className={clases.circular}></CircularProgress>\r\n                                                </div>\r\n\r\n\r\n\r\n                                                :\r\n\r\n                                                // vacio==true &&\r\n\r\n                                                <Typography align=\"center\">\r\n                                                        <Button\r\n\r\n                                                                endIcon={<ExpandMoreIcon></ExpandMoreIcon>}\r\n                                                                variant=\"contained\"\r\n                                                                className=\"botonVerMas\"\r\n\r\n                                                                onClick={() => {\r\n                                                                        pedirMas()\r\n                                                                }} >\r\n                                                                See More\r\n\r\n                                                        </Button>\r\n                                                </Typography>}\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                        </div>\r\n                                        }\r\n\r\n\r\n\r\n\r\n                                </Grid>\r\n\r\n\r\n                        </Grid>\r\n\r\n\r\n                </div>\r\n\r\n        )\r\n}\r\n\r\nexport default Populares\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\Eligeetiqueta.jsx",["526"],"import { Typography,Grid,Button,makeStyles } from '@material-ui/core'\r\nimport React from 'react'\r\nimport { useEffect,useState } from 'react'\r\nimport Icon from '@material-ui/core/Icon';\r\nimport Progreso from '../Componetes/Progreso'\r\nimport Funciones from '../Funciones/FuncionesFirebase'\r\nimport SaveIcon from '@material-ui/icons/LocalOffer';\r\nimport '../estilos/botones.css'\r\n\r\nconst  estilos = makeStyles((theme)=>({\r\n\r\n    divMargin:{\r\n\r\n        margin:'20px'\r\n    },\r\n    divMarginPrincipal:{\r\n\r\n        margin:'0px 200px',\r\n        [theme.breakpoints.down('md')]:{\r\n            margin:'0px 0px',\r\n        }\r\n\r\n    },botonColor:{\r\n        width:'100%',\r\n        height:'80px'\r\n    }\r\n\r\n\r\n}))\r\n\r\n\r\n\r\nconst Prueba =()=> (\r\n    <SaveIcon />\r\n)\r\n\r\nconst Eligeetiqueta = (props) => {\r\n\r\n    const clases =estilos()\r\n    let test =Prueba()\r\n\r\n\r\n    const [cargando, setcargando] = useState(true)\r\n    const [etiqueta, setetiqueta] = useState([])\r\n\r\nconst  pedirEtiqueta=async () => {\r\n        let lista = await Funciones.ListarEtiquetas()\r\n        \r\n        repartirColores(lista)\r\n        setcargando(false)\r\n        //setetiqueta(lista)    \r\n\r\n}\r\n\r\nconst  repartirColores = (lista)=>{\r\n\r\n    let nuevaLista =[] \r\n    let contador=0\r\n    nuevaLista=lista.map(doc =>{\r\n        contador=contador+1\r\n         console.log(contador,doc)   \r\n         let resultado=switchColor(contador,doc)\r\n         contador=resultado[0]\r\n         console.log(resultado[1])\r\n         return resultado[1]\r\n    })\r\n\r\n    setetiqueta(nuevaLista)\r\n}\r\n\r\nconst redirecionar=(doc)=>{\r\n\r\n    props.history.push(`/tag/${doc.id}`)\r\n}\r\n\r\nconst switchColor=(contador,doc)=>{\r\n    let objeto=[]\r\n    switch (contador) {\r\n        case 1:    \r\n         objeto={...doc,color:'botonMandarina'}\r\n         return [contador,objeto]\r\n          break;\r\n\r\n        case 2:    \r\n         objeto={...doc,color:'botonVerde'}\r\n        return [contador,objeto]\r\n        break;\r\n\r\n        case 3:    \r\n         objeto={...doc,color:'botonMorado'}\r\n        return [contador,objeto]\r\n        break;\r\n\r\n        case 4:    \r\n         objeto={...doc,color:'botonAzul'}\r\n        return [0,objeto]\r\n        break;\r\n    \r\n      \r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n    useEffect(() => {\r\n             \r\n        console.log('paso por aca')\r\n         pedirEtiqueta()\r\n\r\n\r\n\r\n\r\n    },[])\r\n\r\n    \r\n    return (\r\n        <div>\r\n\r\n            <Typography variant=\"h6\" align=\"center\">\r\n         \r\n    Select your topycs of interest \r\n            </Typography>\r\n\r\n\r\n                {cargando? \r\n                \r\n                <Progreso></Progreso>\r\n                :\r\n                \r\n                    <div className={clases.divMarginPrincipal} >                        \r\n\r\n                    <Grid container \r\n                    direction=\"row\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\"\r\n                                        >\r\n                        {\r\n                         etiqueta.map(doc=> (\r\n                           <Grid xs={12} sm={6} md={3} lg={3} >\r\n\r\n                                \r\n                                <div className={clases.divMargin}>\r\n                                  <Typography variant=\"h6\" align=\"center\">\r\n           \r\n                                <Button\r\n                                        id={doc.color}\r\n                                        variant=\"outlined\"\r\n                                        size=\"large\"\r\n                                        onClick={()=>redirecionar(doc)}\r\n                                        startIcon={<Icon>{doc.icono==null?\r\n                                            <> local_offer</>\r\n                                        :\r\n                                            doc.icono\r\n                                        }</Icon>}\r\n                                        className={clases.botonColor}\r\n                                    >\r\n                                        {doc.descripcion}\r\n                                </Button>\r\n                                </Typography>\r\n                                </div>\r\n                           </Grid>         \r\n                          \r\n\r\n                         ))\r\n                        }\r\n                    </Grid>\r\n            \r\n                    </div>\r\n                }\r\n\r\n\r\n\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Eligeetiqueta\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\admin\\Titulo\\Titulo.jsx",["527"],"import { TextField,Button,Grid  } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport FuncionesFirebase from '../../../Funciones/FuncionesFirebase'\r\nimport Swal from 'sweetalert2'\r\nimport Estilos from '../../../Componetes/Estilos'\r\n\r\n\r\nconst Titulo = (props) => {\r\n    const estilos=Estilos()\r\n    const [titulo, settitulo] = useState({\r\n        titulo:'',\r\n        subtitulo:'',\r\n        descripcion:''\r\n        \r\n    })\r\n\r\n   const actualizarState=(e)=>{\r\n       e.preventDefault()\r\n       settitulo({...titulo,[e.target.name]:e.target.value})\r\n   } \r\n\r\n\r\n\r\n   const tituloGuardar=async()=>{\r\n\r\n        try{\r\n            const query=await  FuncionesFirebase.guardarTitulo(titulo).then(()=>{\r\n                Swal.fire('Exito!','Informacion guardada','success')\r\n            })\r\n\r\n        }catch(e){\r\n            console.log(e)\r\n            Swal.fire(\"Error\",\"No se pudo guardar la informacion\",\"error\")\r\n        }\r\n\r\n   }\r\n\r\nuseEffect(async() => {\r\n   \r\n    const consulta =await FuncionesFirebase.pedirTitulo();\r\n    settitulo(consulta)\r\n}, [])\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Grid container>\r\n            <Grid xs={1} md={2}></Grid>\r\n            <Grid xs={10} md={8}>\r\n             <TextField \r\n            className={estilos.tituloMargenInput}\r\n            onChange={actualizarState}\r\n            name='subtitulo'\r\n            label='Subtitulo'\r\n            value={titulo.subtitulo}\r\n            placeholder='ingrese subtitulo' \r\n            variant=\"outlined\"  \r\n            fullWidth           \r\n            >\r\n            </TextField>              \r\n            <TextField\r\n            className={estilos.tituloMargenInput}\r\n            value={titulo.titulo}\r\n            name='titulo'\r\n            label=\"Titulo\"\r\n            placeholder='ingrese  titulo'\r\n            onChange={actualizarState}\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            >\r\n            </TextField>\r\n            <TextField\r\n            className={estilos.tituloMargenInput}\r\n            onChange={actualizarState}\r\n            name='descripcion'\r\n            label='Descripcion'\r\n\r\n            placeholder='ingrese la descripcion'\r\n            value={titulo.descripcion}\r\n            variant='outlined'\r\n            fullWidth\r\n            >\r\n            </TextField>\r\n            <Button onClick={()=>tituloGuardar()}\r\n            fullWidth\r\n            \r\n            className={estilos.tituloMargenInput + ' '+estilos.tituloBotonVerde}\r\n            >\r\n                    Guardar \r\n\r\n            </Button>\r\n            <Button\r\n            variant='contained'\r\n            className={estilos.tituloMargenInput +' ' +estilos.botonRojo}\r\n            onClick={()=>{props.history.push('/')}}\r\n            fullWidth>\r\n                volver\r\n            </Button>\r\n            </Grid>\r\n            <Grid xs={1} md={2}></Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Titulo\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\admin\\WhyPagAdmin.jsx",[],"C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\Cargando.jsx",[],"C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\VerInfo\\Estructura.jsx",["528"],"import React,{useState,useEffect} from 'react'\r\nimport {Grid} from '@material-ui/core'\r\nimport Imagen from '../VerInfo/Imagen'\r\nimport Formulario from '../VerInfo/Formulario'\r\nconst Estructura = (props) => {\r\n    const [imagen, setimagen] = useState({file:null,imagen:null})\r\n    const [info, setinfo] = useState({\r\n        id:'',\r\n        titulo:'',\r\n        resumen:'',\r\n        link:[]\r\n    })\r\n\r\n    useEffect(() => {\r\n    \r\n\r\n        setimagen({file:props.informacion.imagen})\r\n        setinfo({...props.informacion})    \r\n\r\n\r\n\r\n    }, [])\r\n\r\n    return (\r\n      <Grid container>\r\n\r\n          <Grid xs={12} md={6}>\r\n              \r\n              <Imagen id={info.id} titulo ={info.titulo} resumen ={info.resumen} imagen={imagen}  setimagen={setimagen} ></Imagen>\r\n           </Grid>  \r\n           <Grid xs={12} md={6}>\r\n                    <Formulario info={info}></Formulario>\r\n            </Grid>  \r\n\r\n\r\n      </Grid>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Estructura\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\Why\\Why.jsx",["529","530"],"import React,{useEffect,useState} from 'react'\r\nimport {Typography} from '@material-ui/core'\r\nimport Estilos from '../Estilos'\r\n\r\nconst Why = (props) => {\r\n\r\n        const estilos=Estilos()\r\n\r\n    \r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <Typography className={estilos.tituloWhy} variant=\"h5\" align=\"center\">\r\n                    {props.cabeza.titulo}\r\n            </Typography>\r\n            <Typography className={estilos.descripcionWhy} variant=\"h6\" align=\"center\">\r\n                    {props.cabeza.descripcion}\r\n            </Typography>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Why\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\Info\\Imagen.jsx",[],"C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\Info\\Formulario.jsx",["531","532","533","534"],"import React,{useEffect,useState} from 'react'\r\nimport {Typography,TextField,Grid,Button,Icon,makeStyles} from '@material-ui/core'\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport LinkIcon from '@material-ui/icons/Link';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Swal from \"sweetalert2\"\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    basurero:{\r\n        padding:\"0px\",\r\n        margin:\"0px 12px\",\r\n        color:\"#ff0000\"\r\n    }\r\n\r\n}))\r\n\r\nconst Formulario = (props) => {\r\n\r\n const classes =useStyles()   \r\n\r\n\r\n useEffect(() => {\r\n\r\n    console.log(props.link)\r\n    props.setlink(props.link);\r\n  }, [props]);\r\n\r\nconst agregarPaper=async() => {\r\n    const { value: url } = await Swal.fire({\r\n        input: 'url',\r\n        inputLabel: 'URL address',\r\n        inputPlaceholder: 'Enter the URL'\r\n      })\r\n      \r\n      if (url) {\r\n\r\n        props.setlink((link)=>[...link,url])\r\n        Swal.fire(`Entered URL: ${url}`)\r\n      }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n        <Typography align=\"center\">\r\n\r\n        {props.errores.titulo?\r\n        <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            label=\"Titulo\"\r\n            name=\"titulo\"\r\n            value={props.info.titulo}\r\n            onChange={props.actualizarState}\r\n            error\r\n            id=\"standard-error\" \r\n            helperText={props.errores.titulo}>\r\n            </TextField>\r\n        :\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            label=\"Titulo\"\r\n            name=\"titulo\"\r\n            value={props.info.titulo}\r\n            onChange={props.actualizarState}\r\n         \r\n        ></TextField>\r\n        \r\n        }\r\n     \r\n        </Typography>\r\n\r\n        <Typography align=\"center\" >\r\n\r\n                 {props.errores.resumen?\r\n                \r\n                <TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                id=\"resumen\"\r\n                label=\"Resumen\"\r\n                name=\"resumen\"\r\n                onChange={props.actualizarState}\r\n                value ={props.info.resumen}\r\n                multiline\r\n                 rowsMax={8}\r\n                autoComplete=\"resumenrafce\"\r\n                error\r\n                id=\"standard-error\" \r\n                helperText={props.errores.resumen}\r\n            \r\n                />\r\n                \r\n                :\r\n                <TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                id=\"resumen\"\r\n                label=\"Resumen\"\r\n                name=\"resumen\"\r\n                value ={props.info.resumen}\r\n                onChange={props.actualizarState}\r\n                multiline\r\n                 rowsMax={8}\r\n                autoComplete=\"resumenrafce\"\r\n            \r\n                />\r\n                }       \r\n                   \r\n         </Typography>\r\n\r\n         <Typography align=\"left\" >\r\n             \r\n                        <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        endIcon={<LinkIcon/>}\r\n                        onClick={() => agregarPaper()}\r\n\r\n                    >\r\n                        Agregar Link\r\n                    </Button>\r\n         </Typography>\r\n         <Typography align=\"left\" >\r\n             {props.link.map(doc=>(\r\n            <ul>\r\n                    <li>\r\n                       <a target=\"_blank\" href={doc}>     \r\n                            {doc}\r\n                        </a>\r\n\r\n                        <IconButton aria-label=\"delete\" className={classes.basurero}\r\n                            onClick={()=>props.borrarLink(doc)}\r\n                        >\r\n                                <DeleteIcon fontSize=\"small\" />\r\n                        </IconButton>\r\n\r\n\r\n                    </li>\r\n            </ul>\r\n            \r\n            \r\n             ))}\r\n\r\n        </Typography>\r\n\r\n\r\n\r\n\r\n    </>\r\n    )\r\n}\r\n\r\nexport default Formulario\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\Estilos.jsx",["535"],"import React from 'react'\r\nimport { makeStyles } from '@material-ui/core'\r\n\r\nconst Estilos = makeStyles((theme)=>({\r\n\r\n    divCircular:{\r\n        marginTop:\"100px\"\r\n\r\n    },\r\n    circular:{\r\n        height:\"72px !important\",\r\n        width:\"72px !important\",\r\n        display:\"block\",\r\n        margin:\"auto\"\r\n        },\r\n        textoTitulo:{\r\n                margin:'20px 0px',\r\n                fontFamily: 'Nunito',\r\n                fontWeight: 800\r\n        },\r\n        divResumen: {\r\n            height:\"300px\",\r\n            overflow:\"auto\"\r\n            \r\n        },\r\n\r\n        dividido :{\r\n        margin:'20px 0px',\r\n        height: '3px'\r\n},\r\ndivImagen:{\r\n       \r\n   \r\n    width:\"400px\",\r\n    maxHeight:'600px',\r\n    overflow: 'auto',\r\n    color:\"#21cbce\",\r\n    backgroundSize:\"260px auto\",\r\n    position:\"relative\",\r\n    backgroundRepeat:\"no-repeat\",\r\n    backgroundPosition:\"50%\",\r\n    borderRadius:\"0\",\r\n    display:\"block\",\r\n    margin:\"auto\",\r\n    marginTop:\"15px\",\r\n    [theme.breakpoints.down(\"sm\")]:{\r\n            marginTop:\"30px\"\r\n    },\r\n   \r\n},\r\n\r\nimgFoto:{\r\n    position:\"absolute\",\r\n    margin:\"auto\",\r\n    top:\"0\",\r\n    bottom:\"0\",\r\n    left:\"0\",\r\n    right:\"0\",\r\n    fontSize:\"3rem\"\r\n},\r\n\r\nbotonesIcono :{ \r\n\r\n    display:'flex',\r\n    justifyContent: 'center'\r\n    ,\r\n\r\n   '& ul':{\r\n        listStyle:'none'\r\n\r\n   },\r\n   '& li':{\r\n       float:'left',\r\n   }\r\n\r\n\r\n\r\n},\r\ntamanoIcono: {\r\n    fontSize: '45px !important',\r\n}\r\n,\r\ntamanoIconoMargen: {\r\n    fontSize: '45px !important',\r\n    margin:'0px 10px'\r\n},tituloWhy:{\r\n    fontWeight:\"700\",\r\n\r\n},descripcionWhy:{\r\n    fontWeight:\"300\",\r\n},divImgWhy:{\r\n    width: '260px',\r\n    height: '260px',\r\n    margin: 'auto',\r\n    display: 'block',\r\n    marginTop: '15px',\r\n    borderRadius:'100%',\r\n    backgroundSize: '260px auto',\r\n    backgroundRepeat: 'no-repeat',\r\n    backgroundPosition: '50%',\r\n    overflow: 'hidden',\r\n    border: '1px solid #00000033'\r\n\r\n    \r\n},divImgWhyDos:{\r\n    width: '160px',\r\n    height: '160px',\r\n    margin: 'auto',\r\n    display: 'block',\r\n    marginTop: '15px',\r\n    borderRadius:'100%',\r\n    backgroundSize: '260px auto',\r\n    backgroundRepeat: 'no-repeat',\r\n    backgroundPosition: '50%',\r\n    overflow: 'hidden',\r\n    border: '1px solid #00000033'\r\n\r\n    \r\n}\r\n,imgWhyDos:{\r\n  \r\n    height: '160px',\r\n    margin: 'auto',\r\n    display: 'block',\r\n    marginTop: '15px',\r\n    borderRadius:'100%',\r\n    backgroundSize:'253px auto',\r\n    backgroundRepeat:'no-repeat',\r\n    backgroundPosition: '50%',\r\n\r\n},\r\ncajaWhy: {\r\n    '&  .MuiTypography-alignCenter':{\r\n        textAlign: 'center',\r\n        margin: '25px auto'\r\n    }\r\n,\r\n\r\n    '& .MuiTypography-subtitle1':{\r\n       \r\n        fontWeight: 300\r\n       \r\n    }\r\n},\r\ncajaAdminWhy:{\r\n\r\n    '& .MuiFormControl-fullWidth': {\r\n        margin: '15px auto'\r\n    }\r\n\r\n},\r\n\r\nmargenAdmynWhy :{\r\n\r\n    margin:\"60px auto\"\r\n\r\n},\r\nbotonVerde:{\r\n    color: '#1ab37c',\r\n    border:'1px  solid #1ab37c'\r\n}, \r\nbotonRojo:{\r\n    color: '#ffffff',\r\n    background:'#f43636!important'\r\n}, \r\ntituloBotonVerde:{\r\n    color: '#ffffff',\r\n    background:'#1ab37c !important'\r\n}, \r\nmargenBotonImagen:{\r\n    margin:'5px auto'\r\n},\r\nbotonVerdeAlert:{\r\n    color: '#1ab37c',\r\n    border:'1px  solid #1ab37c',\r\n    width:'100px'\r\n}, \r\nbotonRojoAlert:{\r\n    color: '#f43636',\r\n    border:'1px  solid #f43636',\r\n    width:'100px'\r\n}, \r\n\r\n// variables para titulo pagina \r\n\r\n tituloSubtitulo:{\r\n     textTransform:'uppercase',\r\n     color:'#cf372c',\r\n     fontWeight:\"600\"\r\n\r\n },\r\n tituloTitulo:{\r\n     fontWeight:\"500\"\r\n },\r\n tituloMargen:{\r\n     marginBottom:'10px'\r\n },\r\n tituloMargenInput:{\r\n     marginTop:'10px',\r\n     marginBottom:'10px'\r\n\r\n }\r\n\r\n\r\n\r\n\r\n\r\n}))\r\n\r\nexport default Estilos\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\Tarjeta\\BotonMenu.jsx",["536","537"],"import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport DraftsIcon from '@material-ui/icons/Drafts';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport SettingsRoundedIcon from '@material-ui/icons/SettingsRounded';\r\nimport {IconButton} from '@material-ui/core';\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst StyledMenu = withStyles({\r\n  paper: {\r\n    border: '1px solid #d3d4d5',\r\n  },\r\n})((props) => (\r\n  <Menu\r\n    elevation={0}\r\n    getContentAnchorEl={null}\r\n    anchorOrigin={{\r\n      vertical: 'bottom',\r\n      horizontal: 'center',\r\n    }}\r\n    transformOrigin={{\r\n      vertical: 'top',\r\n      horizontal: 'center',\r\n    }}\r\n    {...props}\r\n  />\r\n));\r\n\r\nconst StyledMenuItem = withStyles((theme) => ({\r\n  root: {\r\n    '&:focus': {\r\n      backgroundColor: theme.palette.primary.main,\r\n      '& .MuiListItemIcon-root, & .MuiListItemText-primary': {\r\n        color: theme.palette.common.white,\r\n      },\r\n    },\r\n  },\r\n}))(MenuItem);\r\n\r\nexport default function CustomizedMenus(props) {\r\n    let history = useHistory();\r\n\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const Editarpaper = () => {\r\n\r\n    history.push(`/editarpaper/${props.id}`)\r\n  }\r\n\r\n  const VerInfo = () => {\r\n    history.push(`/info/${props.id}`)\r\n\r\n  }\r\n\r\n  return (\r\n    <>\r\n     <IconButton onClick={handleClick}  variant=\"contained\"  color=\"primary\"  >\r\n             <SettingsRoundedIcon ></SettingsRoundedIcon >\r\n        </IconButton>\r\n      <StyledMenu\r\n        id=\"customized-menu\"\r\n        anchorEl={anchorEl}\r\n        keepMounted\r\n        open={Boolean(anchorEl)}\r\n        onClose={handleClose}\r\n      >\r\n          \r\n        <StyledMenuItem onClick={()=>Editarpaper()}>\r\n       \r\n          <ListItemIcon>\r\n            <SendIcon fontSize=\"small\" />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Editar\" />\r\n        </StyledMenuItem>\r\n        \r\n        <StyledMenuItem onClick={()=>VerInfo()}>\r\n          <ListItemIcon>\r\n            <DraftsIcon fontSize=\"small\" />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"info\" />\r\n        </StyledMenuItem>\r\n      \r\n      </StyledMenu>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\Why\\Componentes.jsx",["538"],"import React from 'react'\r\nimport {Grid, Typography} from '@material-ui/core'\r\nimport Estilos from '../Estilos'\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Componentes = (props) => {\r\n    const estilos=Estilos()\r\n    return (\r\n        \r\n\r\n                <Grid  xs={12} md={4}>\r\n                \r\n                    <div className={estilos.divImgWhy}>\r\n                        <img style={{width:'100%',height:'100%'}} src={props.componentes.foto}></img>\r\n                    </div>\r\n\r\n                    <Typography align=\"center\" variant=\"h6\">\r\n                    {props.componentes.titulo}\r\n\r\n                    </Typography>\r\n                    <Typography align=\"center\" variant=\"subtitle1\">\r\n                    {props.componentes.descripcion}\r\n                    </Typography>\r\n                    \r\n                 </Grid>\r\n              \r\n            \r\n            \r\n        \r\n    )\r\n}\r\n\r\nexport default Componentes\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\Titulo\\Titulo.jsx",["539"],"import React ,{useState,useEffect} from 'react'\r\nimport FuncionesFirebase from '../../Funciones/FuncionesFirebase'\r\nimport {Typography} from '@material-ui/core'\r\nimport Estilos from '../Estilos'\r\nconst Titulo = () => {\r\n\r\n    const estilos = Estilos()\r\nconst [titulo, setTitulo] = useState({\r\n    titulo: '',\r\n    subtitulo:'',\r\n    descripcion:''\r\n})      \r\n\r\n\r\n\r\nuseEffect(async() => {\r\n   // pedir titulo a la base de datos  firebase\r\n    const consultaTitulo=await FuncionesFirebase.pedirTitulo();\r\n    setTitulo(consultaTitulo)\r\n\r\n\r\n\r\n}, [])\r\n\r\n\r\n    return (\r\n        <div className={estilos.tituloMargen}>\r\n            <Typography className={estilos.tituloSubtitulo} variant='h7' align='left'> \r\n                {titulo.subtitulo}\r\n             </Typography >\r\n             <Typography className={estilos.tituloTitulo} align=\"left\" variant=\"h4\">\r\n                 {titulo.titulo}\r\n             </Typography>\r\n             <Typography align=\"left\" variant=\"h6\">\r\n                 {titulo.descripcion}\r\n             </Typography>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Titulo\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\Navegador\\Dialogo.jsx",["540","541"],"import React ,{ useState,useEffect}from 'react'\r\n// import Button from '@mui/material/Button';\r\n// import TextField from '@mui/material/TextField';\r\n// import Dialog from '@mui/material/Dialog';\r\n// import DialogActions from '@mui/material/DialogActions';\r\n// import DialogContent from '@mui/material/DialogContent';\r\n// import DialogContentText from '@mui/material/DialogContentText';\r\n// import DialogTitle from '@mui/material/DialogTitle';\r\nimport {Button,TextField,Dialog,DialogActions,DialogContent,DialogContentText,DialogTitle} from '@material-ui/core'\r\nimport Estilos from '../Estilos'\r\nimport FuncionesFirebase from '../../Funciones/FuncionesFirebase'\r\nimport Swal from \"sweetalert2\"\r\nimport Cargando from '../Cargando'\r\n\r\n\r\nconst Dialogo = (props) => {\r\n    const estilos=Estilos()\r\n    const [state, setstate] = useState({\r\n        usuario:\"\",\r\n        website:\"\",\r\n        comentario:\"\"\r\n    })\r\n    const [cargando, setcargando] = useState(false)\r\n    const [abierto, setabierto] = useState(props.abierto)\r\n    const [errores, setErrores] = useState([])\r\n    const handleClose=props.cerrar\r\n    useEffect(() => {   \r\n        setabierto(props.abierto)\r\n\r\n    }, [props])\r\n\r\n\r\n    const validaciones=()=>{\r\n\r\n        console.log(state)\r\n        let err=[]\r\n        var regex= /(http|https):\\/\\/(\\w+:{0,1}\\w*)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%!\\-\\/]))?/\r\n       \r\n        if(state.usuario.trim()==\"\"){\r\n\r\n            err.usuario='please enter a name'\r\n\r\n        }\r\n        if(state.website.trim()==\"\"){\r\n            err.website='please enter a url'\r\n        }\r\n            else\r\n        {\r\n            if(!regex.test(state.website))\r\n            err.website='please enter valid url'\r\n        }\r\n        if(state.comentario.trim()==''){\r\n            err.comentario='please enter comment'\r\n        }\r\n        return err\r\n    }\r\n    const actualizarState=(e)=>{\r\n        e.preventDefault()\r\n        setstate({...state,[e.target.name]:e.target.value})\r\n    }\r\n    const guardarComentario=async()=>{\r\n\r\n        try{\r\n      \r\n           let err=validaciones()\r\n           console.log(err)\r\n           if(Object.keys(err).length){\r\n               setcargando(false)\r\n               setErrores(err)\r\n            \r\n           }else{ \r\n            setcargando(true)\r\n            state.fecha=new Date()\r\n            state.anonimo=true\r\n            await FuncionesFirebase.IngresarColaboracion(state).then(()=>{\r\n                Swal.fire(\"Exito\",\"informacion guardada\",\"success\")\r\n                handleClose()\r\n                setcargando(false)\r\n            })\r\n            }\r\n        }catch(e){\r\n            Swal.fire(\"Ups!\",\"ha ocurrido un error\",\"error\")\r\n            console.log(e)\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n    return (\r\n        <div>\r\n        <Dialog open={abierto} onClose={handleClose}>\r\n\r\n         {cargando? \r\n            <>\r\n           <DialogTitle> wait a moment...</DialogTitle>\r\n       \r\n            </>:\r\n            <>\r\n            <DialogTitle>Grow your audience by including your environmental website in PlanetColab</DialogTitle>\r\n        <DialogContent>\r\n\r\n\r\n        {errores.usuario!=null? \r\n             <TextField\r\n             error\r\n             autoFocus\r\n             margin=\"dense\"\r\n             id=\"name\"\r\n             name=\"usuario\"\r\n             label=\"Name\"\r\n             fullWidth\r\n             variant=\"outlined\"\r\n             onChange={actualizarState}\r\n             helperText={errores.usuario}\r\n           />  \r\n            :\r\n            <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            id=\"name\"\r\n            name=\"usuario\"\r\n            label=\"Name\"\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            onChange={actualizarState}\r\n          \r\n          />      \r\n        }    \r\n        {errores.website!=null?\r\n\r\n            <TextField\r\n            error       \r\n            margin=\"dense\"\r\n            id=\"website\"\r\n            name='website'\r\n            label=\"Website\"\r\n            placeholder='https://www.example.com'\r\n            fullWidth\r\n            type=\"url\"\r\n            variant=\"outlined\"\r\n            onChange={actualizarState}\r\n            helperText={errores.website}\r\n            />\r\n\r\n            :\r\n            <TextField\r\n                    \r\n            margin=\"dense\"\r\n            id=\"website\"\r\n            name='website'\r\n            label=\"Website\"\r\n            placeholder='https://www.example.com'\r\n            fullWidth\r\n            type=\"url\"\r\n            variant=\"outlined\"\r\n            onChange={actualizarState}\r\n            />\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n    {errores.comentario?\r\n    \r\n    <TextField\r\n    error\r\n    margin=\"dense\"\r\n    id=\"comentario\"\r\n    name='comentario'\r\n    placeholder=\"Please describe shortly the information included on your environmental website\"\r\n    fullWidth\r\n    variant=\"outlined\"\r\n    multiline\r\n    rowsMax={4}\r\n    rows={4}\r\n    onChange={actualizarState}\r\n    helperText={errores.comentario}\r\n  />:\r\n  <TextField\r\n  margin=\"dense\"\r\n  id=\"comentario\"\r\n  name='comentario'\r\n  placeholder=\"Please describe shortly the information included on your environmental website\"\r\n  fullWidth\r\n  variant=\"outlined\"\r\n  multiline\r\n  rowsMax={4}\r\n  rows={4}\r\n  onChange={actualizarState}\r\n/>\r\n\r\n    }\r\n\r\n        \r\n          \r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button className={estilos.botonRojoAlert} onClick={handleClose}>Cancel</Button>\r\n          <Button className={estilos.botonVerdeAlert} onClick={()=>guardarComentario()}>Send</Button>\r\n        </DialogActions>\r\n            \r\n            \r\n            </>\r\n        }   \r\n        \r\n      </Dialog>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogo\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\Progreso.jsx",[],"C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\admin\\AdminComponentes.jsx",["542","543"],"import React,{useState} from 'react'\r\nimport {Grid,TextField,Button,Typography} from '@material-ui/core'\r\nimport Estilos from '../../Componetes/Estilos'\r\nimport FuncionesFirebase from '../../Funciones/FuncionesFirebase'\r\nimport Swal from 'sweetalert2'\r\nimport Cargando from '../../Componetes/Cargando'\r\n\r\nconst AdminComponentes = (props) => {\r\nconst estilos=Estilos()\r\nconst [guardarCargando, setguardarCargando] = useState(false)\r\nconst [state, setstate] = useState(props.componente)\r\nconst [imagen, setimagen] = useState({file:null,imagen:null})\r\nconst index=props.index\r\nconst actualizar=(e)=>{\r\n    e.preventDefault()\r\n    setstate({...state,[e.target.name]:e.target.value})\r\n}\r\n\r\nconst cambiarImagen=imagen=>{\r\n    const agregarImagen=imagen.target.files[0]\r\n    if(agregarImagen!=undefined){\r\n        setimagen({imagen:agregarImagen,file:URL.createObjectURL(agregarImagen)})\r\n        setstate({...state,\r\n            foto:URL.createObjectURL(agregarImagen)  \r\n        })\r\n    }\r\n}\r\nconst editarComponente=async()=>{    \r\n    setguardarCargando(true)\r\n\r\n    try{\r\n        switch(index){\r\n            case 0:\r\n            if(imagen.imagen!==null){   \r\n            let prueba= await FuncionesFirebase.subirImagenWhy('ComponenteUno',imagen)\r\n            state.foto=prueba\r\n             }\r\n            await FuncionesFirebase.editarComponenteUno(state)  \r\n            break;\r\n            case 1:\r\n\r\n            if(imagen.imagen!==null){\r\n            state.foto=await FuncionesFirebase.subirImagenWhy(\"ComponenteDos\",imagen)\r\n            }\r\n            await FuncionesFirebase.editarComponenteDos(state)  \r\n            break\r\n            case 2:\r\n            if(imagen.imagen!==null){\r\n            state.foto=await FuncionesFirebase.subirImagen('ComponenteTres',imagen)\r\n            }\r\n            await FuncionesFirebase.editarComponenteTres(state)\r\n            break\r\n        }\r\n\r\n        Swal.fire('Exito!','se han guardados los cambios','success')\r\n        setguardarCargando(false)\r\n    \r\n    }catch(e){\r\n        console.log(\"hubo un error\")\r\n        console.log(e)\r\n        Swal.fire(\"Error\",\"ups! ha ocurrido un error\",\"error\")\r\n    }\r\n}\r\n\r\n\r\n    return (\r\n        <div className={estilos.margenAdmynWhy}>\r\n\r\n            {guardarCargando ?\r\n            \r\n                <Cargando></Cargando>\r\n                :\r\n                <Grid container>\r\n                <Grid xs={12} md={4}>\r\n                \r\n                    <div>\r\n                    <div className={estilos.divImgWhyDos}>     \r\n                    <img src={state.foto} style={{width:'100%',height:'100%'}} ></img>           \r\n                    </div>\r\n                    <div>\r\n                        <Typography align=\"center\" >\r\n\r\n                        <input \r\n                            type=\"file\"\r\n                            id={\"subir\"+index}\r\n                            accept=\"image/*\"\r\n                            style={{display:\"none\"}}\r\n                            onChange={(e)=>cambiarImagen(e)}\r\n                        />\r\n\r\n                         <Button\r\n                            variant='outlined'\r\n                            className={estilos.botonVerde + ' '+estilos.margenBotonImagen}\r\n                         >\r\n                           <label \r\n                            htmlFor={\"subir\"+index}\r\n                           >     \r\n                             Cambiar imagen\r\n                           </label>     \r\n                         </Button>\r\n                        </Typography>    \r\n                    </div>\r\n                    </div>\r\n                </Grid> \r\n                <Grid xs={12} md={8}>        \r\n                       <TextField\r\n                        fullWidth\r\n                        value={state.titulo}  \r\n                        variant='outlined'\r\n                        label='Titulo'\r\n                        name='titulo'\r\n                        onChange={actualizar}\r\n                       >\r\n                        </TextField>     \r\n                        <TextField\r\n                        onChange={actualizar}\r\n                        fullWidth\r\n                        value={state.descripcion}  \r\n                        variant='outlined'\r\n                        label='Descripcion'\r\n                        name='descripcion'\r\n                        multiline \r\n                        rowsMax={8}\r\n                       >\r\n                        </TextField>                         \r\n                </Grid> \r\n                <Grid xs={12} md={12}>\r\n                    <Typography align=\"right\">\r\n                    <Button variant='outlined   ' className={estilos.botonVerde}\r\n                    onClick={()=>editarComponente()}                 \r\n                    >\r\n                    Guardar\r\n                    </Button>\r\n                    </Typography>\r\n\r\n                 \r\n                </Grid>\r\n            </Grid>\r\n                \r\n        }\r\n\r\n          \r\n          \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AdminComponentes\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\VerInfo\\Imagen.jsx",["544","545","546","547","548","549","550"],"import React,{useEffect,useState} from 'react'\r\nimport {Typography,makeStyles} from '@material-ui/core'\r\nimport AddAPhotoIcon from '@material-ui/icons/AddAPhoto';\r\nimport estilos from '../Estilos'\r\nimport Botones from './Botones';\r\nimport Firebase from '../../firebase/firebase';\r\nimport HelmetMetaData from '../Helmet/Helmet';\r\n\r\n\r\n\r\nconst Imagen = (props) => {\r\n\r\nconst clases =estilos()\r\n\r\n    const [url, seturl] = useState({})\r\n\r\n\r\n\r\nuseEffect(async () => {\r\n\r\n//     const prueba= await fetch('https://firebasestorage.googleapis.com/v0/b/crispaper-30459.appspot.com/o/Informacion%2F126906762_110192684249055_224218762780413843_o.jpg?alt=media&token=ed0d82be-648e-4d4a-845e-e0fe575c566e')\r\n//   .then(res => res.blob()) // Gets the response and returns it as a blob\r\n//   .then(blob => {\r\n//     // Here's where you get access to the blob\r\n//     // And you can use it for whatever you want\r\n//     // Like calling ref().put(blob)\r\n\r\n//     // Here, I use it to make an image appear on the page\r\n//     let objectURL = URL.createObjectURL(blob);\r\n//     return objectURL\r\n    const prueba=await  Firebase.storage.ref().child('Informacion/126906762_110192684249055_224218762780413843_o.jpg').getDownloadURL().then(function(url) {\r\n    // `url` is the download URL for 'images/stars.jpg'\r\n  \r\n    // This can be downloaded directly:\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.responseType = 'blob';\r\n   \r\n  \r\n    xhr.onload = function(event) {\r\n      var blob = xhr.response;\r\n      console.log('blob')\r\n      console.log(blob);\r\n    };\r\n    xhr.open('GET', url);\r\n    xhr.send();\r\n    console.log(xhr)\r\n\r\n    // Or inserted into an <img> element:\r\n    var img = document.getElementById('myimg');\r\n  \r\n  }).catch(function(error) {\r\n    // Handle any errors\r\n    console.log(error);\r\n  });\r\n\r\nconsole.log()\r\n\r\n//seturl(prueba) \r\n\r\n\r\n    \r\n}, [])\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n\r\n                    <Typography  align=\"center\" variant=\"h3\">\r\n\r\n                            <div  className={clases.divImagen}>\r\n\r\n  \r\n                            \r\n                             \r\n                                <img src={props.imagen.file} style={{height:\"100%\",width:\"100%\"}}/>\r\n\r\n                              \r\n\r\n\r\n                               \r\n                            \r\n\r\n                            </div>\r\n                         \r\n                    </Typography>\r\n\r\n                    <Typography align=\"center\">\r\n                            <Botones id ={props.id} titulo={props.titulo} resumen={props.resumen} imagen ={props.imagen.file}></Botones>\r\n\r\n                    </Typography>\r\n\r\n              \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Imagen\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\VerInfo\\Formulario.jsx",["551"],"import { Grid ,Typography ,Divider} from '@material-ui/core'\r\nimport React from 'react'\r\nimport Estilos from '../Estilos'\r\n\r\nconst Formulario = (props) => {\r\n    const estilos=Estilos()\r\n\r\n    return (\r\n        <Grid container>\r\n\r\n          <Grid xs={12}>\r\n              <Typography className={estilos.textoTitulo} variant=\"h4\" align=\"left\">\r\n                    {props.info.titulo}\r\n              </Typography>\r\n         </Grid>  \r\n\r\n         <Grid xs={12}>\r\n             <div className={estilos.divResumen}>\r\n            <Typography variant=\"h5\" align=\"left\" className={{color:'#000000b3'}}>\r\n                    {props.info.resumen}\r\n            </Typography>\r\n            </div>\r\n              \r\n         </Grid> \r\n\r\n          <Grid xs={12}>\r\n        \r\n          <Divider className={estilos.dividido} />\r\n\r\n              \r\n         </Grid>      \r\n\r\n         <Grid xs={12}>\r\n        \r\n         <Typography variant=\"h5\" align=\"left\" style={{color:'#0e0eb9'}}>\r\n            Learn more \r\n            </Typography>\r\n        \r\n            <Typography align=\"left\" >\r\n             {props.info.link.map(doc=>(\r\n            <ul>\r\n                    <li>\r\n                       <a target=\"_blank\" href={doc}>     \r\n                            {doc}\r\n                        </a>\r\n\r\n                    </li>\r\n            </ul>\r\n            \r\n            \r\n             ))}\r\n\r\n        </Typography>\r\n\r\n            \r\n       </Grid>      \r\n\r\n\r\n\r\n\r\n\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Formulario\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\Helmet\\Helmet.jsx",["552"],"import React from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport Icono from \"../../pajaro.svg\"\r\n\r\nexport default function HelmetMetaData(props) {\r\n   let location = useLocation();\r\n   let currentUrl = \"http://www.planetcolab.com\" + location.pathname;\r\n   let quote = props.quote !== undefined ? props.quote : \"Planet Colab - Curated Environmental Information and Software\";\r\n   let title = props.title !== undefined ? props.title : \"Planet Colab\";\r\n   let image = props.image !== undefined ? props.image : \"%PUBLIC_URL%/pajaro.svg\";\r\n   let description = props.description !== undefined ? props.description  : \"Free and open resource with curated environmental information sources,software and tools for your project or research. Powered  by collaboration\";\r\n   let hashtag = props.hashtag !== undefined ? props.hashtag : \"#planetcolab\";\r\n\r\nreturn (\r\n <Helmet>\r\n     <title>{title}</title>\r\n     <meta charset=\"utf-8\" />\r\n     <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n     <meta name=\"csrf_token\" content=\"\" />\r\n     <meta property=\"type\" content=\"website\" />\r\n     <meta property=\"url\" content={currentUrl} />\r\n     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"/>\r\n     <meta name=\"msapplication-TileColor\" content=\"#ffffff\" />\r\n     <meta name=\"msapplication-TileImage\" content=\"/ms-icon-144x144.png\" />\r\n     <meta name=\"theme-color\" content=\"#ffffff\" />\r\n     <meta name=\"_token\" content=\"\" />\r\n     <meta name=\"robots\" content=\"noodp\" />\r\n     <meta property=\"title\" content={title} />\r\n     <meta property=\"quote\" content={quote} />\r\n     <meta name=\"description\" content={description} />\r\n     <meta property=\"image\" content={image} />\r\n     <meta property=\"og:locale\" content=\"en_US\" />\r\n     <meta property=\"og:type\" content=\"website\" />\r\n     <meta property=\"og:title\" content={title} />\r\n     <meta property=\"og:quote\" content={quote} />\r\n     <meta property=\"og:hashtag\" content={hashtag} />\r\n     <meta property=\"og:image\" content={image} />\r\n     <meta content=\"image/*\" property=\"og:image:type\" />\r\n     <meta property=\"og:url\" content={currentUrl} />\r\n     <meta property=\"og:site_name\" content=\"CampersTribe\" />\r\n     <meta property=\"og:description\" content={description} />    \r\n      </Helmet>\r\n);\r\n}","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\VerInfo\\Botones.jsx",["553"],"import { Icon } from '@material-ui/core'\r\nimport React,{useEffect} from 'react'\r\nimport FacebookIcon from '@material-ui/icons/Facebook';\r\nimport TwitterIcon from '@material-ui/icons/Twitter';\r\nimport estilos from '../Estilos'\r\nimport Firebase from '../../Funciones/FuncionesFirebase'\r\nimport {FacebookShareButton,TwitterShareButton} from \"react-share\";\r\nimport { useLocation } from 'react-router-dom';\r\nimport HelmetMetaData from '../Helmet/Helmet';\r\n\r\n\r\nconst Botones = (props) => {\r\n\r\n    const location=useLocation()\r\n    const clases =estilos()\r\n const url = \"https://crispaper-30459.web.app/\"+ location.pathname\r\nconst descargarimagen=async(id)=> {\r\n\r\n    alert('descargando')\r\nawait Firebase.descargarImagen(id)\r\n// const prueba= await fetch('https://upload.wikimedia.org/wikipedia/commons/7/77/Delete_key1.jpg')\r\n//   .then(res => res.blob()) // Gets the response and returns it as a blob\r\n//   .then(blob => {\r\n//     // Here's where you get access to the blob\r\n//     // And you can use it for whatever you want\r\n//     // Like calling ref().put(blob)\r\n\r\n//     // Here, I use it to make an image appea    r on the page\r\n//     let objectURL = URL.createObjectURL(blob);\r\n//     return objectURL\r\n// });\r\n\r\n// console.log(prueba)\r\n\r\n}\r\n\r\nuseEffect(() => {\r\n    console.log(url)\r\n  \r\n}, [])\r\n\r\n    return (\r\n        <div className={clases.botonesIcono}>\r\n            <HelmetMetaData title={props.titulo}  description={props.resumen} image={props.imagen}></HelmetMetaData>\r\n\r\n            <ul>\r\n                <li>\r\n                    <a  href={props.imagen}  target=\"_blank\">\r\n                    <Icon className={clases.tamanoIcono}>\r\n                    file_download\r\n                    </Icon>\r\n                    </a>\r\n                </li>\r\n                <li>\r\n                    <Icon className={clases.tamanoIconoMargen}>\r\n                    <FacebookShareButton \r\n                url={url}\r\n                quote={props.titulo}\r\n                >\r\n                 <FacebookIcon className={clases.tamanoIcono}></FacebookIcon>\r\n              </FacebookShareButton>\r\n\r\n                       \r\n                    </Icon>\r\n                </li>\r\n                <li>\r\n                <TwitterShareButton\r\n                        url={url}\r\n                        title={props.titulo}\r\n                        hashtag=\"#planetcolab\"\r\n                       \r\n                    >\r\n                    <Icon className={clases.tamanoIcono}>\r\n                        <TwitterIcon className={clases.tamanoIcono}></TwitterIcon>\r\n                    </Icon>\r\n                    </TwitterShareButton>\r\n                </li>\r\n\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Botones\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\CardPaper\\CardPaper.jsx",["554","555","556","557"],"import React from 'react';\r\nimport { EstilosCard } from './EstilosCard';\r\nimport { Grid, Paper, Typography, Button, IconButton, CircularProgress, setRef } from \"@material-ui/core\"\r\nimport \"moment/locale/es\"\r\nimport moment from 'moment'\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Basurero from '@material-ui/icons/Delete';\r\nimport AddAPhotoIcon from '@material-ui/icons/AddAPhoto';\r\nimport CorazonLleno from \"../../imagen/iconos/arbolLleno.png\"\r\nimport Corazon from \"../../imagen/iconos/arbolVacio.png\"\r\nimport BotonMenu from \"../Tarjeta/BotonMenu\"\r\n\r\n\r\nconst CardPaper = ({ valor, usuario, buscarChips, megustaSinValidarUsuario, funcionCorazon, setlistapaper, borrar }) => {\r\n    const clases = EstilosCard();\r\n    return (\r\n        <Paper key={valor.id} className={clases.caja} elevation={3}>\r\n            <Grid container className={clases.contenedor}>\r\n                <Grid xs={12} sm={12} md={9}>\r\n                    <Grid container>\r\n                        <Grid xs={12} sm={12} md={4}>\r\n                            <div>\r\n                                {valor.imagen == null ? (\r\n                                    <div className={clases.divFoto}>\r\n                                        <AddAPhotoIcon className={clases.imgFoto} />\r\n                                    </div>\r\n                                ) : (\r\n                                    <div\r\n                                        className={clases.divImagen}\r\n                                        style={{\r\n                                            backgroundImage: `url(${valor.imagen})`,\r\n                                        }}\r\n                                    />\r\n                                )}\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid xs={12} sm={12} md={8}>\r\n                            <div className={clases.divTexto}>\r\n                                <Typography variant=\"h5\" className={clases.titulo}>\r\n                                    {valor.info == true ? (\r\n                                        <a style={{ textDecoration: \"none\" }} href={`/information/${valor.id}`}>\r\n                                            {valor.titulo}\r\n                                        </a>\r\n                                    ) : (\r\n                                        valor.titulo\r\n                                    )}\r\n                                </Typography>\r\n                                <Typography className={clases.fecha} variant=\"subtitle2\">\r\n                                    {moment(new Date(valor.subida.seconds * 1000)).format(\"D MMM YYYY\")}\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" className={clases.resumen}>\r\n                                    {valor.resumen}\r\n                                </Typography>\r\n                            </div>\r\n                            <Typography variant=\"subtitle1\">\r\n                                {valor.etiquetas.map((valor) => (\r\n                                    <Chip\r\n                                        variant=\"outlined\"\r\n                                        className={clases.margenChip}\r\n                                        onClick={() => buscarChips(valor)}\r\n                                        color=\"primary\"\r\n                                        size=\"small\"\r\n                                        label={valor.descripcion}\r\n                                    />\r\n                                ))}\r\n                            </Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid xs={12} sm={12} md={2}>\r\n                 <div className={clases.divBotones}>\r\n                    <div className={clases.cajaMeGusta}>\r\n                        <Typography  className={clases.centrarComponente} variant=\"subtitle1\">\r\n                            <Button\r\n                                onClick={() => megustaSinValidarUsuario(valor)}\r\n                                className={clases.botonLikes}\r\n                                startIcon={\r\n                                    funcionCorazon(valor) ? (\r\n                                        <>\r\n                                            <img height=\"25\" src={CorazonLleno} alt=\"Corazon lleno\" />\r\n                                        </>\r\n                                    ) : (\r\n                                        <>\r\n                                            <img height=\"25\" src={Corazon} alt=\"Corazon vacío\" />\r\n                                        </>\r\n                                    )\r\n                                }\r\n                            >\r\n                                {valor.likes}\r\n                            </Button>\r\n                            <Typography  align='start' className={clases.textUpVote} variant=\"subtitle2\">\r\n                                es util\r\n                            </Typography>\r\n                        </Typography>\r\n                    </div>\r\n                    <div className={clases.botonPdf}>\r\n                        <Typography className={clases.centrarComponente} variant=\"subtitle1\">\r\n                            <a\r\n                                href={valor.pdf == null ? valor.link : valor.pdf}\r\n                                style={{ textDecoration: \"none\" }}\r\n                                target=\"_blank\"\r\n                            >\r\n                                <Button className=\"botoneditar\" variant=\"contained\">\r\n                                    Acceder\r\n                                </Button>\r\n                            </a>\r\n                        </Typography>\r\n                    </div>\r\n                    </div>\r\n                    {usuario == null ? (\r\n                        <div></div>\r\n                    ) : (\r\n                        usuario.administrador ? (\r\n                            <div className={clases.diveditarborrar}>\r\n                                <Grid container>\r\n                                    <Grid xs={6}>\r\n                                        <Typography variant=\"subtitle1\" align=\"center\">\r\n                                            <BotonMenu setlistapaper={setlistapaper} id={valor.id}></BotonMenu>\r\n                                        </Typography>\r\n                                    </Grid>\r\n                                    <Grid xs={6}>\r\n                                        <Typography variant=\"subtitle1\" align=\"center\">\r\n                                            <IconButton variant=\"contained\" color=\"primary\" onClick={() => borrar(valor)}>\r\n                                                <Basurero></Basurero>\r\n                                            </IconButton>\r\n                                        </Typography>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </div>\r\n                        ) : (\r\n                            <div></div>\r\n                        )\r\n                    )}\r\n                </Grid>\r\n            </Grid>\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default CardPaper;\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\CardPaper\\EstilosCard.jsx",["558"],"import { makeStyles } from \"@material-ui/core\";\r\n\r\n\r\nexport const EstilosCard = makeStyles((theme) => ({\r\n  button: {\r\n    margin: '3px'\r\n  },\r\n  margen: {\r\n    margin: \"45px auto \",\r\n    \"& .botoneditar\": {\r\n      background: \"#4a9341\",\r\n      color: \"#ffffff\",\r\n      \"&:hover\": {\r\n        background: \"#ffffff\",\r\n        color: \"#1ab37c !important\",\r\n      },\r\n    },\r\n    \" & #mandarina .MuiSvgIcon-root\": {\r\n      color: \"#EC6933\",\r\n    },\r\n    \" & #verde .MuiSvgIcon-root\": {\r\n      color: \"#4B9965\",\r\n    },\r\n    \" & #morado .MuiSvgIcon-root\": {\r\n      color: \"#9372B6\",\r\n    },\r\n    \" & #azul .MuiSvgIcon-root\": {\r\n      color: \"#4CA9B2\",\r\n    },\r\n    \" & .MuiButton-containedPrimary\": {\r\n      color: \"#434343\",\r\n      backgroundColor: \"#ffffff\",\r\n      boxShadow: \"none\"\r\n    },\r\n    \"& .botoneditar\": {\r\n      background: \"#4a9341\",\r\n      color: \"#ffffff\",\r\n      marginTop: \"10px\",\r\n      \"&:hover\": {\r\n        background: \"#ffffff\",\r\n        color: \"#1ab37c !important\",\r\n      },\r\n    }\r\n  },\r\n  caja: {\r\n    position: \"relative\",\r\n    width: \"80vw\",\r\n    margin: \"20px auto\",\r\n    display: \"block\",\r\n    height: \"unset\",\r\n    borderRadius: \"10px\",\r\n    transition: \"background-color .25s,color .25s,box-shadow .25s\",\r\n    boxShadow: \"0 8px 42px -8px rgb(0 0 0 / 20%)\",\r\n    border: \"1px solid #f0f0f0\",\r\n    [theme.breakpoints.down(\"md\")]: {\r\n      height: \"unset\"\r\n    }\r\n  },\r\n  titulo: {\r\n    fontWeight: \"500\",\r\n    fontFamily: \"nunito\"\r\n  },\r\n  tituloGeneral: {\r\n    fontWeight: \"700\",\r\n    fontFamily: \"Lato\",\r\n    fontSize: \"27px\"\r\n  },\r\n  divTituloGeneral: {\r\n    margin: \"0px auto\",\r\n    width: \"85vw\"\r\n  },\r\n  fecha: {\r\n    fontWeight: \"500\",\r\n    fontFamily: \"nunito\",\r\n    paddingTop: \"5px\",\r\n    color: \"#717171\"\r\n  },\r\n  contenedor: {\r\n    margin: \"18px auto\"\r\n  },\r\n  resumen: {\r\n    fontFamily: \"nunito\",\r\n    margin: \"15px auto\"\r\n  },\r\n  diveditarborrar: {\r\n    position: \"absolute\",\r\n    bottom: \"0\",\r\n    right: \"9px\",\r\n    width: \"90px\"\r\n  },\r\n  divFoto: {\r\n    width: \"250px\",\r\n    height: \"160px\",\r\n    border: \"2px dashed #21cbce\",\r\n    display: \"block\",\r\n    margin: \"16px auto\",\r\n    position: \"relative\",\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      margin: \"30px auto\"\r\n    }\r\n  },\r\n  divImagen: {\r\n    height: \"160px\",\r\n    width: \"260px\",\r\n    backgroundSize: \"260px auto\",\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundPosition: \"50%\",\r\n    borderRadius: \"16px\",\r\n    display: \"block\",\r\n    margin: \"auto\",\r\n    marginTop: \"15px\",\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      marginTop: \"30px\"\r\n    }\r\n  },\r\n  imgFoto: {\r\n    color: \"#21cbce\",\r\n    position: \"absolute\",\r\n    margin: \"auto\",\r\n    top: \"0\",\r\n    bottom: \"0\",\r\n    left: \"0\",\r\n    right: \"0\",\r\n    fontSize: \"3rem\"\r\n  },\r\n  cajaMeGusta: {\r\n    position: 'absolute',\r\n    top: '8px',\r\n    right: '12px',\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      position: 'unset',\r\n    }\r\n  },\r\n  divCircular: {\r\n    marginTop: \"100px\"\r\n  },\r\n  botonLikes: {\r\n    color: \"#35b37c\",\r\n    margin: \"8px 0px 0x 0px\",\r\n    border: \"1px solid\"\r\n  },\r\n  margenChip: {\r\n    margin: \"0px 3px\",\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      margin: \"5px 23px\"\r\n    }\r\n  },\r\n  circular: {\r\n    height: \"72px !important\",\r\n    width: \"72px !important\",\r\n    display: \"block\",\r\n    margin: \"auto\"\r\n  },\r\n  divTexto: {\r\n    [theme.breakpoints.down(\"md\")]: {\r\n      margin: \"0vw 5vw 0\"\r\n    },\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      margin: \"5vw 5vw 0\"\r\n    }\r\n  },\r\n  textNoDisponible: {\r\n    fontFamily: \"Nunito\",\r\n    color: \"#808080\"\r\n  },\r\n  centrarComponente: {\r\n    textAlign: \"end\",\r\n    marginRight: \"10px\",\r\n    [theme.breakpoints.down(\"md\")]: {\r\n      textAlign: \"center\",\r\n    }\r\n  },\r\n  botonPdf: {\r\n    position: \"absolute\",\r\n    bottom: \"55px\",\r\n    right: '0px',\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      position: 'unset'\r\n    }\r\n  },\r\n  textUpVote: {\r\n    fontFamily: \"nunito\",\r\n    textAlign: \"center\",\r\n    color: \"#808080\"\r\n  },\r\n  divBotones: {\r\n    margin:0,\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      display: 'flex',\r\n      margin:'10px 23px',\r\n      justifyContent: 'space-between'\r\n    }\r\n  }\r\n\r\n}));\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\CardPaper\\Etiiqueta_Tipo\\Etiqueta_Tipo.jsx",["559"],"import React, { useState, useEffect } from 'react'\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { listarTagTiposDb } from '../../../firebase/firebase_db/TagTipo';\r\nimport Swal from 'sweetalert2';\r\nimport { Icon } from '@iconify/react';\r\nimport { Box, makeStyles } from '@material-ui/core';\r\nimport \"./Etiqueta_Tipo.css\"\r\nimport IconOpenModal from './IconOpenModal';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n  },\r\n  icon: {\r\n    marginRight: theme.spacing(1), // Ajusta el margen según sea necesario\r\n  },\r\n}));\r\n\r\nconst EditChip = (props) => {\r\n  const classes = useStyles();\r\n  if (!props.option) {\r\n    return null; // O puedes manejar el caso de error de otra manera\r\n  }\r\n\r\n  return (\r\n    <Chip\r\n      variant=\"outlined\"\r\n      label={props.option.descripcion}\r\n      icon={\r\n        <Icon\r\n          style={{ margin: \"12px\" }}\r\n          icon={props.option.icono}\r\n        />\r\n      }\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\n\r\n\r\nconst Etiqueta_Tipo = (props) => {\r\n  // inicializar estilos \r\n  const classes = useStyles();\r\n  // etiquetas tipo \r\n  const [etiquetas, setEtiquetas] = useState([]);\r\n  // tag useState \r\n  const [tag, setTag] = useState([]);\r\n\r\n  // funcion para buscar las etiquetas \r\n  const obtenerTagTipo = async () => {\r\n    const response = await listarTagTiposDb()\r\n    return response;\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    obtenerTagTipo()\r\n      .then((response) => {\r\n        setEtiquetas(response.data);\r\n      })\r\n      .catch((err) => {\r\n        Swal.fire({\r\n          icon: \"error\",\r\n          title: \"Error\",\r\n          text: \"Ocurrió un error al procesar la solicitud.\",\r\n        });\r\n      });\r\n  }, []);\r\n\r\n\r\n\r\n\r\n  return (\r\n    <Box display=\"flex\" flexDirection=\"row\" >\r\n      <Box flexGrow={1} >\r\n        <Autocomplete\r\n          multiple\r\n          id=\"tags-filled\"\r\n          options={etiquetas}\r\n          value={tag}\r\n          onChange={(event, newValue) => {\r\n            if (newValue) {\r\n              // Verifica si newValue y newValue[0].title están definidos antes de agregarlo a 'tag'\r\n              setTag([newValue[newValue.length - 1]]);\r\n            }\r\n          }}\r\n          getOptionLabel={option => option.descripcion}\r\n          renderTags={(value, getTagProps) => {\r\n            return value.map((option, index) => (\r\n              <EditChip option={option} {...getTagProps({ index })} />\r\n            ));\r\n          }}\r\n          renderOption={(option) => {\r\n            return (<span className={classes.container}>  <Icon className={classes.icon} icon={option.icono} /> {option.descripcion} </span>)\r\n          }\r\n\r\n          }\r\n          renderInput={(params) => (\r\n            <>\r\n              <TextField {...params} variant=\"outlined\" label=\"Tipo\" placeholder=\"Tipo\" />\r\n            </>\r\n\r\n          )}\r\n        />\r\n      </Box>\r\n      <IconOpenModal handleOpenModalTipo={props.handleOpenModalTipo} />\r\n    </Box >\r\n  )\r\n}\r\n\r\nexport default Etiqueta_Tipo","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\CardPaper\\Etiiqueta_Tipo\\Modal_Etiqueta_Tipo.jsx",["560","561"],"import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport { TextField, Box,Button, Typography } from '@material-ui/core';\r\nimport { Icon } from '@iconify/react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Swal from 'sweetalert2';\r\nimport { crearTagTipoDb } from '../../../firebase/firebase_db/TagTipo';\r\nimport LoadingButton from '../../Util/LoadingButton';\r\n\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    descripcion: Yup.string()\r\n      .required('Campo obligatorio')\r\n      .max(255, 'Máximo 255 caracteres permitidos'),\r\n    icono: Yup.string()\r\n      .required('Campo obligatorio'),\r\n  });\r\n  \r\nconst useStyles = makeStyles((theme) => ({\r\n    modal:{\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',  \r\n    },\r\n    paper: {\r\n        position: 'absolute',\r\n        width: 400,\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '1px solid #bdbdbd',\r\n        borderRadius:\"22px\",\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n    marginSpan:{\r\n        margin:\"20px\",\r\n        width:\"120px\"\r\n    },\r\n    marginButton:{\r\n        margin:\"20px 20px 20px 0px\"\r\n    },\r\n    colorVerIcono:{\r\n        color:\"#1e88e5\",\r\n        cursor:\"pointer\",\r\n        margin:\"5px\"\r\n    },\r\n    padding:{\r\n        padding:\"5px 0px\"\r\n    }\r\n  \r\n}));\r\n\r\nconst Modal_Etiqueta_Tipo = (props) => {\r\n    const classes = useStyles();\r\n    const open = useState(props.openModalTipo);\r\n    const [cargando,setCargando]=useState(false)\r\n  \r\n    const handleClose = () => {\r\n      props.handleCloseOpenModalTipo()\r\n    };\r\n  \r\n    const formik = useFormik({\r\n      initialValues: {\r\n        descripcion: '',\r\n        icono: '',\r\n      },\r\n      validationSchema,\r\n      onSubmit: (values) => {\r\n        // Handle form submission here\r\n        console.log('Form values:', values);\r\n        guardarTipoTag(values);\r\n      },\r\n    });\r\n\r\n    const guardarTipoTag = async (TagTipo) => {\r\n      try {\r\n        // cargando \r\n        setCargando(true)\r\n        const response = await crearTagTipoDb(TagTipo);\r\n        if (response.status === 1) {\r\n          setCargando(false);\r\n          handleClose()\r\n          // Éxito: El tipo de etiqueta se guardó con éxito\r\n          Swal.fire({\r\n            icon: \"success\",\r\n            title: \"Éxito\",\r\n            text: response.message,\r\n          });\r\n        } else {\r\n          setCargando(false);\r\n          handleClose()\r\n          // Error al guardar el tipo de etiqueta\r\n          Swal.fire({\r\n            icon: \"error\",\r\n            title: \"Error\",\r\n            text: response.message,\r\n          });\r\n        }\r\n      } catch (error) {\r\n        setCargando(false);\r\n        handleClose()\r\n        // Error en la función\r\n        Swal.fire({\r\n          icon: \"error\",\r\n          title: \"Error\",\r\n          text: \"Ocurrió un error al procesar la solicitud.\",\r\n        });\r\n      }\r\n    };\r\n    \r\n  \r\n    return (\r\n      <Modal\r\n        open={props.openModalTipo}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"simple-modal-title\"\r\n        aria-describedby=\"simple-modal-description\"\r\n        className={classes.modal}\r\n      >\r\n        <div className={classes.paper}>\r\n          <h2 id=\"simple-modal-title\">Tipo de Informacion</h2>\r\n          <form onSubmit={formik.handleSubmit}>\r\n            <Box display=\"flex\" flexDirection=\"column\">\r\n              <Box display=\"flex\">\r\n                <span className={classes.marginSpan}>Descripcion</span>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Ingrese el tipo de información\"\r\n                  placeholder=\"Ej: Base de Datos\"\r\n                  name=\"descripcion\"\r\n                  value={formik.values.descripcion}\r\n                  onChange={formik.handleChange}\r\n                  error={formik.touched.descripcion && Boolean(formik.errors.descripcion)}\r\n                  helperText={formik.touched.descripcion && formik.errors.descripcion}\r\n                />\r\n              </Box>\r\n              <Box display=\"flex\" flexDirection=\"column\">\r\n                <Box display=\"flex\" flexDirection=\"row\">\r\n                  <span className={classes.marginSpan}>Icono</span>\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"Ingrese icono\"\r\n                    placeholder=\"Ej: material-symbols:database\"\r\n                    name=\"icono\"\r\n                    value={formik.values.icono}\r\n                    onChange={formik.handleChange}\r\n                    error={formik.touched.icono && Boolean(formik.errors.icono)}\r\n                    helperText={formik.touched.icono && formik.errors.icono}\r\n                  />\r\n                </Box>\r\n  \r\n                <a className={classes.colorVerIcono} href=\"https://icon-sets.iconify.design/\" target=\"_blank\">\r\n                  <Typography align=\"right\">\r\n                    <Icon icon=\"octicon:question-16\" />\r\n                    <span className={classes.padding}> Ver iconos</span>\r\n                  </Typography>\r\n                </a>\r\n              </Box>\r\n              <Box display=\"flex\" justifyContent=\"flex-end\">\r\n                <Button\r\n                  className={classes.marginButton}\r\n                  variant=\"contained\"\r\n                  color=\"secondary\"\r\n                  onClick={handleClose}\r\n                >\r\n                  Cancelar\r\n                </Button>\r\n                <LoadingButton \r\n                  isLoading={cargando}\r\n                  className={classes.marginButton}\r\n                  submit={true}\r\n                  ></LoadingButton>\r\n              </Box>\r\n            </Box>\r\n          </form>\r\n        </div>\r\n      </Modal>\r\n    );\r\n  };\r\n  \r\nexport default Modal_Etiqueta_Tipo;\r\n","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\firebase\\firebase_db\\TagTipo.jsx",[],"C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\CardPaper\\Etiiqueta_Tipo\\IconOpenModal.jsx",["562"],"import React from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport { IconButton } from '@material-ui/core'\r\nimport { AddCircleOutlineOutlined } from '@material-ui/icons'\r\nconst IconOpenModal = (props) => {\r\n    return (\r\n        <IconButton id=\"addCircle\" color=\"primary\"\r\n            style={{ width: \"84px\" }}\r\n            onClick={()=>{\r\n                props.handleOpenModalTipo()\r\n            }}\r\n          >\r\n            {/* <PostAddIcon /> */}\r\n            {/* <LabelIcon></LabelIcon> */}\r\n            <AddCircleOutlineOutlined   ></AddCircleOutlineOutlined >\r\n        </IconButton>\r\n    )\r\n}\r\n\r\nexport default IconOpenModal","C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Componetes\\Util\\LoadingButton.jsx",[],"C:\\Users\\fmich\\Documents\\Developer\\crispaper\\src\\Paginas\\AdmTipos.jsx",[],{"ruleId":"563","replacedBy":"564"},{"ruleId":"565","replacedBy":"566"},{"ruleId":"567","severity":1,"message":"568","line":1,"column":36,"nodeType":"569","messageId":"570","endLine":1,"endColumn":45},{"ruleId":"567","severity":1,"message":"571","line":7,"column":24,"nodeType":"569","messageId":"570","endLine":7,"endColumn":39},{"ruleId":"567","severity":1,"message":"572","line":54,"column":9,"nodeType":"569","messageId":"570","endLine":54,"endColumn":16},{"ruleId":"567","severity":1,"message":"573","line":57,"column":8,"nodeType":"569","messageId":"570","endLine":57,"endColumn":13},{"ruleId":"567","severity":1,"message":"574","line":57,"column":15,"nodeType":"569","messageId":"570","endLine":57,"endColumn":23},{"ruleId":"567","severity":1,"message":"575","line":58,"column":7,"nodeType":"569","messageId":"570","endLine":58,"endColumn":14},{"ruleId":"567","severity":1,"message":"576","line":3,"column":10,"nodeType":"569","messageId":"570","endLine":3,"endColumn":22},{"ruleId":"567","severity":1,"message":"577","line":4,"column":11,"nodeType":"569","messageId":"570","endLine":4,"endColumn":23},{"ruleId":"567","severity":1,"message":"578","line":4,"column":25,"nodeType":"569","messageId":"570","endLine":4,"endColumn":40},{"ruleId":"567","severity":1,"message":"579","line":6,"column":10,"nodeType":"569","messageId":"570","endLine":6,"endColumn":21},{"ruleId":"580","severity":1,"message":"581","line":55,"column":16,"nodeType":"582","endLine":77,"endColumn":7},{"ruleId":"567","severity":1,"message":"583","line":13,"column":12,"nodeType":"569","messageId":"570","endLine":13,"endColumn":22},{"ruleId":"584","severity":1,"message":"585","line":118,"column":25,"nodeType":"586","messageId":"587","endLine":118,"endColumn":27},{"ruleId":"584","severity":1,"message":"585","line":125,"column":25,"nodeType":"586","messageId":"587","endLine":125,"endColumn":27},{"ruleId":"584","severity":1,"message":"585","line":136,"column":27,"nodeType":"586","messageId":"587","endLine":136,"endColumn":29},{"ruleId":"584","severity":1,"message":"585","line":140,"column":28,"nodeType":"586","messageId":"587","endLine":140,"endColumn":30},{"ruleId":"584","severity":1,"message":"588","line":146,"column":36,"nodeType":"586","messageId":"587","endLine":146,"endColumn":38},{"ruleId":"567","severity":1,"message":"589","line":4,"column":8,"nodeType":"569","messageId":"570","endLine":4,"endColumn":13},{"ruleId":"567","severity":1,"message":"590","line":5,"column":8,"nodeType":"569","messageId":"570","endLine":5,"endColumn":21},{"ruleId":"591","severity":1,"message":"592","line":75,"column":5,"nodeType":"593","messageId":"587","endLine":75,"endColumn":16},{"ruleId":"567","severity":1,"message":"594","line":117,"column":8,"nodeType":"569","messageId":"570","endLine":117,"endColumn":20},{"ruleId":"567","severity":1,"message":"595","line":118,"column":8,"nodeType":"569","messageId":"570","endLine":118,"endColumn":17},{"ruleId":"567","severity":1,"message":"596","line":120,"column":8,"nodeType":"569","messageId":"570","endLine":120,"endColumn":13},{"ruleId":"567","severity":1,"message":"597","line":120,"column":15,"nodeType":"569","messageId":"570","endLine":120,"endColumn":23},{"ruleId":"584","severity":1,"message":"585","line":124,"column":28,"nodeType":"586","messageId":"587","endLine":124,"endColumn":30},{"ruleId":"584","severity":1,"message":"585","line":156,"column":20,"nodeType":"586","messageId":"587","endLine":156,"endColumn":22},{"ruleId":"584","severity":1,"message":"585","line":164,"column":23,"nodeType":"586","messageId":"587","endLine":164,"endColumn":25},{"ruleId":"584","severity":1,"message":"588","line":190,"column":24,"nodeType":"586","messageId":"587","endLine":190,"endColumn":26},{"ruleId":"584","severity":1,"message":"588","line":204,"column":24,"nodeType":"586","messageId":"587","endLine":204,"endColumn":26},{"ruleId":"584","severity":1,"message":"585","line":240,"column":26,"nodeType":"586","messageId":"587","endLine":240,"endColumn":28},{"ruleId":"584","severity":1,"message":"585","line":245,"column":27,"nodeType":"586","messageId":"587","endLine":245,"endColumn":29},{"ruleId":"584","severity":1,"message":"585","line":250,"column":38,"nodeType":"586","messageId":"587","endLine":250,"endColumn":40},{"ruleId":"584","severity":1,"message":"585","line":253,"column":28,"nodeType":"586","messageId":"587","endLine":253,"endColumn":30},{"ruleId":"567","severity":1,"message":"598","line":435,"column":17,"nodeType":"569","messageId":"570","endLine":435,"endColumn":31},{"ruleId":"599","severity":1,"message":"600","line":437,"column":27,"nodeType":"582","messageId":"601","endLine":437,"endColumn":29},{"ruleId":"567","severity":1,"message":"602","line":500,"column":11,"nodeType":"569","messageId":"570","endLine":500,"endColumn":26},{"ruleId":"584","severity":1,"message":"588","line":511,"column":28,"nodeType":"586","messageId":"587","endLine":511,"endColumn":30},{"ruleId":"584","severity":1,"message":"588","line":548,"column":31,"nodeType":"586","messageId":"587","endLine":548,"endColumn":33},{"ruleId":"599","severity":1,"message":"600","line":672,"column":35,"nodeType":"582","messageId":"601","endLine":672,"endColumn":37},{"ruleId":"599","severity":1,"message":"600","line":673,"column":36,"nodeType":"582","messageId":"601","endLine":673,"endColumn":38},{"ruleId":"584","severity":1,"message":"585","line":676,"column":33,"nodeType":"586","messageId":"587","endLine":676,"endColumn":35},{"ruleId":"599","severity":1,"message":"600","line":737,"column":29,"nodeType":"582","messageId":"601","endLine":737,"endColumn":31},{"ruleId":"599","severity":1,"message":"600","line":744,"column":26,"nodeType":"582","messageId":"601","endLine":744,"endColumn":28},{"ruleId":"580","severity":1,"message":"603","line":975,"column":8,"nodeType":"604","endLine":975,"endColumn":26,"suggestions":"605"},{"ruleId":"606","severity":1,"message":"607","line":1089,"column":41,"nodeType":"608","endLine":1089,"endColumn":108},{"ruleId":"609","severity":1,"message":"610","line":1293,"column":33,"nodeType":"608","messageId":"611","endLine":1295,"endColumn":35},{"ruleId":"609","severity":1,"message":"612","line":1296,"column":33,"nodeType":"608","messageId":"611","endLine":1299,"endColumn":35},{"ruleId":"613","severity":1,"message":"614","line":1430,"column":45,"nodeType":"608","endLine":1430,"endColumn":111},{"ruleId":"615","severity":1,"message":"616","line":1442,"column":37,"nodeType":"608","messageId":"617","endLine":1442,"endColumn":68,"fix":"618"},{"ruleId":"567","severity":1,"message":"589","line":4,"column":8,"nodeType":"569","messageId":"570","endLine":4,"endColumn":13},{"ruleId":"567","severity":1,"message":"590","line":5,"column":8,"nodeType":"569","messageId":"570","endLine":5,"endColumn":21},{"ruleId":"567","severity":1,"message":"619","line":108,"column":8,"nodeType":"569","messageId":"570","endLine":108,"endColumn":15},{"ruleId":"567","severity":1,"message":"620","line":108,"column":17,"nodeType":"569","messageId":"570","endLine":108,"endColumn":27},{"ruleId":"567","severity":1,"message":"595","line":111,"column":8,"nodeType":"569","messageId":"570","endLine":111,"endColumn":17},{"ruleId":"567","severity":1,"message":"621","line":112,"column":8,"nodeType":"569","messageId":"570","endLine":112,"endColumn":16},{"ruleId":"567","severity":1,"message":"596","line":113,"column":8,"nodeType":"569","messageId":"570","endLine":113,"endColumn":13},{"ruleId":"567","severity":1,"message":"597","line":113,"column":15,"nodeType":"569","messageId":"570","endLine":113,"endColumn":23},{"ruleId":"567","severity":1,"message":"622","line":2,"column":22,"nodeType":"569","messageId":"570","endLine":2,"endColumn":26},{"ruleId":"567","severity":1,"message":"623","line":5,"column":18,"nodeType":"569","messageId":"570","endLine":5,"endColumn":22},{"ruleId":"567","severity":1,"message":"624","line":5,"column":24,"nodeType":"569","messageId":"570","endLine":5,"endColumn":28},{"ruleId":"567","severity":1,"message":"625","line":328,"column":9,"nodeType":"569","messageId":"570","endLine":328,"endColumn":18},{"ruleId":"567","severity":1,"message":"626","line":330,"column":15,"nodeType":"569","messageId":"570","endLine":330,"endColumn":21},{"ruleId":"567","severity":1,"message":"627","line":350,"column":9,"nodeType":"569","messageId":"570","endLine":350,"endColumn":29},{"ruleId":"628","severity":1,"message":"629","line":430,"column":11,"nodeType":"569","messageId":"630","endLine":430,"endColumn":27},{"ruleId":"628","severity":1,"message":"629","line":444,"column":11,"nodeType":"569","messageId":"630","endLine":444,"endColumn":27},{"ruleId":"567","severity":1,"message":"631","line":465,"column":13,"nodeType":"569","messageId":"570","endLine":465,"endColumn":19},{"ruleId":"632","severity":1,"message":"633","line":465,"column":59,"nodeType":"634","messageId":"635","endLine":465,"endColumn":60,"fix":"636"},{"ruleId":"584","severity":1,"message":"585","line":488,"column":22,"nodeType":"586","messageId":"587","endLine":488,"endColumn":24},{"ruleId":"584","severity":1,"message":"585","line":566,"column":35,"nodeType":"586","messageId":"587","endLine":566,"endColumn":37},{"ruleId":"584","severity":1,"message":"585","line":580,"column":37,"nodeType":"586","messageId":"587","endLine":580,"endColumn":39},{"ruleId":"584","severity":1,"message":"585","line":580,"column":87,"nodeType":"586","messageId":"587","endLine":580,"endColumn":89},{"ruleId":"580","severity":1,"message":"637","line":593,"column":6,"nodeType":"604","endLine":593,"endColumn":47,"suggestions":"638"},{"ruleId":"639","severity":1,"message":"640","line":932,"column":25,"nodeType":"641","messageId":"642","endLine":932,"endColumn":44},{"ruleId":"639","severity":1,"message":"640","line":933,"column":25,"nodeType":"641","messageId":"642","endLine":933,"endColumn":40},{"ruleId":"639","severity":1,"message":"640","line":1039,"column":11,"nodeType":"641","messageId":"642","endLine":1039,"endColumn":22},{"ruleId":"643","severity":1,"message":"644","line":1227,"column":19,"nodeType":"645","messageId":"646","endLine":1231,"endColumn":20},{"ruleId":"639","severity":1,"message":"640","line":1256,"column":25,"nodeType":"641","messageId":"642","endLine":1256,"endColumn":44},{"ruleId":"639","severity":1,"message":"640","line":1257,"column":25,"nodeType":"641","messageId":"642","endLine":1257,"endColumn":40},{"ruleId":"567","severity":1,"message":"647","line":2,"column":53,"nodeType":"569","messageId":"570","endLine":2,"endColumn":69},{"ruleId":"567","severity":1,"message":"648","line":2,"column":93,"nodeType":"569","messageId":"570","endLine":2,"endColumn":97},{"ruleId":"567","severity":1,"message":"649","line":4,"column":8,"nodeType":"569","messageId":"570","endLine":4,"endColumn":13},{"ruleId":"567","severity":1,"message":"650","line":5,"column":8,"nodeType":"569","messageId":"570","endLine":5,"endColumn":27},{"ruleId":"567","severity":1,"message":"651","line":18,"column":8,"nodeType":"569","messageId":"570","endLine":18,"endColumn":22},{"ruleId":"567","severity":1,"message":"652","line":19,"column":9,"nodeType":"569","messageId":"570","endLine":19,"endColumn":22},{"ruleId":"567","severity":1,"message":"653","line":19,"column":23,"nodeType":"569","messageId":"570","endLine":19,"endColumn":46},{"ruleId":"591","severity":1,"message":"654","line":73,"column":5,"nodeType":"593","messageId":"587","endLine":73,"endColumn":21},{"ruleId":"567","severity":1,"message":"655","line":250,"column":16,"nodeType":"569","messageId":"570","endLine":250,"endColumn":24},{"ruleId":"567","severity":1,"message":"656","line":250,"column":26,"nodeType":"569","messageId":"570","endLine":250,"endColumn":37},{"ruleId":"567","severity":1,"message":"657","line":251,"column":16,"nodeType":"569","messageId":"570","endLine":251,"endColumn":31},{"ruleId":"567","severity":1,"message":"658","line":251,"column":33,"nodeType":"569","messageId":"570","endLine":251,"endColumn":51},{"ruleId":"567","severity":1,"message":"659","line":253,"column":15,"nodeType":"569","messageId":"570","endLine":253,"endColumn":22},{"ruleId":"567","severity":1,"message":"660","line":254,"column":15,"nodeType":"569","messageId":"570","endLine":254,"endColumn":21},{"ruleId":"567","severity":1,"message":"661","line":255,"column":16,"nodeType":"569","messageId":"570","endLine":255,"endColumn":31},{"ruleId":"567","severity":1,"message":"662","line":255,"column":33,"nodeType":"569","messageId":"570","endLine":255,"endColumn":51},{"ruleId":"599","severity":1,"message":"600","line":300,"column":61,"nodeType":"582","messageId":"601","endLine":300,"endColumn":63},{"ruleId":"567","severity":1,"message":"663","line":2,"column":74,"nodeType":"569","messageId":"570","endLine":2,"endColumn":80},{"ruleId":"567","severity":1,"message":"648","line":6,"column":9,"nodeType":"569","messageId":"570","endLine":6,"endColumn":13},{"ruleId":"567","severity":1,"message":"649","line":14,"column":8,"nodeType":"569","messageId":"570","endLine":14,"endColumn":13},{"ruleId":"591","severity":1,"message":"654","line":82,"column":13,"nodeType":"593","messageId":"587","endLine":82,"endColumn":29},{"ruleId":"567","severity":1,"message":"596","line":300,"column":12,"nodeType":"569","messageId":"570","endLine":300,"endColumn":17},{"ruleId":"567","severity":1,"message":"597","line":300,"column":19,"nodeType":"569","messageId":"570","endLine":300,"endColumn":27},{"ruleId":"567","severity":1,"message":"664","line":302,"column":11,"nodeType":"569","messageId":"570","endLine":302,"endColumn":16},{"ruleId":"567","severity":1,"message":"665","line":303,"column":10,"nodeType":"569","messageId":"570","endLine":303,"endColumn":23},{"ruleId":"567","severity":1,"message":"666","line":303,"column":24,"nodeType":"569","messageId":"570","endLine":303,"endColumn":40},{"ruleId":"591","severity":1,"message":"654","line":65,"column":5,"nodeType":"593","messageId":"587","endLine":65,"endColumn":21},{"ruleId":"567","severity":1,"message":"667","line":190,"column":15,"nodeType":"569","messageId":"570","endLine":190,"endColumn":23},{"ruleId":"567","severity":1,"message":"596","line":191,"column":8,"nodeType":"569","messageId":"570","endLine":191,"endColumn":13},{"ruleId":"567","severity":1,"message":"668","line":3,"column":8,"nodeType":"569","messageId":"570","endLine":3,"endColumn":14},{"ruleId":"567","severity":1,"message":"669","line":5,"column":8,"nodeType":"569","messageId":"570","endLine":5,"endColumn":16},{"ruleId":"567","severity":1,"message":"670","line":6,"column":8,"nodeType":"569","messageId":"570","endLine":6,"endColumn":16},{"ruleId":"567","severity":1,"message":"671","line":21,"column":9,"nodeType":"569","messageId":"570","endLine":21,"endColumn":14},{"ruleId":"567","severity":1,"message":"672","line":26,"column":9,"nodeType":"569","messageId":"570","endLine":26,"endColumn":21},{"ruleId":"563","replacedBy":"673"},{"ruleId":"565","replacedBy":"674"},{"ruleId":"567","severity":1,"message":"675","line":9,"column":8,"nodeType":"569","messageId":"570","endLine":9,"endColumn":19},{"ruleId":"567","severity":1,"message":"676","line":10,"column":8,"nodeType":"569","messageId":"570","endLine":10,"endColumn":17},{"ruleId":"567","severity":1,"message":"677","line":40,"column":9,"nodeType":"569","messageId":"570","endLine":40,"endColumn":24},{"ruleId":"567","severity":1,"message":"678","line":42,"column":9,"nodeType":"569","messageId":"570","endLine":42,"endColumn":16},{"ruleId":"567","severity":1,"message":"679","line":42,"column":17,"nodeType":"569","messageId":"570","endLine":42,"endColumn":27},{"ruleId":"567","severity":1,"message":"680","line":43,"column":9,"nodeType":"569","messageId":"570","endLine":43,"endColumn":16},{"ruleId":"567","severity":1,"message":"681","line":43,"column":17,"nodeType":"569","messageId":"570","endLine":43,"endColumn":27},{"ruleId":"567","severity":1,"message":"682","line":2,"column":63,"nodeType":"569","messageId":"570","endLine":2,"endColumn":69},{"ruleId":"567","severity":1,"message":"651","line":5,"column":8,"nodeType":"569","messageId":"570","endLine":5,"endColumn":22},{"ruleId":"567","severity":1,"message":"664","line":71,"column":8,"nodeType":"569","messageId":"570","endLine":71,"endColumn":13},{"ruleId":"567","severity":1,"message":"682","line":2,"column":26,"nodeType":"569","messageId":"570","endLine":2,"endColumn":32},{"ruleId":"567","severity":1,"message":"668","line":2,"column":33,"nodeType":"569","messageId":"570","endLine":2,"endColumn":39},{"ruleId":"567","severity":1,"message":"589","line":2,"column":69,"nodeType":"569","messageId":"570","endLine":2,"endColumn":74},{"ruleId":"567","severity":1,"message":"683","line":4,"column":8,"nodeType":"569","messageId":"570","endLine":4,"endColumn":26},{"ruleId":"567","severity":1,"message":"651","line":5,"column":8,"nodeType":"569","messageId":"570","endLine":5,"endColumn":22},{"ruleId":"567","severity":1,"message":"684","line":61,"column":12,"nodeType":"569","messageId":"570","endLine":61,"endColumn":32},{"ruleId":"567","severity":1,"message":"664","line":68,"column":12,"nodeType":"569","messageId":"570","endLine":68,"endColumn":17},{"ruleId":"580","severity":1,"message":"581","line":71,"column":15,"nodeType":"582","endLine":77,"endColumn":6},{"ruleId":"580","severity":1,"message":"685","line":77,"column":8,"nodeType":"604","endLine":77,"endColumn":10,"suggestions":"686"},{"ruleId":"584","severity":1,"message":"585","line":95,"column":26,"nodeType":"586","messageId":"587","endLine":95,"endColumn":28},{"ruleId":"567","severity":1,"message":"682","line":2,"column":26,"nodeType":"569","messageId":"570","endLine":2,"endColumn":32},{"ruleId":"567","severity":1,"message":"668","line":2,"column":33,"nodeType":"569","messageId":"570","endLine":2,"endColumn":39},{"ruleId":"567","severity":1,"message":"589","line":2,"column":69,"nodeType":"569","messageId":"570","endLine":2,"endColumn":74},{"ruleId":"567","severity":1,"message":"683","line":4,"column":8,"nodeType":"569","messageId":"570","endLine":4,"endColumn":26},{"ruleId":"567","severity":1,"message":"651","line":5,"column":8,"nodeType":"569","messageId":"570","endLine":5,"endColumn":22},{"ruleId":"567","severity":1,"message":"684","line":61,"column":12,"nodeType":"569","messageId":"570","endLine":61,"endColumn":32},{"ruleId":"567","severity":1,"message":"664","line":68,"column":12,"nodeType":"569","messageId":"570","endLine":68,"endColumn":17},{"ruleId":"580","severity":1,"message":"581","line":71,"column":15,"nodeType":"582","endLine":77,"endColumn":6},{"ruleId":"580","severity":1,"message":"685","line":77,"column":8,"nodeType":"604","endLine":77,"endColumn":10,"suggestions":"687"},{"ruleId":"584","severity":1,"message":"585","line":95,"column":26,"nodeType":"586","messageId":"587","endLine":95,"endColumn":28},{"ruleId":"567","severity":1,"message":"688","line":77,"column":11,"nodeType":"569","messageId":"570","endLine":77,"endColumn":30},{"ruleId":"567","severity":1,"message":"689","line":4,"column":8,"nodeType":"569","messageId":"570","endLine":4,"endColumn":14},{"ruleId":"690","severity":1,"message":"691","line":9,"column":1,"nodeType":"692","endLine":279,"endColumn":22},{"ruleId":"567","severity":1,"message":"693","line":72,"column":13,"nodeType":"569","messageId":"570","endLine":72,"endColumn":22},{"ruleId":"567","severity":1,"message":"694","line":74,"column":15,"nodeType":"569","messageId":"570","endLine":74,"endColumn":25},{"ruleId":"567","severity":1,"message":"693","line":81,"column":13,"nodeType":"569","messageId":"570","endLine":81,"endColumn":22},{"ruleId":"567","severity":1,"message":"694","line":84,"column":15,"nodeType":"569","messageId":"570","endLine":84,"endColumn":25},{"ruleId":"567","severity":1,"message":"663","line":2,"column":74,"nodeType":"569","messageId":"570","endLine":2,"endColumn":80},{"ruleId":"567","severity":1,"message":"650","line":10,"column":8,"nodeType":"569","messageId":"570","endLine":10,"endColumn":27},{"ruleId":"567","severity":1,"message":"695","line":20,"column":8,"nodeType":"569","messageId":"570","endLine":20,"endColumn":13},{"ruleId":"591","severity":1,"message":"654","line":51,"column":13,"nodeType":"593","messageId":"587","endLine":51,"endColumn":29},{"ruleId":"567","severity":1,"message":"596","line":282,"column":12,"nodeType":"569","messageId":"570","endLine":282,"endColumn":17},{"ruleId":"567","severity":1,"message":"597","line":282,"column":19,"nodeType":"569","messageId":"570","endLine":282,"endColumn":27},{"ruleId":"584","severity":1,"message":"588","line":301,"column":46,"nodeType":"586","messageId":"587","endLine":301,"endColumn":48},{"ruleId":"567","severity":1,"message":"647","line":2,"column":46,"nodeType":"569","messageId":"570","endLine":2,"endColumn":62},{"ruleId":"584","severity":1,"message":"588","line":55,"column":57,"nodeType":"586","messageId":"587","endLine":55,"endColumn":59},{"ruleId":"584","severity":1,"message":"585","line":63,"column":49,"nodeType":"586","messageId":"587","endLine":63,"endColumn":51},{"ruleId":"615","severity":1,"message":"616","line":72,"column":37,"nodeType":"608","messageId":"617","endLine":72,"endColumn":82,"fix":"696"},{"ruleId":"567","severity":1,"message":"697","line":1,"column":16,"nodeType":"569","messageId":"570","endLine":1,"endColumn":24},{"ruleId":"567","severity":1,"message":"568","line":1,"column":25,"nodeType":"569","messageId":"570","endLine":1,"endColumn":34},{"ruleId":"567","severity":1,"message":"576","line":2,"column":10,"nodeType":"569","messageId":"570","endLine":2,"endColumn":22},{"ruleId":"567","severity":1,"message":"698","line":4,"column":8,"nodeType":"569","messageId":"570","endLine":4,"endColumn":19},{"ruleId":"567","severity":1,"message":"699","line":5,"column":8,"nodeType":"569","messageId":"570","endLine":5,"endColumn":19},{"ruleId":"567","severity":1,"message":"700","line":24,"column":9,"nodeType":"569","messageId":"570","endLine":24,"endColumn":15},{"ruleId":"580","severity":1,"message":"581","line":34,"column":15,"nodeType":"582","endLine":45,"endColumn":6},{"ruleId":"584","severity":1,"message":"588","line":39,"column":24,"nodeType":"586","messageId":"587","endLine":39,"endColumn":26},{"ruleId":"580","severity":1,"message":"701","line":45,"column":8,"nodeType":"604","endLine":45,"endColumn":10,"suggestions":"702"},{"ruleId":"584","severity":1,"message":"585","line":65,"column":57,"nodeType":"586","messageId":"587","endLine":65,"endColumn":59},{"ruleId":"567","severity":1,"message":"703","line":2,"column":20,"nodeType":"569","messageId":"570","endLine":2,"endColumn":29},{"ruleId":"580","severity":1,"message":"581","line":95,"column":11,"nodeType":"582","endLine":131,"endColumn":2},{"ruleId":"567","severity":1,"message":"704","line":2,"column":48,"nodeType":"569","messageId":"570","endLine":2,"endColumn":58},{"ruleId":"567","severity":1,"message":"663","line":2,"column":78,"nodeType":"569","messageId":"570","endLine":2,"endColumn":84},{"ruleId":"567","severity":1,"message":"589","line":3,"column":8,"nodeType":"569","messageId":"570","endLine":3,"endColumn":13},{"ruleId":"567","severity":1,"message":"689","line":5,"column":8,"nodeType":"569","messageId":"570","endLine":5,"endColumn":14},{"ruleId":"567","severity":1,"message":"705","line":7,"column":10,"nodeType":"569","messageId":"570","endLine":7,"endColumn":14},{"ruleId":"567","severity":1,"message":"706","line":9,"column":8,"nodeType":"569","messageId":"570","endLine":9,"endColumn":16},{"ruleId":"567","severity":1,"message":"707","line":10,"column":8,"nodeType":"569","messageId":"570","endLine":10,"endColumn":16},{"ruleId":"567","severity":1,"message":"649","line":11,"column":8,"nodeType":"569","messageId":"570","endLine":11,"endColumn":13},{"ruleId":"567","severity":1,"message":"708","line":12,"column":8,"nodeType":"569","messageId":"570","endLine":12,"endColumn":21},{"ruleId":"567","severity":1,"message":"709","line":17,"column":8,"nodeType":"569","messageId":"570","endLine":17,"endColumn":20},{"ruleId":"567","severity":1,"message":"710","line":18,"column":8,"nodeType":"569","messageId":"570","endLine":18,"endColumn":15},{"ruleId":"567","severity":1,"message":"711","line":19,"column":8,"nodeType":"569","messageId":"570","endLine":19,"endColumn":17},{"ruleId":"567","severity":1,"message":"712","line":21,"column":8,"nodeType":"569","messageId":"570","endLine":21,"endColumn":14},{"ruleId":"591","severity":1,"message":"654","line":78,"column":17,"nodeType":"593","messageId":"587","endLine":78,"endColumn":33},{"ruleId":"567","severity":1,"message":"596","line":296,"column":16,"nodeType":"569","messageId":"570","endLine":296,"endColumn":21},{"ruleId":"567","severity":1,"message":"597","line":296,"column":23,"nodeType":"569","messageId":"570","endLine":296,"endColumn":31},{"ruleId":"567","severity":1,"message":"664","line":298,"column":16,"nodeType":"569","messageId":"570","endLine":298,"endColumn":21},{"ruleId":"567","severity":1,"message":"666","line":299,"column":31,"nodeType":"569","messageId":"570","endLine":299,"endColumn":47},{"ruleId":"567","severity":1,"message":"704","line":2,"column":48,"nodeType":"569","messageId":"570","endLine":2,"endColumn":58},{"ruleId":"567","severity":1,"message":"663","line":2,"column":78,"nodeType":"569","messageId":"570","endLine":2,"endColumn":84},{"ruleId":"567","severity":1,"message":"589","line":3,"column":8,"nodeType":"569","messageId":"570","endLine":3,"endColumn":13},{"ruleId":"567","severity":1,"message":"689","line":5,"column":8,"nodeType":"569","messageId":"570","endLine":5,"endColumn":14},{"ruleId":"567","severity":1,"message":"705","line":7,"column":10,"nodeType":"569","messageId":"570","endLine":7,"endColumn":14},{"ruleId":"567","severity":1,"message":"706","line":9,"column":8,"nodeType":"569","messageId":"570","endLine":9,"endColumn":16},{"ruleId":"567","severity":1,"message":"707","line":10,"column":8,"nodeType":"569","messageId":"570","endLine":10,"endColumn":16},{"ruleId":"567","severity":1,"message":"649","line":11,"column":8,"nodeType":"569","messageId":"570","endLine":11,"endColumn":13},{"ruleId":"567","severity":1,"message":"708","line":12,"column":8,"nodeType":"569","messageId":"570","endLine":12,"endColumn":21},{"ruleId":"567","severity":1,"message":"709","line":17,"column":8,"nodeType":"569","messageId":"570","endLine":17,"endColumn":20},{"ruleId":"567","severity":1,"message":"710","line":18,"column":8,"nodeType":"569","messageId":"570","endLine":18,"endColumn":15},{"ruleId":"567","severity":1,"message":"711","line":19,"column":8,"nodeType":"569","messageId":"570","endLine":19,"endColumn":17},{"ruleId":"567","severity":1,"message":"712","line":21,"column":8,"nodeType":"569","messageId":"570","endLine":21,"endColumn":14},{"ruleId":"591","severity":1,"message":"654","line":78,"column":17,"nodeType":"593","messageId":"587","endLine":78,"endColumn":33},{"ruleId":"567","severity":1,"message":"596","line":299,"column":16,"nodeType":"569","messageId":"570","endLine":299,"endColumn":21},{"ruleId":"567","severity":1,"message":"597","line":299,"column":23,"nodeType":"569","messageId":"570","endLine":299,"endColumn":31},{"ruleId":"567","severity":1,"message":"664","line":301,"column":16,"nodeType":"569","messageId":"570","endLine":301,"endColumn":21},{"ruleId":"567","severity":1,"message":"665","line":302,"column":16,"nodeType":"569","messageId":"570","endLine":302,"endColumn":29},{"ruleId":"567","severity":1,"message":"666","line":302,"column":31,"nodeType":"569","messageId":"570","endLine":302,"endColumn":47},{"ruleId":"567","severity":1,"message":"713","line":40,"column":9,"nodeType":"569","messageId":"570","endLine":40,"endColumn":13},{"ruleId":"567","severity":1,"message":"714","line":27,"column":19,"nodeType":"569","messageId":"570","endLine":27,"endColumn":24},{"ruleId":"580","severity":1,"message":"715","line":22,"column":8,"nodeType":"604","endLine":22,"endColumn":10,"suggestions":"716"},{"ruleId":"567","severity":1,"message":"568","line":1,"column":15,"nodeType":"569","messageId":"570","endLine":1,"endColumn":24},{"ruleId":"567","severity":1,"message":"697","line":1,"column":25,"nodeType":"569","messageId":"570","endLine":1,"endColumn":33},{"ruleId":"567","severity":1,"message":"697","line":1,"column":25,"nodeType":"569","messageId":"570","endLine":1,"endColumn":33},{"ruleId":"567","severity":1,"message":"624","line":2,"column":30,"nodeType":"569","messageId":"570","endLine":2,"endColumn":34},{"ruleId":"567","severity":1,"message":"623","line":2,"column":42,"nodeType":"569","messageId":"570","endLine":2,"endColumn":46},{"ruleId":"567","severity":1,"message":"717","line":3,"column":8,"nodeType":"569","messageId":"570","endLine":3,"endColumn":16},{"ruleId":"567","severity":1,"message":"718","line":1,"column":8,"nodeType":"569","messageId":"570","endLine":1,"endColumn":13},{"ruleId":"567","severity":1,"message":"682","line":3,"column":8,"nodeType":"569","messageId":"570","endLine":3,"endColumn":14},{"ruleId":"567","severity":1,"message":"719","line":8,"column":8,"nodeType":"569","messageId":"570","endLine":8,"endColumn":17},{"ruleId":"606","severity":1,"message":"607","line":18,"column":25,"nodeType":"608","endLine":18,"endColumn":96},{"ruleId":"580","severity":1,"message":"581","line":16,"column":11,"nodeType":"582","endLine":23,"endColumn":2},{"ruleId":"567","severity":1,"message":"720","line":9,"column":61,"nodeType":"569","messageId":"570","endLine":9,"endColumn":78},{"ruleId":"567","severity":1,"message":"721","line":13,"column":8,"nodeType":"569","messageId":"570","endLine":13,"endColumn":16},{"ruleId":"584","severity":1,"message":"588","line":21,"column":21,"nodeType":"586","messageId":"587","endLine":21,"endColumn":23},{"ruleId":"722","severity":1,"message":"723","line":32,"column":9,"nodeType":"724","messageId":"725","endLine":53,"endColumn":10},{"ruleId":"567","severity":1,"message":"726","line":2,"column":20,"nodeType":"569","messageId":"570","endLine":2,"endColumn":30},{"ruleId":"567","severity":1,"message":"708","line":3,"column":8,"nodeType":"569","messageId":"570","endLine":3,"endColumn":21},{"ruleId":"567","severity":1,"message":"727","line":7,"column":8,"nodeType":"569","messageId":"570","endLine":7,"endColumn":22},{"ruleId":"567","severity":1,"message":"728","line":15,"column":12,"nodeType":"569","messageId":"570","endLine":15,"endColumn":15},{"ruleId":"567","severity":1,"message":"626","line":15,"column":17,"nodeType":"569","messageId":"570","endLine":15,"endColumn":23},{"ruleId":"580","severity":1,"message":"581","line":19,"column":11,"nodeType":"582","endLine":62,"endColumn":2},{"ruleId":"567","severity":1,"message":"631","line":31,"column":11,"nodeType":"569","messageId":"570","endLine":31,"endColumn":17},{"ruleId":"615","severity":1,"message":"616","line":43,"column":24,"nodeType":"608","messageId":"617","endLine":43,"endColumn":54,"fix":"729"},{"ruleId":"567","severity":1,"message":"730","line":4,"column":8,"nodeType":"569","messageId":"570","endLine":4,"endColumn":13},{"ruleId":"567","severity":1,"message":"731","line":17,"column":7,"nodeType":"569","messageId":"570","endLine":17,"endColumn":22},{"ruleId":"567","severity":1,"message":"647","line":3,"column":55,"nodeType":"569","messageId":"570","endLine":3,"endColumn":71},{"ruleId":"567","severity":1,"message":"663","line":3,"column":73,"nodeType":"569","messageId":"570","endLine":3,"endColumn":79},{"ruleId":"584","severity":1,"message":"585","line":40,"column":49,"nodeType":"586","messageId":"587","endLine":40,"endColumn":51},{"ruleId":"615","severity":1,"message":"616","line":98,"column":29,"nodeType":"608","messageId":"617","endLine":102,"endColumn":30,"fix":"732"},{"ruleId":"591","severity":1,"message":"654","line":35,"column":5,"nodeType":"593","messageId":"587","endLine":35,"endColumn":21},{"ruleId":"567","severity":1,"message":"733","line":23,"column":9,"nodeType":"569","messageId":"570","endLine":23,"endColumn":16},{"ruleId":"567","severity":1,"message":"734","line":56,"column":11,"nodeType":"569","messageId":"570","endLine":56,"endColumn":15},{"ruleId":"615","severity":1,"message":"616","line":153,"column":17,"nodeType":"608","messageId":"617","endLine":153,"endColumn":111,"fix":"735"},{"ruleId":"567","severity":1,"message":"736","line":2,"column":8,"nodeType":"569","messageId":"570","endLine":2,"endColumn":12},"no-native-reassign",["737"],"no-negated-in-lhs",["738"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'UsuarioProvider' is defined but never used.","'history' is assigned a value but never used.","'match' is assigned a value but never used.","'setmatch' is assigned a value but never used.","'usuario' is assigned a value but never used.","'convertToRaw' is defined but never used.","'ContentState' is defined but never used.","'convertFromHTML' is defined but never used.","'EditorState' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'papermatch' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'Paper' is defined but never used.","'EtiquetasIcon' is defined but never used.","no-dupe-keys","Duplicate key 'divEtiqueta'.","ObjectExpression","'etiquetarray' is assigned a value but never used.","'etiquetas' is assigned a value but never used.","'paper' is assigned a value but never used.","'setpaper' is assigned a value but never used.","'agregarEtiquet' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","'ActualizarPaper' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'llamarEtiquetas', 'props.history', and 'props.match.params'. Either include them or remove the dependency array.","ArrayExpression",["739"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-pascal-case","Imported JSX component Etiqueta_Tipo must be in PascalCase or SCREAMING_SNAKE_CASE","usePascalOrSnakeCase","Imported JSX component Modal_Etiqueta_Tipo must be in PascalCase or SCREAMING_SNAKE_CASE","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"740","text":"741"},"'elvalor' is assigned a value but never used.","'setelvalor' is assigned a value but never used.","'pedirmas' is assigned a value but never used.","'fade' is defined but never used.","'Icon' is defined but never used.","'Grid' is defined but never used.","'rojoColor' is assigned a value but never used.","'seturl' is assigned a value but never used.","'dejarUnaColaboracion' is assigned a value but never used.","no-redeclare","'trimmedStringdos' is already defined.","redeclared","'prueba' is assigned a value but never used.","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"742","text":"743"},"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["744"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'CircularProgress' is defined but never used.","'Link' is defined but never used.","'Lapiz' is defined but never used.","'InsertDriveFileIcon' is defined but never used.","'ExpandMoreIcon' is defined but never used.","'RetornarPaper' is defined but never used.","'RenovarPaperMapEtiqueta' is defined but never used.","Duplicate key '& .botoneditar'.","'cargando' is assigned a value but never used.","'setcargando' is assigned a value but never used.","'cargandoCorazon' is assigned a value but never used.","'setcargandoCorazon' is assigned a value but never used.","'megusta' is assigned a value but never used.","'tamaño' is assigned a value but never used.","'ultimoDocumento' is assigned a value but never used.","'setultimoDocumento' is assigned a value but never used.","'setRef' is defined but never used.","'vacio' is assigned a value but never used.","'tituloGeneral' is assigned a value but never used.","'setTituloGeneral' is assigned a value but never used.","'setvalor' is assigned a value but never used.","'Avatar' is defined but never used.","'FaceIcon' is defined but never used.","'DoneIcon' is defined but never used.","'lista' is assigned a value but never used.","'handleDelete' is assigned a value but never used.",["737"],["738"],"'PostAddIcon' is defined but never used.","'LabelIcon' is defined but never used.","'removerEtiqueta' is assigned a value but never used.","'prueba2' is assigned a value but never used.","'setprueba2' is assigned a value but never used.","'prueba1' is assigned a value but never used.","'setprueba1' is assigned a value but never used.","'Button' is defined but never used.","'FuncionesGenerales' is defined but never used.","'comentariosMostrados' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'pedirComentarios'. Either include it or remove the dependency array.",["745"],["746"],"'onEditorStateChange' is assigned a value but never used.","'moment' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'pruebados' is assigned a value but never used.","'pruebaTres' is assigned a value but never used.","'Alert' is defined but never used.",{"range":"747","text":"741"},"'useState' is defined but never used.","'draftToHtml' is defined but never used.","'htmlToDraft' is defined but never used.","'clases' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.match.params'. Either include it or remove the dependency array.",["748"],"'TextField' is defined but never used.","'IconButton' is defined but never used.","'Chip' is defined but never used.","'SaveIcon' is defined but never used.","'Basurero' is defined but never used.","'AddAPhotoIcon' is defined but never used.","'CorazonLleno' is defined but never used.","'Corazon' is defined but never used.","'BotonMenu' is defined but never used.","'Titulo' is defined but never used.","'test' is assigned a value but never used.","'query' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.informacion'. Either include it or remove the dependency array. If 'setinfo' needs the current value of 'props.informacion', you can also switch to useReducer instead of useState and read 'props.informacion' in the reducer.",["749"],"'SendIcon' is defined but never used.","'React' is defined but never used.","'InboxIcon' is defined but never used.","'DialogContentText' is defined but never used.","'Cargando' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'makeStyles' is defined but never used.","'HelmetMetaData' is defined but never used.","'url' is assigned a value but never used.",{"range":"750","text":"741"},"'Icono' is defined but never used.","'descargarimagen' is assigned a value but never used.",{"range":"751","text":"741"},"'classes' is assigned a value but never used.","'open' is assigned a value but never used.",{"range":"752","text":"741"},"'Swal' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"753","fix":"754"},[39186,39186]," rel=\"noreferrer\"",[9656,9667],"\r\n        .",{"desc":"755","fix":"756"},{"desc":"757","fix":"758"},{"desc":"757","fix":"759"},[2446,2446],{"desc":"760","fix":"761"},{"desc":"762","fix":"763"},[1203,1203],[5472,5472],[4953,4953],"Update the dependencies array to be: [errores, llamarEtiquetas, props.history, props.match.params, usuario]",{"range":"764","text":"765"},"Update the dependencies array to be: [usuario, url, history.location.pathname, history]",{"range":"766","text":"767"},"Update the dependencies array to be: [pedirComentarios]",{"range":"768","text":"769"},{"range":"770","text":"769"},"Update the dependencies array to be: [props.match.params]",{"range":"771","text":"772"},"Update the dependencies array to be: [props.informacion]",{"range":"773","text":"774"},[22758,22776],"[errores, llamarEtiquetas, props.history, props.match.params, usuario]",[11923,11964],"[usuario, url, history.location.pathname, history]",[1666,1668],"[pedirComentarios]",[1667,1669],[1071,1073],"[props.match.params]",[541,543],"[props.informacion]"]